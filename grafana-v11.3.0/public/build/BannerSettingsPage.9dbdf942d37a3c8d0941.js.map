{"version":3,"file":"BannerSettingsPage.9dbdf942d37a3c8d0941.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/announcement-banner/BannerPreview.tsx","webpack://grafana/./public/app/extensions/announcement-banner/BannerForm.tsx","webpack://grafana/./public/app/extensions/announcement-banner/BannerSettingsPage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data/';\nimport { Stack, Text } from '@grafana/ui';\nimport { useStyles2 } from '@grafana/ui/';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { Banner } from './Banner';\nimport { AnnouncementBannerSpec } from './api/types';\n\nexport type BannerPreviewProps = Pick<AnnouncementBannerSpec, 'message' | 'variant'>;\n\nexport function BannerPreview({ message, variant }: BannerPreviewProps) {\n  const styles = useStyles2(getStyles);\n  return (\n    <Stack direction={'column'} width={'100%'} gap={2}>\n      <Text variant=\"h3\">\n        <Trans i18nKey=\"banner.preview.title\">Preview</Trans>\n      </Text>\n      <div className={styles.container}>\n        <Banner\n          message={\n            message || t('banner.preview.message.default', 'Update this preview by modifying the message field.')\n          }\n          variant={variant}\n        />\n      </div>\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css({\n      backgroundColor: theme.colors.background.canvas,\n    }),\n  };\n};\n","import { useEffect } from 'react';\nimport { Controller, useForm } from 'react-hook-form';\n\nimport { AppEvents, dateTime } from '@grafana/data';\nimport { getAppEvents, reportInteraction } from '@grafana/runtime';\nimport { Button, CodeEditor, DateTimePicker, Field, FieldSet, Select, Stack, Switch } from '@grafana/ui';\nimport { FormPrompt } from 'app/core/components/FormPrompt/FormPrompt';\nimport { t, Trans } from 'app/core/internationalization';\n\nimport { BannerPreview } from './BannerPreview';\nimport { AnnouncementBannerSpec } from './api/types';\nimport { useCreateOrUpdateBanner } from './hooks';\nimport { AnnouncementBannerFormData } from './types';\n\nfunction getDefaultValues(banner?: AnnouncementBannerSpec): AnnouncementBannerFormData {\n  if (!banner) {\n    return { enabled: false, message: '', variant: 'info', visibility: 'authenticated', startTime: dateTime() };\n  }\n  return {\n    ...banner,\n    startTime: banner.startTime ? dateTime(banner.startTime) : dateTime(),\n    endTime: banner.endTime ? dateTime(banner.endTime) : undefined,\n  };\n}\n\nexport interface Props {\n  banner?: AnnouncementBannerSpec;\n  name?: string;\n}\nexport function BannerForm({ banner, name }: Props) {\n  const [submitData, request] = useCreateOrUpdateBanner(name);\n  const {\n    register,\n    control,\n    handleSubmit,\n    watch,\n    reset,\n    formState: { errors, isDirty },\n    getValues,\n  } = useForm<AnnouncementBannerFormData>({\n    defaultValues: getDefaultValues(banner),\n  });\n  const [watchStartTime, watchMessage, watchVariant] = watch(['startTime', 'message', 'variant']);\n  useEffect(() => {\n    const appEvents = getAppEvents();\n    if (request.isSuccess) {\n      const formData = getValues();\n\n      appEvents.publish({\n        type: AppEvents.alertSuccess.name,\n        payload: [t('banner.api.result.saved', 'Banner settings saved')],\n      });\n      reset({\n        ...formData,\n        startTime: formData.startTime || null,\n        endTime: formData.endTime || null,\n      });\n    }\n  }, [request.isSuccess, reset, getValues]);\n\n  const onSubmit = async (data: AnnouncementBannerFormData) => {\n    reportInteraction('grafana_banner_saved', {\n      enabled: data.enabled,\n      endSelected: !!data.endTime,\n      daysShown: !!data.endTime ? data.startTime && dateTime(data.endTime).diff(data.startTime, 'days') : undefined,\n      visibility: data.visibility,\n      variant: data.variant,\n    });\n    const bannerSpec = {\n      ...data,\n      startTime: data.startTime ? data.startTime.toISOString() : null,\n      endTime: data.endTime ? data.endTime.toISOString() : null,\n    };\n    submitData(bannerSpec);\n  };\n\n  return (\n    <Stack direction={'column'} gap={2}>\n      <BannerPreview message={watchMessage} variant={watchVariant} />\n      <form onSubmit={handleSubmit(onSubmit)} style={{ maxWidth: 650 }}>\n        <FieldSet label={t('banner.form.title', 'Configure banner')}>\n          <FormPrompt onDiscard={reset} confirmRedirect={isDirty} />\n          <Field label={t('banner.form.enabled.label', 'Enabled')}>\n            {/*Switch label is necessary for tests to work*/}\n            <Switch {...register('enabled')} label={'Enabled'} />\n          </Field>\n          <Field\n            label={t('banner.form.message.label', 'Message')}\n            description={\n              <Trans i18nKey=\"banner.form.message.description\">Text content of the banner. Supports markdown.</Trans>\n            }\n          >\n            <Controller\n              name={'message'}\n              control={control}\n              render={({ field: { ref, ...field } }) => {\n                return <CodeEditor {...field} height={200} language={'markdown'} />;\n              }}\n            />\n          </Field>\n          <Field\n            label={t('banner.form.start.label', 'Starts at')}\n            description={\n              <Trans i18nKey=\"banner.form.start.description\">\n                The banner will be shown starting from this date/time.\n              </Trans>\n            }\n          >\n            <Controller\n              name={'startTime'}\n              control={control}\n              render={({ field: { ref, value, ...field } }) => (\n                <DateTimePicker\n                  {...field}\n                  date={value || undefined}\n                  showSeconds={false}\n                  clearable\n                  minDate={new Date()}\n                />\n              )}\n            />\n          </Field>\n          <Field\n            label={t('banner.form.end.label', 'Ends at')}\n            invalid={!!errors?.endTime}\n            error={errors?.endTime?.message}\n            description={\n              <Trans i18nKey=\"banner.form.end.description\">\n                If no end date is selected, the banner is displayed indefinitely.\n              </Trans>\n            }\n          >\n            <Controller\n              name={'endTime'}\n              control={control}\n              rules={{\n                validate: (value) => {\n                  if (!watchStartTime || !value) {\n                    return true;\n                  }\n                  return value > watchStartTime\n                    ? true\n                    : t('banner.form.end.error', 'End time must be after start time');\n                },\n              }}\n              render={({ field: { ref, value, ...field } }) => (\n                <DateTimePicker {...field} date={value || undefined} showSeconds={false} clearable />\n              )}\n            />\n          </Field>\n          {/*TODO: Restore this after backend support for anonymous API access is added*/}\n          {/*<Field label={t('banner.form.visibility.label', 'Visibility')}>*/}\n          {/*  <Controller*/}\n          {/*    control={control}*/}\n          {/*    name=\"visibility\"*/}\n          {/*    render={({ field: { ref, ...field } }) => (*/}\n          {/*      <RadioButtonGroup*/}\n          {/*        {...field}*/}\n          {/*        options={[*/}\n          {/*          { label: t('banner.form.options.everyone', 'Everyone'), value: 'everyone' },*/}\n          {/*          { label: t('banner.form.options.authenticated', 'Authenticated users'), value: 'authenticated' },*/}\n          {/*        ]}*/}\n          {/*      />*/}\n          {/*    )}*/}\n          {/*  />*/}\n          {/*</Field>*/}\n          <Stack>\n            <Field label={t('banner.form.variant.label', 'Variant')}>\n              <Controller\n                name={'variant'}\n                control={control}\n                render={({ field: { ref, onChange, ...field } }) => (\n                  <Select\n                    {...field}\n                    onChange={(variant) => {\n                      onChange(variant.value);\n                    }}\n                    placeholder={'Select banner type'}\n                    options={[\n                      { label: t('banner.form.options.info', 'Info'), value: 'info' },\n                      { label: t('banner.form.options.warning', 'Warning'), value: 'warning' },\n                      { label: t('banner.form.options.error', 'Error'), value: 'error' },\n                    ]}\n                  />\n                )}\n              />\n            </Field>\n          </Stack>\n          <Button type=\"submit\" disabled={!isDirty || request.isLoading}>\n            {request.isLoading ? (\n              <Trans i18nKey=\"banner.form.button-saving\">Saving...</Trans>\n            ) : (\n              <Trans i18nKey=\"banner.form.button-save\">Save</Trans>\n            )}\n          </Button>\n        </FieldSet>\n      </form>\n    </Stack>\n  );\n}\n","import { useEffect } from 'react';\n\nimport { reportPageview } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\n\nimport { BannerForm } from './BannerForm';\nimport { useBanner } from './hooks';\n\nexport function BannerSettingsPage() {\n  const [resource, isLoading] = useBanner();\n\n  useEffect(() => {\n    reportPageview();\n  }, []);\n\n  return (\n    <Page navId=\"banner-settings\">\n      <Page.Contents isLoading={isLoading}>\n        <BannerForm banner={resource?.spec} name={resource?.metadata.name} />\n      </Page.Contents>\n    </Page>\n  );\n}\nexport default BannerSettingsPage;\n"],"names":["BannerPreview","message","variant","styles","getStyles","Stack","Text","Banner","theme","getDefaultValues","banner","BannerForm","name","submitData","request","register","control","handleSubmit","watch","reset","errors","isDirty","getValues","watchStartTime","watchMessage","watchVariant","appEvents","formData","onSubmit","data","bannerSpec","FieldSet","FormPrompt","Field","Switch","ref","field","CodeEditor","value","DateTimePicker","onChange","Select","Button","BannerSettingsPage","resource","isLoading","Page"],"sourceRoot":""}