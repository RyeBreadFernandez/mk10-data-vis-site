{"version":3,"file":"ReportPage.e561c1efdd904f8c7b85.js","mappings":"oSAIO,MAAMA,EAAwB,CAAC,CAAE,OAAAC,EAAQ,SAAAC,CAAS,IAA4D,CACnH,KAAM,CAAE,KAAAC,EAAM,cAAAC,EAAgB,EAAG,EAAIH,EAKrC,MAAO,CACL,KALkB,CAASA,EAAO,IAAO,CAACC,EAKtB,aAHFC,GAAQC,CAI5B,CACF,ECKaC,EAAsB,CAAC,CAAE,SAAAC,EAAU,SAAAJ,EAAU,UAAAK,EAAW,UAAAC,EAAW,OAAAP,EAAQ,GAAGQ,CAAK,IAAa,IAC3G,aAAU,IAAM,CACd,SAAS,MAAQ,cAAcP,EAAW,cAAgB,YAAY,EACxE,EAAG,CAACA,CAAQ,CAAC,EAEb,MAAMQ,EAAUV,EAAsB,CAAE,OAAAC,EAAQ,SAAAC,CAAS,CAAC,EAE1D,SACE,OAACS,EAAA,GAAI,CAAC,MAAM,eAAe,QAAAD,EACzB,mBAACC,EAAA,GAAK,SAAL,CACC,mBAAC,OAAK,GAAGF,EACN,SAAAF,KAAY,OAACK,EAAA,EAAU,EAAC,EAAMC,EAAA,EAAO,kBAA4DP,KAAxC,OAAC,IAAiB,CAAC,QAAQ,OAAQ,EAAK,CACpG,EACF,EACF,CAEJ,EClBMQ,EAAkB,CAACC,EAA6BC,IAAoB,CACxE,KAAM,CAAE,OAAAf,EAAQ,UAAAM,CAAU,EAAIQ,EAAM,QAEpC,MAAO,CACL,eAAgB,CAAC,CAACd,EAAO,GACzB,UAAAM,EACA,OAAAN,CACF,CACF,EAEMgB,EAAoB,CACxB,WAAU,KACV,iBAAgB,IAClB,EAEMC,KAAY,WAAQJ,EAAiBG,CAAiB,EAG/CE,EAAa,CAAC,CAAE,eAAAC,EAAgB,UAAAb,EAAW,WAAAc,EAAY,OAAApB,EAAQ,iBAAAqB,CAAiB,IAAa,CACxG,KAAM,CAAE,GAAIC,EAAU,KAAMC,EAAa,UAAQ,eAAgB,KAAI,KAAU,EACzEC,EAAkB,GAAQF,GAAYhB,MAE5C,aAAU,KACJgB,GACFF,EAAW,SAASE,EAAU,EAAE,CAAC,EAG5B,IAAM,CACXD,EAAiB,CACnB,GACC,CAACC,EAAUF,EAAYC,CAAgB,CAAC,EAE3C,MAAMI,KAAa,eAAY,IAAM,CACnC,MAAMC,EAAY,IAAY,KAAK,CAAC,CAAE,GAAAC,CAAG,IAAMA,IAAOJ,CAAU,GAAG,UACnE,OAAKG,KAGE,OAACA,EAAA,CAAU,SAAAJ,CAAA,CAAoB,EAF7B,IAGX,EAAG,CAACC,EAAYD,CAAQ,CAAC,EAEzB,SACE,OAAClB,EAAmB,CAAC,UAAWoB,EAAiB,SAAUL,EAAgB,OAAAnB,EACxE,SAAAwB,KAAkB,OAACI,EAAA,EAAM,EAAC,EAAKH,EAAW,EAC7C,CAEJ,EAEA,EAAeR,EAAUC,CAAU,C,wECzD5B,MAAMU,EAAS,CAAC,CAAE,KAAAC,EAAO,YAAa,OAEzC,OAAC,IAAG,CAAC,QAAQ,OAAO,WAAW,SAAS,UAAU,SAAS,eAAe,SAAS,WAAY,GAC7F,mBAAC,IAAkB,CAAC,KAAAA,CAAA,CAAY,EAClC,C","sources":["webpack://grafana/./public/app/extensions/reports/utils/navigation.ts","webpack://grafana/./public/app/extensions/reports/ReportForm/ReportPageContainer.tsx","webpack://grafana/./public/app/extensions/reports/ReportForm/ReportPage.tsx","webpack://grafana/./public/app/features/plugins/admin/components/Loader.tsx"],"sourcesContent":["import { NavModelItem } from '@grafana/data';\n\nimport { Report } from '../../types';\n\nexport const getPageNavInformation = ({ report, editMode }: { report: Report; editMode?: boolean }): NavModelItem => {\n  const { name, dashboardName = '' } = report;\n  const isNewReport = !Boolean(report.id) && !editMode;\n  // dashboardname is a  placeholder text used when the report is saved as draft without adding a report name\n  const reportTitle = name || dashboardName;\n\n  return {\n    text: isNewReport ? 'New report' : reportTitle,\n  };\n};\n","import { HTMLAttributes, useEffect } from 'react';\nimport * as React from 'react';\n\nimport { config } from '@grafana/runtime';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\n\nimport { Report } from '../../types';\nimport { NoRendererInfoBox } from '../RenderingWarnings';\nimport { getPageNavInformation } from '../utils/navigation';\n\ninterface Props extends HTMLAttributes<HTMLDivElement> {\n  isLoading: boolean;\n  editMode?: boolean;\n  children?: React.ReactNode;\n  report: Report;\n}\n\nexport const ReportPageContainer = ({ children, editMode, isLoading, className, report, ...rest }: Props) => {\n  useEffect(() => {\n    document.title = `Reporting: ${editMode ? 'Edit report' : 'New report'}`;\n  }, [editMode]);\n\n  const pageNav = getPageNavInformation({ report, editMode });\n\n  return (\n    <Page navId=\"reports-list\" pageNav={pageNav}>\n      <Page.Contents>\n        <div {...rest}>\n          {isLoading ? <PageLoader /> : !config.rendererAvailable ? <NoRendererInfoBox variant=\"error\" /> : children}\n        </div>\n      </Page.Contents>\n    </Page>\n  );\n};\n","import { useCallback, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { Loader } from 'app/features/plugins/admin/components/Loader';\n\nimport { EnterpriseStoreState, StepKey } from '../../types';\nimport { reportSteps } from '../index';\nimport { loadReport } from '../state/actions';\nimport { clearReportState } from '../state/reducers';\n\nimport { ReportPageContainer } from './ReportPageContainer';\n\ninterface OwnProps extends GrafanaRouteComponentProps<{ id: string; step: StepKey }> {}\n\nconst mapStateToProps = (state: EnterpriseStoreState, props: OwnProps) => {\n  const { report, isLoading } = state.reports;\n\n  return {\n    existingReport: !!report.id,\n    isLoading,\n    report,\n  };\n};\n\nconst mapActionsToProps = {\n  loadReport,\n  clearReportState,\n};\n\nconst connector = connect(mapStateToProps, mapActionsToProps);\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nexport const ReportPage = ({ existingReport, isLoading, loadReport, report, clearReportState }: Props) => {\n  const { id: reportId, step: activeStep = StepKey.SelectDashboard } = useParams();\n  const isReportLoading = Boolean(reportId && isLoading);\n\n  useEffect(() => {\n    if (reportId) {\n      loadReport(parseInt(reportId, 10));\n    }\n\n    return () => {\n      clearReportState();\n    };\n  }, [reportId, loadReport, clearReportState]);\n\n  const renderStep = useCallback(() => {\n    const Component = reportSteps.find(({ id }) => id === activeStep)?.component;\n    if (!Component) {\n      return null;\n    }\n    return <Component reportId={reportId} />;\n  }, [activeStep, reportId]);\n\n  return (\n    <ReportPageContainer isLoading={isReportLoading} editMode={existingReport} report={report}>\n      {isReportLoading ? <Loader /> : renderStep()}\n    </ReportPageContainer>\n  );\n};\n\nexport default connector(ReportPage);\n","import { Box, LoadingPlaceholder } from '@grafana/ui';\n\nexport interface Props {\n  text?: string;\n}\n\nexport const Loader = ({ text = 'Loading...' }: Props) => {\n  return (\n    <Box display=\"flex\" alignItems=\"center\" direction=\"column\" justifyContent=\"center\" paddingTop={10}>\n      <LoadingPlaceholder text={text} />\n    </Box>\n  );\n};\n"],"names":["getPageNavInformation","report","editMode","name","dashboardName","ReportPageContainer","children","isLoading","className","rest","pageNav","Page","PageLoader","config","mapStateToProps","state","props","mapActionsToProps","connector","ReportPage","existingReport","loadReport","clearReportState","reportId","activeStep","isReportLoading","renderStep","Component","id","Loader","text"],"sourceRoot":""}