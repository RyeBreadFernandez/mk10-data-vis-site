{"version":3,"file":"ConnectionsDataSourcePermissionsPage.6e3d9571cf1665ddea2a.js","mappings":"4NAQO,MAAMA,EAA4B,IAAM,CAC7C,KAAM,CAAE,IAAAC,EAAM,EAAG,KAAI,KAA2B,EAC1C,CAAE,MAAAC,EAAO,QAAAC,CAAQ,KAAI,KAAyB,aAAa,EAEjE,SACE,OAAC,KAAI,CAAC,MAAAD,EAAc,QAAAC,EAClB,mBAAC,KAAK,SAAL,CACC,mBAAC,IAAqB,CAAC,IAAAF,CAAA,CAAU,EACnC,EACF,CAEJ,EAEA,EAAeD,C,oHCXR,SAASI,EAAyBC,EAAsB,CAC7D,KAAM,CAAE,IAAAJ,CAAI,KAAI,KAA2B,EACrCK,KAAW,MAAY,EACvBC,KAAa,MAAcN,CAAG,EAC9BO,KAAiB,MAAkBD,EAAW,IAAI,EAClDE,KAAmB,MAAaF,EAAW,IAAI,EAC/CG,EAAS,IAAI,gBAAgBJ,EAAS,MAAM,EAC5CK,EAASN,GAAeK,EAAO,IAAI,MAAM,EAEzC,CAAE,OAAAE,EAAQ,UAAAC,EAAW,QAAAC,CAAQ,KAAI,MAAsB,EACvDC,KAAM,KAAiB,GAAG,oBAAoBd,CAAG,EACjDe,EAAqB,GAAQD,GAAK,MAAM,UAAY,IACpDE,EAA2BF,GAAK,OAAS,eACzCG,EAAoBF,GAAsBC,EAE1CE,KAAW,eAAaC,GAAUA,EAAM,QAAQ,EAChDC,EAAaV,EAAS,cAAcA,CAAM,IAAIV,CAAG,GAAK,uBAAuBA,CAAG,GACtF,IAAIE,EAAoB,CACtB,KAAM,CACJ,KAAM,sBACR,EACA,KAAM,CACJ,KAAM,sBACR,CACF,EAEA,GAAIU,EAAW,CACb,MAAMS,EAAqB,CACzB,KAAMT,EACN,SAAU,oBACV,KAAM,sBACR,EAEAV,EAAU,CACR,KAAAmB,EACA,KAAMA,CACR,CACF,CAEA,OAAIR,GAAW,CAACF,KACdT,KAAU,MAAYgB,EAAUE,KAAY,MAAwB,UAAU,CAAC,GAG7ET,IACFT,KAAU,MACRgB,EACAE,KACA,SAAiB,MAAcd,EAAYK,CAAM,EAAGD,GAAU,UAAU,CAC1E,GAeK,CACL,MAAO,0BACP,QAdyB,CACzB,GAAGR,EAAQ,KACX,qBAAsBM,GAAkB,MAAQG,GAAQ,KAAK,MAAQ,GACrE,OAAQ,GACR,KAAML,EAAW,KACjB,SAAU,SAASC,EAAe,IAAI,GACtC,UAAWL,EAAQ,KAAK,UAAY,CAAC,GAAG,IAAKoB,IAAkB,CAC7D,GAAGA,EACH,IAAKA,EAAa,KAAK,QAAQ,oBAAqB,gCAAgC,CACtF,EAAE,CACJ,EAKE,iBAAkB,CAChB,kBAAAL,CACF,CACF,CACF,C,sPCtEO,MAAMM,EAAcJ,GAAmCA,EAAM,QAEvDK,KAAc,MAAeD,EAAY,CAAC,CAAE,MAAAE,CAAM,IAAMA,CAAK,EAE7D,CAAE,UAAAC,EAAW,WAAU,CAAC,EAAI,KAAe,aAAaF,CAAW,EAoBnEG,EAAiBC,MAC5B,MAAeF,EAAYG,GAAY,CACrC,MAAMC,EAAUF,EAAQ,WAAU,MAAwBA,EAAQ,QAAQ,YAAY,CAAC,EAAI,GACrFG,EAAoBD,IAAY,MAAK,MAAgBD,EAASC,CAAO,EAAI,KAE/E,OAAIA,MACF,MAAkB,iBAAkB,CAAE,aAAcC,GAAmB,MAAO,CAAC,EAE1EF,EAAQ,OAAQlB,GACjB,EAAAmB,GAAWC,GAAqB,MAIhCD,GAAW,CAACC,GAAmB,SAASpB,EAAO,EAAE,GAIjDiB,EAAQ,MAAQjB,EAAO,OAASiB,EAAQ,MAIxCA,EAAQ,cAAgB,QAAajB,EAAO,cAAgBiB,EAAQ,aAIpEA,EAAQ,eAAiB,QAAajB,EAAO,eAAiBiB,EAAQ,cAItEA,EAAQ,YAAc,SAAcjB,EAAO,YAAciB,EAAQ,WAAa,IAAC,MAAmBjB,CAAM,GAK7G,CACH,CAAC,EAEUqB,EAAsBC,MACjC,MAAeP,EAAYG,GAAY,CACrC,MAAMK,EAA8B,CAAC,EACrC,UAAWvB,KAAUkB,EACflB,EAAO,QAAU,CAACsB,GAAsBtB,EAAO,OAASsB,IAC1DC,EAAa,KAAK,CAChB,SAAUvB,EAAO,GACjB,UAAWA,EAAO,MAClB,WAAYA,EAAO,IACrB,CAAC,EAGL,OAAOuB,CACT,CAAC,EAGUC,EAAiBC,MAC5B,MAAeb,EAAY,CAAC,CAAE,SAAAc,EAAW,CAAC,CAAE,IAAMA,EAASD,CAAU,CAAC,EAE3DE,EAA0BF,MACrC,MAAeD,EAAcC,CAAU,EAAIG,GAAYA,GAAS,SAAW,KAAc,OAAO,EAErFC,EAAsBJ,MACjC,MAAeD,EAAcC,CAAU,EAAIG,GACzCA,GAAS,SAAW,KAAc,SAAWA,GAAS,MAAQ,IAChE,EAEW,EAA6BH,MACxC,MAAeD,EAAcC,CAAU,EAAIG,GAAYA,IAAY,MAAS,EChFjEE,EAAY,CAACb,EAAwBc,EAAkB,KAAQ,UAAY,CACtFC,EAAY,EAEZ,MAAMC,KAAW,WAAQ,IAAMjB,EAAcC,CAAO,EAAG,CAACA,CAAO,CAAC,EAC1DC,KAAU,eAAYe,CAAQ,EAG9B,CAAE,UAAAC,EAAW,MAAAC,CAAM,EAAIC,EAAoB,EAC3CC,KAAgB,MAAYnB,EAASa,CAAM,EAEjD,MAAO,CACL,UAAAG,EACA,MAAAC,EACA,QAASE,CACX,CACF,EAEaC,EAAkB,IAAM,CACnC,KAAM,CAAE,UAAAJ,CAAU,EAAIK,EAAe,EAC/B,CAAE,QAASC,CAAU,EAAIV,EAAU,CAAE,YAAa,EAAK,CAAC,EACxDW,EAAmBD,EAAU,OAAO,IAAkB,EAC5D,MAAO,CACL,UAAAN,EACA,iBAAAO,CACF,CACF,EAEaC,EAAgBC,IAC3BX,EAAY,EACZY,EAAgBD,CAAE,KAEX,eAAanC,GAAU,EAAWA,EAAOmC,CAAE,CAAC,GAGxCE,EAAmCF,IAC9CG,EAAiB,EACV,YAAatC,GAAU,WAAWA,EAAOmC,CAAE,CAAC,GAGxCI,EAAgBzB,IAC3BU,EAAY,KAEL,eAAYX,EAAmBC,CAAkB,CAAC,GAG9C0B,EAAa,IAAM,CAC9B,MAAMC,KAAW,eAAY,EAC7B,MAAO,CAACN,EAAYO,EAAkBC,IAAyBF,KAAS,MAAQ,CAAE,GAAAN,EAAI,QAAAO,EAAS,WAAAC,CAAW,CAAC,CAAC,CAC9G,EAEaC,EAAkB,IAAM,CACnC,MAAMH,KAAW,eAAY,EAE7B,MAAO,IAAMA,KAAS,MAAa,CAAC,CACtC,EAEaI,EAAe,IAAM,CAChC,MAAMJ,KAAW,eAAY,EAE7B,OAAQN,GAAeM,KAAS,MAAUN,CAAE,CAAC,CAC/C,EAEaW,EAA8B,OAC3B,eAAYzB,EAAmB,KAAmB,UAAU,CAAC,IAC1D,KAGNO,EAAsB,IAAM,CACvC,MAAMF,KAAY,eAAYP,EAAuB,oBAAoB,CAAC,EACpEQ,KAAQ,eAAYN,EAAmB,oBAAoB,CAAC,EAElE,MAAO,CAAE,UAAAK,EAAW,MAAAC,CAAM,CAC5B,EAEaI,EAAiB,IAAM,CAClC,MAAMgB,KAAe,eAAY5B,EAAuB,KAAS,UAAU,CAAC,EACtE6B,KAAiB,eAAY7B,EAAuB,oBAAoB,CAAC,EACzE8B,KAAkB,eAAY9B,EAAuB,qBAAqB,CAAC,EAC3EO,EAAYqB,GAAgBC,GAAkBC,EAC9CtB,KAAQ,eAAYN,EAAmB,KAAS,UAAU,CAAC,EAEjE,MAAO,CAAE,UAAAK,EAAW,MAAAC,CAAM,CAC5B,EAEauB,EAAwB,IAAM,CACzC,MAAMxB,KAAY,eAAYP,EAAuB,KAAa,UAAU,CAAC,EACvEQ,KAAQ,eAAYN,EAAmB,KAAa,UAAU,CAAC,EAErE,MAAO,CAAE,UAAAK,EAAW,MAAAC,CAAM,CAC5B,EAEawB,EAAmB,IAAM,CACpC,MAAMC,KAAe,eAAYjC,EAAuB,KAAQ,UAAU,CAAC,EACrEQ,KAAQ,eAAYN,EAAmB,KAAQ,UAAU,CAAC,EAEhE,MAAO,CAAE,aAAA+B,EAAc,MAAAzB,CAAM,CAC/B,EAEa0B,EAAqB,IAAM,CACtC,MAAMC,KAAiB,eAAYnC,EAAuB,KAAU,UAAU,CAAC,EACzEQ,KAAQ,eAAYN,EAAmB,KAAU,UAAU,CAAC,EAElE,MAAO,CAAE,eAAAiC,EAAgB,MAAA3B,CAAM,CACjC,EAGaH,EAAc,IAAM,CAC/B,MAAMiB,KAAW,eAAY,EACvBc,KAAe,eAAY,EAA0B,KAAS,UAAU,CAAC,KAE/E,aAAU,IAAM,CACdA,GAAgBd,KAAS,MAAS,CAAC,CACrC,EAAG,CAAC,CAAC,CACP,EAGaH,EAAmB,IAAM,CACpC,MAAMG,EAAW,YAAY,EACvBc,EAAe,YAAY,0BAA0B,cAAc,UAAU,CAAC,EAEpF,UAAU,IAAM,CACdA,GAAgBd,EAAS,cAAc,CAAC,CAC1C,EAAG,CAAC,CAAC,CACP,EAEaL,EAAmBD,GAAe,CAC7C,MAAMM,KAAW,eAAY,EACvBjD,KAAS,eAAaQ,GAAU,EAAWA,EAAOmC,CAAE,CAAC,EAErDqB,EADgB,IAAC,eAAYrC,EAAuB,KAAa,UAAU,CAAC,GAC7C3B,GAAU,CAACA,EAAO,WAEvD,aAAU,IAAM,CACdgE,GAAef,KAAS,MAAaN,CAAE,CAAC,CAC1C,EAAG,CAAC3C,CAAM,CAAC,CACb,EAEaiE,EAAsB,IAAM,CACvC,MAAMhB,KAAW,eAAY,EAE7B,OAAQN,GAAeM,KAAS,MAAaN,CAAE,CAAC,CAClD,C","sources":["webpack://grafana/./public/app/extensions/connections/DataSourcePermissionsPage.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { useDataSourceSettingsNav } from 'app/features/connections/hooks/useDataSourceSettingsNav';\n\nimport DataSourcePermissions from '../permissions/DataSourcePermissions';\n\n// The RBAC version of the data source permissions page\nexport const DataSourcePermissionsPage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('permissions');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourcePermissions uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourcePermissionsPage;\n","import { useLocation, useParams } from 'react-router-dom';\n\nimport { NavModel, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDataSource, useDataSourceMeta, useDataSourceSettings } from 'app/features/datasources/state/hooks';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from 'app/features/datasources/state/navModel';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\nimport { useSelector } from 'app/types';\n\nexport function useDataSourceSettingsNav(pageIdParam?: string) {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(datasource.type);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = pageIdParam || params.get('page');\n\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const dsi = getDataSourceSrv()?.getInstanceSettings(uid);\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${uid}` : `datasource-settings-${uid}`;\n  let pageNav: NavModel = {\n    node: {\n      text: 'Data Source Nav Node',\n    },\n    main: {\n      text: 'Data Source Nav Node',\n    },\n  };\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    pageNav = {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    pageNav = getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  if (plugin) {\n    pageNav = getNavModel(\n      navIndex,\n      navIndexId,\n      getDataSourceNav(buildNavModel(datasource, plugin), pageId || 'settings')\n    );\n  }\n\n  const connectionsPageNav = {\n    ...pageNav.main,\n    dataSourcePluginName: datasourcePlugin?.name || plugin?.meta.name || '',\n    active: true,\n    text: datasource.name,\n    subTitle: `Type: ${dataSourceMeta.name}`,\n    children: (pageNav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-datasources',\n    pageNav: connectionsPageNav,\n    dataSourceHeader: {\n      alertingSupported,\n    },\n  };\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { filterByKeyword, isPluginUpdateable } from '../helpers';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n\n  // (Optional, only applied if set)\n  hasUpdate?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n    const filteredPluginIds = keyword !== '' ? filterByKeyword(plugins, keyword) : null;\n\n    if (keyword) {\n      reportInteraction('plugins_search', { resultsCount: filteredPluginIds?.length });\n    }\n    return plugins.filter((plugin) => {\n      if (keyword && filteredPluginIds == null) {\n        return false;\n      }\n\n      if (keyword && !filteredPluginIds?.includes(plugin.id)) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      if (filters.hasUpdate !== undefined && (plugin.hasUpdate !== filters.hasUpdate || !isPluginUpdateable(plugin))) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters, isPluginUpdateable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetUpdatable = () => {\n  const { isLoading } = useFetchStatus();\n  const { plugins: installed } = useGetAll({ isInstalled: true });\n  const updatablePlugins = installed.filter(isPluginUpdateable);\n  return {\n    isLoading,\n    updatablePlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isAllLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const isLocalLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const isRemoteLoading = useSelector(selectIsRequestPending('plugins/fetchRemote'));\n  const isLoading = isAllLoading || isLocalLoading || isRemoteLoading;\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n"],"names":["DataSourcePermissionsPage","uid","navId","pageNav","useDataSourceSettingsNav","pageIdParam","location","datasource","dataSourceMeta","datasourcePlugin","params","pageId","plugin","loadError","loading","dsi","hasAlertingEnabled","isAlertManagerDatasource","alertingSupported","navIndex","state","navIndexId","node","navModelItem","selectRoot","selectItems","items","selectAll","selectPlugins","filters","plugins","keyword","filteredPluginIds","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","sortBy","useFetchAll","selector","isLoading","error","useLocalFetchStatus","sortedPlugins","useGetUpdatable","useFetchStatus","installed","updatablePlugins","useGetSingle","id","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","dispatch","version","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","isAllLoading","isLocalLoading","isRemoteLoading","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy"],"sourceRoot":""}