{"version":3,"file":"ConnectionsDataSourceInsightsUpgradePage.994047700dd4924ae4a9.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/connections/DataSourceInsightsUpgradePage.tsx","webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsightsUpgrade.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/datasources/utils.ts","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { useDataSourceSettingsNav } from 'app/features/connections/hooks/useDataSourceSettingsNav';\n\nimport { DataSourceInsightsUpgrade } from '../meta-analytics/DataSourceInsights/DataSourceInsightsUpgrade';\n\nexport const DataSourceInsightsUpgradePage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('insights');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceInsightsUpgrade uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourceInsightsUpgradePage;\n","import { useTheme2 } from '@grafana/ui';\nimport { UpgradeBox, UpgradeContent } from 'app/core/components/Upgrade/UpgradeBox';\nimport { useInitDataSourceSettings } from 'app/features/datasources/state';\n\nexport type Props = {\n  uid: string;\n};\n\nexport const DataSourceInsightsUpgrade = ({ uid }: Props) => {\n  useInitDataSourceSettings(uid);\n\n  const theme = useTheme2();\n\n  return (\n    <>\n      <UpgradeBox featureName={'data source usage insights'} featureId={'data-source-insights'} />\n      <UpgradeContent\n        listItems={[\n          'Demonstrate and improve the value of your observability service by keeping track of user engagement',\n          'Keep Grafana performant by identifying and fixing slow, error-prone data sources',\n          'Clean up your instance by finding and removing unused data sources',\n          'Review individual data source usage insights at a glance in the UI, sort search results by usage and errors, or dig into detailed usage logs',\n        ]}\n        image={`datasource-insights-${theme.isLight ? 'light' : 'dark'}.png`}\n        featureName={'data source usage insights'}\n        description={\n          'Usage Insights provide detailed information about data source usage, like the number of views, queries, and errors users have experienced. You can use this to improve users’ experience and troubleshoot issues'\n        }\n        featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/usage-insights/dashboard-datasource-insights'}\n      />\n    </>\n  );\n};\n","import { useLocation, useParams } from 'react-router-dom';\n\nimport { NavModel, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDataSource, useDataSourceMeta, useDataSourceSettings } from 'app/features/datasources/state/hooks';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from 'app/features/datasources/state/navModel';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\nimport { useSelector } from 'app/types';\n\nexport function useDataSourceSettingsNav(pageIdParam?: string) {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(datasource.type);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = pageIdParam || params.get('page');\n\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const dsi = getDataSourceSrv()?.getInstanceSettings(uid);\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${uid}` : `datasource-settings-${uid}`;\n  let pageNav: NavModel = {\n    node: {\n      text: 'Data Source Nav Node',\n    },\n    main: {\n      text: 'Data Source Nav Node',\n    },\n  };\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    pageNav = {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    pageNav = getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  if (plugin) {\n    pageNav = getNavModel(\n      navIndex,\n      navIndexId,\n      getDataSourceNav(buildNavModel(datasource, plugin), pageId || 'settings')\n    );\n  }\n\n  const connectionsPageNav = {\n    ...pageNav.main,\n    dataSourcePluginName: datasourcePlugin?.name || plugin?.meta.name || '',\n    active: true,\n    text: datasource.name,\n    subTitle: `Type: ${dataSourceMeta.name}`,\n    children: (pageNav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-datasources',\n    pageNav: connectionsPageNav,\n    dataSourceHeader: {\n      alertingSupported,\n    },\n  };\n}\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { DataSourceJsonData, DataSourceSettings, urlUtil, locationUtil } from '@grafana/data';\n\nexport const constructDataSourceExploreUrl = (dataSource: DataSourceSettings<DataSourceJsonData, {}>) => {\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl(locationUtil.assureBaseUrl('/explore'), { left: exploreState });\n\n  return exploreUrl;\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { filterByKeyword, isPluginUpdateable } from '../helpers';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n\n  // (Optional, only applied if set)\n  hasUpdate?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n    const filteredPluginIds = keyword !== '' ? filterByKeyword(plugins, keyword) : null;\n\n    if (keyword) {\n      reportInteraction('plugins_search', { resultsCount: filteredPluginIds?.length });\n    }\n    return plugins.filter((plugin) => {\n      if (keyword && filteredPluginIds == null) {\n        return false;\n      }\n\n      if (keyword && !filteredPluginIds?.includes(plugin.id)) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      if (filters.hasUpdate !== undefined && (plugin.hasUpdate !== filters.hasUpdate || !isPluginUpdateable(plugin))) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters, isPluginUpdateable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetUpdatable = () => {\n  const { isLoading } = useFetchStatus();\n  const { plugins: installed } = useGetAll({ isInstalled: true });\n  const updatablePlugins = installed.filter(isPluginUpdateable);\n  return {\n    isLoading,\n    updatablePlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isAllLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const isLocalLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const isRemoteLoading = useSelector(selectIsRequestPending('plugins/fetchRemote'));\n  const isLoading = isAllLoading || isLocalLoading || isRemoteLoading;\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n"],"names":["DataSourceInsightsUpgradePage","uid","navId","pageNav","DataSourceInsightsUpgrade","theme","useDataSourceSettingsNav","pageIdParam","location","datasource","dataSourceMeta","datasourcePlugin","params","pageId","plugin","loadError","loading","dsi","hasAlertingEnabled","isAlertManagerDatasource","alertingSupported","navIndex","state","navIndexId","node","navModelItem","DataSourcesRoutesContext","useInitDataSourceSettings","dispatch","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","useUpdateDatasource","dataSource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","constructDataSourceExploreUrl","exploreState","selectRoot","selectItems","items","selectAll","selectPlugins","filters","plugins","keyword","filteredPluginIds","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","sortBy","useFetchAll","selector","error","useLocalFetchStatus","sortedPlugins","useGetUpdatable","useFetchStatus","installed","updatablePlugins","useGetSingle","id","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","version","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","isAllLoading","isLocalLoading","isRemoteLoading","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy"],"sourceRoot":""}