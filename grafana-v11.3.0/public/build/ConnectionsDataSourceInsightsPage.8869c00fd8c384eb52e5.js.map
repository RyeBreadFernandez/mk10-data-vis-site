{"version":3,"file":"ConnectionsDataSourceInsightsPage.8869c00fd8c384eb52e5.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/connections/DataSourceInsightsPage.tsx","webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsights.tsx","webpack://grafana/./public/app/features/connections/hooks/useDataSourceSettingsNav.ts","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/datasources/utils.ts","webpack://grafana/./public/app/features/plugins/admin/state/selectors.ts","webpack://grafana/./public/app/features/plugins/admin/state/hooks.ts"],"sourcesContent":["import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { useDataSourceSettingsNav } from 'app/features/connections/hooks/useDataSourceSettingsNav';\n\nimport DataSourceInsights from '../meta-analytics/DataSourceInsights/DataSourceInsights';\n\nexport const DataSourceInsightsPage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const { navId, pageNav } = useDataSourceSettingsNav('insights');\n\n  return (\n    <Page navId={navId} pageNav={pageNav}>\n      <Page.Contents>\n        <DataSourceInsights uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourceInsightsPage;\n","import { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport {\n  DataFrame,\n  dateTime,\n  FieldType,\n  TimeRange,\n  FieldConfigSource,\n  PanelData,\n  LoadingState,\n} from '@grafana/data';\nimport { featureEnabled, PanelRenderer } from '@grafana/runtime';\nimport { TooltipDisplayMode, VisibilityMode, SortOrder, GraphDrawStyle, LegendDisplayMode } from '@grafana/schema';\nimport { InfoBox, Themeable2, withTheme2, PanelChrome } from '@grafana/ui';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { loadDataSource, loadDataSourceMeta } from 'app/features/datasources/state/actions';\nimport {\n  FieldConfig as TimeseriesFieldConfig,\n  Options as TimeseriesOptions,\n} from 'app/plugins/panel/timeseries/panelcfg.gen';\n\nimport { EnterpriseStoreState } from '../../types';\nimport { DAILY_SUMMARY_DATE_FORMAT, DataSourceDailySummaryDTO, getDataSourceDailySummaries } from '../api';\nimport { getInsightsStyles, InsightsStyles } from '../styles';\n\nexport type ExternalProps = {\n  uid: string;\n};\n\nconst mapStateToProps = (state: EnterpriseStoreState, props: ExternalProps) => {\n  return {\n    dataSourceUid: props.uid,\n  };\n};\n\nconst mapDispatchToProps = {\n  loadDataSource,\n  loadDataSourceMeta,\n};\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 & ConnectedProps<typeof connector>;\n\ninterface State {\n  dailySummaries: DataSourceDailySummaryDTO[];\n  from: string;\n  to: string;\n}\n\ninterface ChartConfig {\n  title: string;\n  valueField: keyof DataSourceDailySummaryDTO;\n  fieldType: FieldType;\n  width: number;\n  timeRange: TimeRange;\n  color: string;\n  showBars: boolean;\n  showLines: boolean;\n}\n\nclass DataSourceInsights extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      dailySummaries: [],\n      from: '',\n      to: '',\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    const { dataSourceUid, loadDataSource, loadDataSourceMeta } = this.props;\n\n    loadDataSource(dataSourceUid).then(loadDataSourceMeta);\n\n    if (featureEnabled('analytics')) {\n      let from = dateTime().subtract(30, 'days').format(DAILY_SUMMARY_DATE_FORMAT);\n      let to = dateTime().format(DAILY_SUMMARY_DATE_FORMAT);\n      const dailySummaries = await getDataSourceDailySummaries(dataSourceUid, from, to);\n      this.setState({ dailySummaries, from, to });\n    }\n  }\n\n  buildTimeRange(): TimeRange {\n    const { from, to } = this.state;\n\n    const timeRangeFrom = dateTime(from);\n    const timeRangeTo = dateTime(to).add(24, 'hours');\n\n    return {\n      from: timeRangeFrom,\n      to: timeRangeTo,\n      raw: { from, to },\n    };\n  }\n\n  convertDailySummariesToDataFrame(\n    data: DataSourceDailySummaryDTO[],\n    valueField: keyof DataSourceDailySummaryDTO,\n    valueFieldType: FieldType\n  ): DataFrame {\n    const time: number[] = [];\n    const values: any[] = [];\n\n    data.forEach((dailySummary) => {\n      time.push(dateTime(dailySummary.day, DAILY_SUMMARY_DATE_FORMAT).valueOf());\n      let value = dailySummary[valueField];\n      if (valueField === 'loadDuration') {\n        value = dailySummary.queries ? dailySummary.loadDuration / (dailySummary.queries * 1000000) : 0;\n      }\n      values.push(value);\n    });\n\n    return {\n      name: valueField,\n      fields: [\n        { name: 'Time', type: FieldType.time, config: {}, values: time },\n        { name: valueField, type: valueFieldType, config: {}, values: values },\n      ],\n      length: data.length,\n    };\n  }\n\n  renderChart(config: ChartConfig, styles: InsightsStyles) {\n    const { dailySummaries } = this.state;\n    const { color, fieldType, showBars, timeRange, title, valueField, width } = config;\n\n    let dataFrame = this.convertDailySummariesToDataFrame(dailySummaries, valueField, fieldType);\n\n    // const series = getGraphSeriesModel(\n    //   [dataFrame],\n    //   'browser',\n    //   seriesOptions,\n    //   { showBars: showBars, showLines: showLines, showPoints: false },\n    //   { placement: 'bottom', displayMode: LegendDisplayMode.List, showLegend: false }\n    // );\n\n    const panelData: PanelData = {\n      series: [dataFrame],\n      state: LoadingState.Done,\n      timeRange, // this.buildTimeRange(),\n    };\n\n    const panelOptions: TimeseriesOptions = {\n      legend: {\n        showLegend: false,\n        displayMode: LegendDisplayMode.Hidden,\n        calcs: [],\n        placement: 'bottom',\n      },\n      tooltip: {\n        mode: TooltipDisplayMode.Multi,\n        sort: SortOrder.Descending,\n      },\n    };\n\n    const fieldConfig: FieldConfigSource<TimeseriesFieldConfig> = {\n      defaults: {\n        color: {\n          mode: 'fixed',\n          fixedColor: color,\n        },\n        custom: {\n          showPoints: VisibilityMode.Never,\n          drawStyle: showBars ? GraphDrawStyle.Bars : GraphDrawStyle.Line,\n          fillOpacity: showBars ? 50 : 0,\n        },\n      },\n      overrides: [],\n    };\n\n    return (\n      <div className={styles.graphContainer}>\n        <PanelChrome title={title} width={width} height={220} displayMode=\"transparent\" loadingState={panelData.state}>\n          {(innerWidth, innerHeight) => (\n            <PanelRenderer\n              title={title}\n              width={innerWidth}\n              height={innerHeight}\n              pluginId=\"timeseries\"\n              data={panelData}\n              fieldConfig={fieldConfig}\n              options={panelOptions}\n            />\n          )}\n        </PanelChrome>\n      </div>\n    );\n  }\n\n  renderContent() {\n    const { theme } = this.props;\n    const styles = getInsightsStyles(theme);\n    const { dailySummaries } = this.state;\n    const timeRange = this.buildTimeRange();\n\n    return dailySummaries?.length > 0 ? (\n      <AutoSizer disableHeight>\n        {({ width }) => {\n          const charts: ChartConfig[] = [\n            {\n              title: 'Queries last 30 days',\n              valueField: 'queries',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: 'green',\n              showBars: true,\n              showLines: false,\n            },\n            {\n              title: 'Errors last 30 days',\n              valueField: 'errors',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: theme.colors.error.border,\n              showBars: true,\n              showLines: false,\n            },\n            {\n              title: 'Average load duration last 30 days (ms)',\n              valueField: 'loadDuration',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: theme.colors.primary.border,\n              showBars: true,\n              showLines: false,\n            },\n          ];\n\n          return <main style={{ width }}>{charts.map((chart) => this.renderChart(chart, styles))}</main>;\n        }}\n      </AutoSizer>\n    ) : (\n      <span>No available data for this data source.</span>\n    );\n  }\n\n  render() {\n    if (featureEnabled('analytics.writers') && !featureEnabled('analytics')) {\n      return (\n        <InfoBox\n          title=\"Feature not available with an expired license\"\n          url=\"https://grafana.com/docs/grafana/latest/enterprise/license-expiration/\"\n          urlTitle=\"Read more on license expiration\"\n        >\n          <span>\n            Data source insights are not available with an expired license. Data will continue to be collected but you\n            need to update your license to see this page.\n          </span>\n        </InfoBox>\n      );\n    }\n\n    return (\n      <>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'data-source-insights'}\n            eventVariant={'trial'}\n            featureName={'data source usage insights'}\n            text={'Enable data source usage insights for free during your trial of Grafana Pro.'}\n          />\n        )}\n        {this.renderContent()}\n      </>\n    );\n  }\n}\n\nexport default connector(withTheme2(DataSourceInsights));\n","import { useLocation, useParams } from 'react-router-dom';\n\nimport { NavModel, NavModelItem } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { useDataSource, useDataSourceMeta, useDataSourceSettings } from 'app/features/datasources/state/hooks';\nimport { getDataSourceLoadingNav, buildNavModel, getDataSourceNav } from 'app/features/datasources/state/navModel';\nimport { useGetSingle } from 'app/features/plugins/admin/state/hooks';\nimport { useSelector } from 'app/types';\n\nexport function useDataSourceSettingsNav(pageIdParam?: string) {\n  const { uid } = useParams<{ uid: string }>();\n  const location = useLocation();\n  const datasource = useDataSource(uid);\n  const dataSourceMeta = useDataSourceMeta(datasource.type);\n  const datasourcePlugin = useGetSingle(datasource.type);\n  const params = new URLSearchParams(location.search);\n  const pageId = pageIdParam || params.get('page');\n\n  const { plugin, loadError, loading } = useDataSourceSettings();\n  const dsi = getDataSourceSrv()?.getInstanceSettings(uid);\n  const hasAlertingEnabled = Boolean(dsi?.meta?.alerting ?? false);\n  const isAlertManagerDatasource = dsi?.type === 'alertmanager';\n  const alertingSupported = hasAlertingEnabled || isAlertManagerDatasource;\n\n  const navIndex = useSelector((state) => state.navIndex);\n  const navIndexId = pageId ? `datasource-${pageId}-${uid}` : `datasource-settings-${uid}`;\n  let pageNav: NavModel = {\n    node: {\n      text: 'Data Source Nav Node',\n    },\n    main: {\n      text: 'Data Source Nav Node',\n    },\n  };\n\n  if (loadError) {\n    const node: NavModelItem = {\n      text: loadError,\n      subTitle: 'Data Source Error',\n      icon: 'exclamation-triangle',\n    };\n\n    pageNav = {\n      node: node,\n      main: node,\n    };\n  }\n\n  if (loading || !plugin) {\n    pageNav = getNavModel(navIndex, navIndexId, getDataSourceLoadingNav('settings'));\n  }\n\n  if (plugin) {\n    pageNav = getNavModel(\n      navIndex,\n      navIndexId,\n      getDataSourceNav(buildNavModel(datasource, plugin), pageId || 'settings')\n    );\n  }\n\n  const connectionsPageNav = {\n    ...pageNav.main,\n    dataSourcePluginName: datasourcePlugin?.name || plugin?.meta.name || '',\n    active: true,\n    text: datasource.name,\n    subTitle: `Type: ${dataSourceMeta.name}`,\n    children: (pageNav.main.children || []).map((navModelItem) => ({\n      ...navModelItem,\n      url: navModelItem.url?.replace('datasources/edit/', '/connections/datasources/edit/'),\n    })),\n  };\n\n  return {\n    navId: 'connections-datasources',\n    pageNav: connectionsPageNav,\n    dataSourceHeader: {\n      alertingSupported,\n    },\n  };\n}\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { DataSourceJsonData, DataSourceSettings, urlUtil, locationUtil } from '@grafana/data';\n\nexport const constructDataSourceExploreUrl = (dataSource: DataSourceSettings<DataSourceJsonData, {}>) => {\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl(locationUtil.assureBaseUrl('/explore'), { left: exploreState });\n\n  return exploreUrl;\n};\n","import { createSelector } from '@reduxjs/toolkit';\n\nimport { PluginError, PluginType, unEscapeStringFromRegex } from '@grafana/data';\nimport { reportInteraction } from '@grafana/runtime';\n\nimport { filterByKeyword, isPluginUpdateable } from '../helpers';\nimport { RequestStatus, PluginCatalogStoreState } from '../types';\n\nimport { pluginsAdapter } from './reducer';\n\nexport const selectRoot = (state: PluginCatalogStoreState) => state.plugins;\n\nexport const selectItems = createSelector(selectRoot, ({ items }) => items);\n\nexport const { selectAll, selectById } = pluginsAdapter.getSelectors(selectItems);\n\nexport type PluginFilters = {\n  // Searches for a string in certain fields (e.g. \"name\" or \"orgName\")\n  // (Note: this will be an escaped regex string as it comes from `FilterInput`)\n  keyword?: string;\n\n  // (Optional, only applied if set)\n  type?: PluginType;\n\n  // (Optional, only applied if set)\n  isInstalled?: boolean;\n\n  // (Optional, only applied if set)\n  isEnterprise?: boolean;\n\n  // (Optional, only applied if set)\n  hasUpdate?: boolean;\n};\n\nexport const selectPlugins = (filters: PluginFilters) =>\n  createSelector(selectAll, (plugins) => {\n    const keyword = filters.keyword ? unEscapeStringFromRegex(filters.keyword.toLowerCase()) : '';\n    const filteredPluginIds = keyword !== '' ? filterByKeyword(plugins, keyword) : null;\n\n    if (keyword) {\n      reportInteraction('plugins_search', { resultsCount: filteredPluginIds?.length });\n    }\n    return plugins.filter((plugin) => {\n      if (keyword && filteredPluginIds == null) {\n        return false;\n      }\n\n      if (keyword && !filteredPluginIds?.includes(plugin.id)) {\n        return false;\n      }\n\n      if (filters.type && plugin.type !== filters.type) {\n        return false;\n      }\n\n      if (filters.isInstalled !== undefined && plugin.isInstalled !== filters.isInstalled) {\n        return false;\n      }\n\n      if (filters.isEnterprise !== undefined && plugin.isEnterprise !== filters.isEnterprise) {\n        return false;\n      }\n\n      if (filters.hasUpdate !== undefined && (plugin.hasUpdate !== filters.hasUpdate || !isPluginUpdateable(plugin))) {\n        return false;\n      }\n\n      return true;\n    });\n  });\n\nexport const selectPluginErrors = (filterByPluginType?: PluginType) =>\n  createSelector(selectAll, (plugins) => {\n    const pluginErrors: PluginError[] = [];\n    for (const plugin of plugins) {\n      if (plugin.error && (!filterByPluginType || plugin.type === filterByPluginType)) {\n        pluginErrors.push({\n          pluginId: plugin.id,\n          errorCode: plugin.error,\n          pluginType: plugin.type,\n        });\n      }\n    }\n    return pluginErrors;\n  });\n\n// The following selectors are used to get information about the outstanding or completed plugins-related network requests.\nexport const selectRequest = (actionType: string) =>\n  createSelector(selectRoot, ({ requests = {} }) => requests[actionType]);\n\nexport const selectIsRequestPending = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request?.status === RequestStatus.Pending);\n\nexport const selectRequestError = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) =>\n    request?.status === RequestStatus.Rejected ? request?.error : null\n  );\n\nexport const selectIsRequestNotFetched = (actionType: string) =>\n  createSelector(selectRequest(actionType), (request) => request === undefined);\n","import { useEffect, useMemo } from 'react';\n\nimport { PluginError, PluginType } from '@grafana/data';\nimport { useDispatch, useSelector } from 'app/types';\n\nimport { sortPlugins, Sorters, isPluginUpdateable } from '../helpers';\nimport { CatalogPlugin } from '../types';\n\nimport { fetchAll, fetchDetails, fetchRemotePlugins, install, uninstall, fetchAllLocal, unsetInstall } from './actions';\nimport {\n  selectPlugins,\n  selectById,\n  selectIsRequestPending,\n  selectRequestError,\n  selectIsRequestNotFetched,\n  selectPluginErrors,\n  type PluginFilters,\n} from './selectors';\n\nexport const useGetAll = (filters: PluginFilters, sortBy: Sorters = Sorters.nameAsc) => {\n  useFetchAll();\n\n  const selector = useMemo(() => selectPlugins(filters), [filters]);\n  const plugins = useSelector(selector);\n  // As the locally installed plugins load quicker than the remote ones, we only show a loading state until these are being loaded\n  // (In case the remote ones are not loaded within a reasonable timeout, we will merge those with the locally installed plugins once they are loaded)\n  const { isLoading, error } = useLocalFetchStatus();\n  const sortedPlugins = sortPlugins(plugins, sortBy);\n\n  return {\n    isLoading,\n    error,\n    plugins: sortedPlugins,\n  };\n};\n\nexport const useGetUpdatable = () => {\n  const { isLoading } = useFetchStatus();\n  const { plugins: installed } = useGetAll({ isInstalled: true });\n  const updatablePlugins = installed.filter(isPluginUpdateable);\n  return {\n    isLoading,\n    updatablePlugins,\n  };\n};\n\nexport const useGetSingle = (id: string): CatalogPlugin | undefined => {\n  useFetchAll();\n  useFetchDetails(id);\n\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetSingleLocalWithoutDetails = (id: string): CatalogPlugin | undefined => {\n  useFetchAllLocal();\n  return useSelector((state) => selectById(state, id));\n};\n\nexport const useGetErrors = (filterByPluginType?: PluginType): PluginError[] => {\n  useFetchAll();\n\n  return useSelector(selectPluginErrors(filterByPluginType));\n};\n\nexport const useInstall = () => {\n  const dispatch = useDispatch();\n  return (id: string, version?: string, isUpdating?: boolean) => dispatch(install({ id, version, isUpdating }));\n};\n\nexport const useUnsetInstall = () => {\n  const dispatch = useDispatch();\n\n  return () => dispatch(unsetInstall());\n};\n\nexport const useUninstall = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(uninstall(id));\n};\n\nexport const useIsRemotePluginsAvailable = () => {\n  const error = useSelector(selectRequestError(fetchRemotePlugins.typePrefix));\n  return error === null;\n};\n\nexport const useLocalFetchStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const error = useSelector(selectRequestError('plugins/fetchLocal'));\n\n  return { isLoading, error };\n};\n\nexport const useFetchStatus = () => {\n  const isAllLoading = useSelector(selectIsRequestPending(fetchAll.typePrefix));\n  const isLocalLoading = useSelector(selectIsRequestPending('plugins/fetchLocal'));\n  const isRemoteLoading = useSelector(selectIsRequestPending('plugins/fetchRemote'));\n  const isLoading = isAllLoading || isLocalLoading || isRemoteLoading;\n  const error = useSelector(selectRequestError(fetchAll.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useFetchDetailsStatus = () => {\n  const isLoading = useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const error = useSelector(selectRequestError(fetchDetails.typePrefix));\n\n  return { isLoading, error };\n};\n\nexport const useInstallStatus = () => {\n  const isInstalling = useSelector(selectIsRequestPending(install.typePrefix));\n  const error = useSelector(selectRequestError(install.typePrefix));\n\n  return { isInstalling, error };\n};\n\nexport const useUninstallStatus = () => {\n  const isUninstalling = useSelector(selectIsRequestPending(uninstall.typePrefix));\n  const error = useSelector(selectRequestError(uninstall.typePrefix));\n\n  return { isUninstalling, error };\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAll = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAll.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAll());\n  }, []); // eslint-disable-line\n};\n\n// Only fetches in case they were not fetched yet\nexport const useFetchAllLocal = () => {\n  const dispatch = useDispatch();\n  const isNotFetched = useSelector(selectIsRequestNotFetched(fetchAllLocal.typePrefix));\n\n  useEffect(() => {\n    isNotFetched && dispatch(fetchAllLocal());\n  }, []); // eslint-disable-line\n};\n\nexport const useFetchDetails = (id: string) => {\n  const dispatch = useDispatch();\n  const plugin = useSelector((state) => selectById(state, id));\n  const isNotFetching = !useSelector(selectIsRequestPending(fetchDetails.typePrefix));\n  const shouldFetch = isNotFetching && plugin && !plugin.details;\n\n  useEffect(() => {\n    shouldFetch && dispatch(fetchDetails(id));\n  }, [plugin]); // eslint-disable-line\n};\n\nexport const useFetchDetailsLazy = () => {\n  const dispatch = useDispatch();\n\n  return (id: string) => dispatch(fetchDetails(id));\n};\n"],"names":["DataSourceInsightsPage","uid","navId","pageNav","mapStateToProps","state","props","mapDispatchToProps","connector","DataSourceInsights","dataSourceUid","loadDataSource","loadDataSourceMeta","from","to","dailySummaries","timeRangeFrom","timeRangeTo","data","valueField","valueFieldType","time","values","dailySummary","value","config","styles","color","fieldType","showBars","timeRange","title","width","panelData","panelOptions","fieldConfig","innerWidth","innerHeight","theme","charts","chart","useDataSourceSettingsNav","pageIdParam","location","datasource","dataSourceMeta","datasourcePlugin","params","pageId","plugin","loadError","loading","dsi","hasAlertingEnabled","isAlertManagerDatasource","alertingSupported","navIndex","navIndexId","node","navModelItem","DataSourcesRoutesContext","useInitDataSourceSettings","dispatch","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","useUpdateDatasource","dataSource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","constructDataSourceExploreUrl","exploreState","selectRoot","selectItems","items","selectAll","selectPlugins","filters","plugins","keyword","filteredPluginIds","selectPluginErrors","filterByPluginType","pluginErrors","selectRequest","actionType","requests","selectIsRequestPending","request","selectRequestError","useGetAll","sortBy","useFetchAll","selector","error","useLocalFetchStatus","sortedPlugins","useGetUpdatable","useFetchStatus","installed","updatablePlugins","useGetSingle","id","useFetchDetails","useGetSingleLocalWithoutDetails","useFetchAllLocal","useGetErrors","useInstall","version","isUpdating","useUnsetInstall","useUninstall","useIsRemotePluginsAvailable","isAllLoading","isLocalLoading","isRemoteLoading","useFetchDetailsStatus","useInstallStatus","isInstalling","useUninstallStatus","isUninstalling","isNotFetched","shouldFetch","useFetchDetailsLazy"],"sourceRoot":""}