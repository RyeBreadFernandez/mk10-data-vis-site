{"version":3,"file":"DataSourceInsightsUpgradePage.6a971ac66547d0bbaec9.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsightsUpgrade.tsx","webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsightsUpgradePage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/datasources/utils.ts"],"sourcesContent":["import { useTheme2 } from '@grafana/ui';\nimport { UpgradeBox, UpgradeContent } from 'app/core/components/Upgrade/UpgradeBox';\nimport { useInitDataSourceSettings } from 'app/features/datasources/state';\n\nexport type Props = {\n  uid: string;\n};\n\nexport const DataSourceInsightsUpgrade = ({ uid }: Props) => {\n  useInitDataSourceSettings(uid);\n\n  const theme = useTheme2();\n\n  return (\n    <>\n      <UpgradeBox featureName={'data source usage insights'} featureId={'data-source-insights'} />\n      <UpgradeContent\n        listItems={[\n          'Demonstrate and improve the value of your observability service by keeping track of user engagement',\n          'Keep Grafana performant by identifying and fixing slow, error-prone data sources',\n          'Clean up your instance by finding and removing unused data sources',\n          'Review individual data source usage insights at a glance in the UI, sort search results by usage and errors, or dig into detailed usage logs',\n        ]}\n        image={`datasource-insights-${theme.isLight ? 'light' : 'dark'}.png`}\n        featureName={'data source usage insights'}\n        description={\n          'Usage Insights provide detailed information about data source usage, like the number of views, queries, and errors users have experienced. You can use this to improve usersâ€™ experience and troubleshoot issues'\n        }\n        featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/usage-insights/dashboard-datasource-insights'}\n      />\n    </>\n  );\n};\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getDataSourceLoadingNav } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { DataSourceInsightsUpgrade } from './DataSourceInsightsUpgrade';\n\nexport const DataSourceInsightsUpgradePage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const dataSourceLoadingNav = getDataSourceLoadingNav('insights');\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, `datasource-insights-${uid}`, dataSourceLoadingNav);\n\n  return (\n    <Page navId=\"datasources\" pageNav={navModel.main}>\n      <Page.Contents>\n        <DataSourceInsightsUpgrade uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourceInsightsUpgradePage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { DataSourceJsonData, DataSourceSettings, urlUtil, locationUtil } from '@grafana/data';\n\nexport const constructDataSourceExploreUrl = (dataSource: DataSourceSettings<DataSourceJsonData, {}>) => {\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl(locationUtil.assureBaseUrl('/explore'), { left: exploreState });\n\n  return exploreUrl;\n};\n"],"names":["DataSourceInsightsUpgrade","uid","theme","DataSourceInsightsUpgradePage","dataSourceLoadingNav","navIndex","state","navModel","DataSourcesRoutesContext","useInitDataSourceSettings","dispatch","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","plugin","useUpdateDatasource","dataSource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","constructDataSourceExploreUrl","exploreState"],"sourceRoot":""}