{"version":3,"file":"DashboardReportPage.6b9d5a2101f83139a7e1.js","mappings":"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","sources":["webpack://grafana/./node_modules/@react-aria/utils/dist/useResizeObserver.mjs","webpack://grafana/./public/app/extensions/reports/dashboard/ReportFooter.tsx","webpack://grafana/./public/app/extensions/reports/dashboard/ReportHeader.tsx","webpack://grafana/./public/app/extensions/reports/dashboard/utils.tsx","webpack://grafana/./public/app/extensions/reports/dashboard/ReportGridRenderer.tsx","webpack://grafana/./public/app/extensions/reports/dashboard/DashboardReportPage.tsx","webpack://grafana/./public/app/extensions/shared/utils/content.ts","webpack://grafana/./public/app/extensions/shared/utils/data.ts"],"sourcesContent":["import {useEffect as $Vsl8o$useEffect} from \"react\";\n\n\nfunction $9daab02d461809db$var$hasResizeObserver() {\n    return typeof window.ResizeObserver !== 'undefined';\n}\nfunction $9daab02d461809db$export$683480f191c0e3ea(options) {\n    const { ref: ref, box: box, onResize: onResize } = options;\n    (0, $Vsl8o$useEffect)(()=>{\n        let element = ref === null || ref === void 0 ? void 0 : ref.current;\n        if (!element) return;\n        if (!$9daab02d461809db$var$hasResizeObserver()) {\n            window.addEventListener('resize', onResize, false);\n            return ()=>{\n                window.removeEventListener('resize', onResize, false);\n            };\n        } else {\n            const resizeObserverInstance = new window.ResizeObserver((entries)=>{\n                if (!entries.length) return;\n                onResize();\n            });\n            resizeObserverInstance.observe(element, {\n                box: box\n            });\n            return ()=>{\n                if (element) resizeObserverInstance.unobserve(element);\n            };\n        }\n    }, [\n        onResize,\n        ref,\n        box\n    ]);\n}\n\n\nexport {$9daab02d461809db$export$683480f191c0e3ea as useResizeObserver};\n//# sourceMappingURL=useResizeObserver.module.js.map\n","import { css } from '@emotion/css';\nimport { useLocation } from 'react-router';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useTheme2 } from '@grafana/ui';\n\nimport { defaultReportLogo } from '.././constants';\nimport { getResourceUrl } from '../../shared/utils/data';\n\ninterface FooterProps {\n  scaleFactor: number;\n  currentPage: number;\n  totalPageCount: number;\n}\n\nfunction ReportFooter({ scaleFactor, currentPage, totalPageCount }: FooterProps) {\n  const theme = useTheme2();\n  const styles = getStyles(theme, scaleFactor);\n\n  return (\n    <div className={styles.footer}>\n      <div className={styles.pageCount}>\n        Page {currentPage}/{totalPageCount}\n      </div>\n      <div className={styles.logo}>\n        <img className={styles.logoImg} src={useReportLogoUrl()} alt=\"Report logo\" />\n      </div>\n    </div>\n  );\n}\n\nfunction useReportLogoUrl() {\n  const location = useLocation();\n  const urlParams = new URLSearchParams(location.search);\n  const reportLogo = urlParams.get('reportLogo');\n\n  return reportLogo ? getResourceUrl(reportLogo ) : defaultReportLogo;\n}\n\nfunction getStyles(theme: GrafanaTheme2, scaleFactor: number) {\n  return {\n    footer: css({\n      bottom: 0,\n      height: theme.spacing(4 * scaleFactor),\n      width: '100%',\n      display: 'flex',\n      alignItems: 'center',\n      marginBottom: theme.spacing(1),\n    }),\n    pageCount: css({\n      flex: 1,\n      textAlign: 'center',\n      fontWeight: theme.typography.fontWeightMedium,\n      fontSize: `${0.85 * scaleFactor}rem`,\n    }),\n    logo: css({\n      top: theme.spacing(0.5 * scaleFactor),\n      right: theme.spacing(2 + 0.5 * scaleFactor),\n    }),\n    logoImg: css({\n      maxWidth: theme.spacing(3 * scaleFactor),\n      maxHeight: theme.spacing(3 * scaleFactor),\n    }),\n  };\n}\n\nexport default ReportFooter;\n","import { css } from '@emotion/css';\nimport { forwardRef } from 'react';\n\nimport { dateMath, dateTime, dateTimeForTimeZone, GrafanaTheme2 } from '@grafana/data';\nimport { SceneObject, SceneTimeRangeState } from '@grafana/scenes';\nimport { Stack, useTheme2 } from '@grafana/ui';\n\ninterface HeaderProps {\n  reportTitle: string;\n  dashboardTitle: string;\n  timeRange: SceneTimeRangeState;\n  scaleFactor: number;\n  showTemplateVariables: boolean;\n  variableControls?: SceneObject[];\n}\n\nfunction getReadableDateTimes(timeRange: SceneTimeRangeState) {\n  const dateDisplayFormat = 'YYYY-MM-DD HH:mm:ss Z';\n\n  // converting time range to date time (the timezone value is deprecated)\n  const dateTimeFrom = dateMath.parse(timeRange.from, false, undefined, timeRange.fiscalYearStartMonth);\n  const dateTimeTo = dateMath.parse(timeRange.to, true, undefined, timeRange.fiscalYearStartMonth);\n\n  // formatting date time using the time zone\n  const displayFrom = dateTimeForTimeZone(timeRange.timeZone, dateTimeFrom).format(dateDisplayFormat);\n  const displayTo = dateTimeForTimeZone(timeRange.timeZone, dateTimeTo).format(dateDisplayFormat);\n\n  return { displayFrom, displayTo };\n}\n\nconst ReportHeader = forwardRef<HTMLDivElement, HeaderProps>(\n  ({ reportTitle, dashboardTitle, timeRange, scaleFactor, showTemplateVariables, variableControls }, ref) => {\n    const theme = useTheme2();\n    const styles = getStyles(theme, scaleFactor);\n    const { displayFrom, displayTo } = getReadableDateTimes(timeRange);\n\n    return (\n      <div ref={ref} className={styles.header}>\n        <div className={styles.subHeader}>\n          <div>\n            {reportTitle} - Generated on {dateMath.parse(dateTime(Date.now()))?.format('dddd, MMM DD YYYY')}\n          </div>\n          <div className={styles.timeRangeBlock}>\n            <div>\n              Data time range: {displayFrom}\n              <br />\n              {displayTo}\n            </div>\n          </div>\n        </div>\n        <div className={styles.dashboardTitle}>{dashboardTitle}</div>\n        <hr className={styles.divider} />\n        {showTemplateVariables && (\n          <div className={styles.subHeader}>\n            <Stack grow={1} wrap={'wrap'}>\n              {variableControls?.map((c) => <c.Component model={c} key={c.state.key} />)}\n            </Stack>\n          </div>\n        )}\n      </div>\n    );\n  }\n);\n\nfunction getStyles(theme: GrafanaTheme2, scaleFactor: number) {\n  return {\n    subHeader: css({\n      label: 'subheader',\n      display: 'flex',\n      fontWeight: theme.typography.fontWeightMedium,\n      // TODO: We should use value from theme\n      fontSize: `${0.85 * scaleFactor}rem`,\n      paddingTop: theme.spacing(2),\n    }),\n    timeRangeBlock: css({\n      label: 'time-range-block',\n      display: 'flex',\n      justifyContent: 'flex-end',\n      textAlign: 'right',\n      flexGrow: 1,\n    }),\n    dashboardTitle: css({\n      label: 'dashboard-title',\n      // TODO: We should use value from theme\n      fontSize: `${1.7 * scaleFactor}rem`,\n      fontWeight: theme.typography.fontWeightMedium,\n    }),\n    divider: css({\n      marginTop: 0,\n      marginBottom: 0,\n    }),\n    header: css({\n      marginBottom: theme.spacing(2 * scaleFactor),\n    }),\n  };\n}\n\nReportHeader.displayName = 'ReportHeader';\n\nexport default ReportHeader;\n","import * as React from 'react';\n\nimport { SceneGridItemLike, SceneGridRow } from '@grafana/scenes';\nimport { GRID_CELL_HEIGHT, GRID_CELL_VMARGIN, GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { DashboardGridItem } from 'app/features/dashboard-scene/scene/DashboardGridItem';\n\nexport interface ReportPage {\n  items: ReportGridItem[];\n  h: number;\n  pageBreakAfter?: boolean;\n}\n\nexport interface ReportGridItem {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n  render: () => React.ReactNode;\n  isRow?: boolean;\n}\n\nexport function buildSimpleLayout(\n  gridChildren: SceneGridItemLike[],\n  scaleFactor: number,\n  screenHeight: number,\n  isLandscape: boolean\n): ReportPage[] {\n  const children = gridChildren.slice();\n  const pages: ReportPage[] = [];\n  const maxRowCount = Math.floor(screenHeight / (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN));\n  let panelHeight = maxRowCount;\n  if (!isLandscape) {\n    panelHeight = maxRowCount / 3;\n  }\n  let yPos = 0;\n\n  let currentPage: ReportPage = {\n    items: [],\n    h: 0,\n  };\n  pages.push(currentPage);\n\n  let rowCount = 0;\n  let isAfterRow = false;\n\n  for (let i = 0; i < children.length; i++) {\n    const gridChild = children[i];\n    const isRow = gridChild instanceof SceneGridRow;\n    const blockItem: ReportGridItem = {\n      x: 0,\n      y: yPos,\n      w: GRID_COLUMN_COUNT,\n      h: isRow ? scaleFactor : isAfterRow ? panelHeight - scaleFactor : panelHeight,\n      render: () => <gridChild.Component model={gridChild} key={gridChild.state.key} />,\n    };\n\n    if (isRow) {\n      // Get row children\n      children.splice(i + 1, 0, ...gridChild.state.children);\n      rowCount++;\n    }\n\n    if (\n      gridChild instanceof DashboardGridItem &&\n      gridChild.state.repeatedPanels &&\n      gridChild.state.repeatedPanels.length > 0\n    ) {\n      children.splice(i + 1, 0, ...gridChild.state.repeatedPanels);\n      continue;\n    }\n\n    if (yPos >= maxRowCount) {\n      currentPage.pageBreakAfter = true;\n      yPos = 0;\n      blockItem.y = 0;\n\n      currentPage = {\n        items: [],\n        h: 0,\n      };\n\n      pages.push(currentPage);\n    }\n\n    yPos += blockItem.h;\n\n    currentPage.items.push(blockItem);\n    currentPage.h = blockItem.y + blockItem.h;\n\n    isAfterRow = isRow;\n  }\n\n  return pages;\n}\n\nexport function buildGridLayout(\n  gridChildren: SceneGridItemLike[],\n  scaleFactor: number,\n  screenHeight: number\n): ReportPage[] {\n  const children = gridChildren.slice();\n  const pages: ReportPage[] = [];\n  const maxRowCount = Math.floor(screenHeight / (GRID_CELL_HEIGHT + GRID_CELL_VMARGIN));\n  let yShift = 0;\n  let isAfterRow = false;\n\n  let currentPage: ReportPage = {\n    items: [],\n    h: 0,\n  };\n  pages.push(currentPage);\n\n  const reportItems: ReportGridItem[] = convertToReportGridItems(children);\n  for (let i = 0; i < reportItems.length; i++) {\n    const item = reportItems[i];\n    const isRow = item.isRow || false;\n    const blockItem = getUpdatedReportItem(item, yShift, maxRowCount, scaleFactor, isAfterRow);\n    const nextBlockItem =\n      i < reportItems.length - 1\n        ? getUpdatedReportItem(reportItems[i + 1], yShift, maxRowCount, scaleFactor, isRow)\n        : null;\n\n    // Handle panel overflow (or next panel overflow if current panel is a row)\n    let newH = Math.max(currentPage.h, blockItem.y + blockItem.h);\n    let nextPanelH = 0;\n\n    if (isRow && nextBlockItem != null) {\n      nextPanelH = Math.max(currentPage.h, nextBlockItem.y - scaleFactor + 1 + nextBlockItem.h);\n    }\n\n    if (newH > maxRowCount || (isRow && nextPanelH > maxRowCount)) {\n      currentPage.pageBreakAfter = true;\n      yShift = item.y! * scaleFactor;\n      blockItem.y = 0;\n\n      currentPage = {\n        items: [],\n        h: 0,\n      };\n\n      pages.push(currentPage);\n    }\n\n    currentPage.items.push(blockItem);\n    currentPage.h = Math.max(currentPage.h, blockItem.y + blockItem.h);\n\n    if (isRow) {\n      isAfterRow = true;\n      yShift += scaleFactor - 1;\n    } else if (nextBlockItem != null && nextBlockItem.y !== blockItem.y) {\n      isAfterRow = false;\n    }\n  }\n\n  return pages;\n}\n\n// convertToReportGridItems converts an array of SceneGridItemLike to an array of ReportGridItem with the same grid pos info\n// This flattens out the grid structure by putting the row children and the repeated panels at the same level as their parent\nfunction convertToReportGridItems(gridChildren: SceneGridItemLike[]): ReportGridItem[] {\n  const children = gridChildren.slice();\n  const reportItems: ReportGridItem[] = [];\n  for (let i = 0; i < children.length; i++) {\n    const gridChild = children[i];\n\n    // Get repeated panels with their original size and position\n    if (\n      gridChild instanceof DashboardGridItem &&\n      gridChild.state.repeatedPanels &&\n      gridChild.state.repeatedPanels.length > 0\n    ) {\n      const { repeatedPanels, x, y, height, width } = gridChild.state;\n      let childX, childY: number;\n      let childH = height! / repeatedPanels.length;\n      let childW = width!;\n      if (gridChild.getRepeatDirection() === 'h') {\n        const rowCount = Math.ceil(repeatedPanels.length / gridChild.getMaxPerRow());\n        childH = height! / rowCount;\n        childW = width! / gridChild.getMaxPerRow();\n      }\n\n      for (let j = 0; j < repeatedPanels.length; j++) {\n        const panel = repeatedPanels[j];\n\n        if (gridChild.getRepeatDirection() === 'h') {\n          childX = (j % gridChild.getMaxPerRow()) * childW;\n          childY = y! + Math.floor(j / gridChild.getMaxPerRow()) * childH;\n        } else {\n          childX = x!;\n          childY = y! + j * childH;\n        }\n\n        reportItems.push({\n          x: childX,\n          y: childY,\n          w: childW,\n          h: childH,\n          render: () => <panel.Component model={panel} key={panel.state.key} />,\n        });\n      }\n    } else {\n      let isRow = false;\n\n      // Get row's children\n      if (gridChild instanceof SceneGridRow) {\n        isRow = true;\n        children.splice(i + 1, 0, ...gridChild.state.children);\n      }\n\n      reportItems.push({\n        x: gridChild.state.x!,\n        y: gridChild.state.y!,\n        w: gridChild.state.width!,\n        h: gridChild.state.height!,\n        render: () => <gridChild.Component model={gridChild} key={gridChild.state.key} />,\n        isRow: isRow,\n      });\n    }\n  }\n\n  // Sort array by y position in ascending order - fixes issue with vertical repeated panels\n  return reportItems.sort((a, b) => a.y - b.y);\n}\n\n// getUpdatedReportItem returns a new ReportGridItem with proper grid pos information, it:\n// - applies the scale factor\n// - calculates the y position as it's reset every page break\n// - resizes the panel if it is bigger than the maximum number of rows in a page\nfunction getUpdatedReportItem(\n  item: ReportGridItem,\n  yShift: number,\n  maxRowCount: number,\n  scaleFactor: number,\n  isAfterRow: boolean\n): ReportGridItem {\n  const updatedItem: ReportGridItem = {\n    x: item.x,\n    y: item.y * scaleFactor - yShift,\n    w: item.w,\n    h: item.h * scaleFactor,\n    render: item.render,\n  };\n\n  // If the panel is a row, its height should be 1, no matter the scale factor\n  if (item.isRow) {\n    updatedItem.h = 1;\n  }\n\n  // If the panel is bigger than the maximum number of rows we can display in a page\n  if (isAfterRow && updatedItem.h + 1 > maxRowCount) {\n    updatedItem.h = maxRowCount - 1;\n  } else if (updatedItem.h > maxRowCount) {\n    updatedItem.h = maxRowCount;\n  }\n\n  return updatedItem;\n}\n\nexport type Position = {\n  left: number;\n  top: number;\n  width: number;\n  height: number;\n};\n\nexport type PositionParams = {\n  margin: [number, number];\n  containerPadding: [number, number];\n  containerWidth: number;\n  cols: number;\n  rowHeight: number;\n  maxRows: number;\n};\n\nexport function getGridParams(screenWidth: number): PositionParams {\n  return {\n    margin: [GRID_CELL_VMARGIN, GRID_CELL_VMARGIN],\n    containerWidth: screenWidth,\n    containerPadding: [0, 0],\n    cols: GRID_COLUMN_COUNT,\n    rowHeight: GRID_CELL_HEIGHT,\n    maxRows: 10000,\n  };\n}\n\n// Helper for generating column width\nexport function calcGridColWidth(positionParams: PositionParams): number {\n  const { margin, containerPadding, containerWidth, cols } = positionParams;\n  return (containerWidth - margin[0] * (cols - 1) - containerPadding[0] * 2) / cols;\n}\n\n// This can either be called:\n// calcGridItemWHPx(w, colWidth, margin[0])\n// or\n// calcGridItemWHPx(h, rowHeight, margin[1])\nexport function calcGridItemWHPx(gridUnits: number, colOrRowSize: number, marginPx: number): number {\n  // 0 * Infinity === NaN, which causes problems with resize contraints\n  if (!Number.isFinite(gridUnits)) {\n    return gridUnits;\n  }\n  return Math.round(colOrRowSize * gridUnits + Math.max(0, gridUnits - 1) * marginPx);\n}\n\n/**\n * Return position on the page given an x, y, w, h.\n * left, top, width, height are all in pixels.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number}  x                      X coordinate in grid units.\n * @param  {Number}  y                      Y coordinate in grid units.\n * @param  {Number}  w                      W coordinate in grid units.\n * @param  {Number}  h                      H coordinate in grid units.\n * @return {Position}                       Object containing coords.\n */\nexport function calcGridItemPosition(\n  positionParams: PositionParams,\n  x: number,\n  y: number,\n  w: number,\n  h: number\n): Position {\n  const { margin, containerPadding, rowHeight } = positionParams;\n  const colWidth = calcGridColWidth(positionParams);\n  const out: Position = {\n    width: calcGridItemWHPx(w, colWidth, margin[0]),\n    height: calcGridItemWHPx(h, rowHeight, margin[1]),\n    top: Math.round((rowHeight + margin[1]) * y + containerPadding[1]),\n    left: Math.round((colWidth + margin[0]) * x + containerPadding[0]),\n  };\n\n  return out;\n}\n\n/**\n * Translate x and y coordinates from pixels to grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calculations.\n * @param  {Number} top                     Top position (relative to parent) in pixels.\n * @param  {Number} left                    Left position (relative to parent) in pixels.\n * @param  {Number} w                       W coordinate in grid units.\n * @param  {Number} h                       H coordinate in grid units.\n * @return {Object}                         x and y in grid units.\n */\nexport function calcXY(\n  positionParams: PositionParams,\n  top: number,\n  left: number,\n  w: number,\n  h: number\n): { x: number; y: number } {\n  const { margin, cols, rowHeight, maxRows } = positionParams;\n  const colWidth = calcGridColWidth(positionParams);\n\n  // left = colWidth * x + margin * (x + 1)\n  // l = cx + m(x+1)\n  // l = cx + mx + m\n  // l - m = cx + mx\n  // l - m = x(c + m)\n  // (l - m) / (c + m) = x\n  // x = (left - margin) / (coldWidth + margin)\n  let x = Math.round((left - margin[0]) / (colWidth + margin[0]));\n  let y = Math.round((top - margin[1]) / (rowHeight + margin[1]));\n\n  // Capping\n  x = clamp(x, 0, cols - w);\n  y = clamp(y, 0, maxRows - h);\n  return { x, y };\n}\n\n/**\n * Given a height and width in pixel values, calculate grid units.\n * @param  {PositionParams} positionParams  Parameters of grid needed for coordinates calcluations.\n * @param  {Number} height                  Height in pixels.\n * @param  {Number} width                   Width in pixels.\n * @param  {Number} x                       X coordinate in grid units.\n * @param  {Number} y                       Y coordinate in grid units.\n * @param {String} handle Resize Handle.\n * @return {Object}                         w, h as grid units.\n */\nexport function calcWH(\n  positionParams: PositionParams,\n  width: number,\n  height: number,\n  x: number,\n  y: number,\n  handle: string\n): { w: number; h: number } {\n  const { margin, maxRows, cols, rowHeight } = positionParams;\n  const colWidth = calcGridColWidth(positionParams);\n\n  // width = colWidth * w - (margin * (w - 1))\n  // ...\n  // w = (width + margin) / (colWidth + margin)\n  let w = Math.round((width + margin[0]) / (colWidth + margin[0]));\n  let h = Math.round((height + margin[1]) / (rowHeight + margin[1]));\n\n  // Capping\n  let _w = clamp(w, 0, cols - x);\n  let _h = clamp(h, 0, maxRows - y);\n  if (['sw', 'w', 'nw'].indexOf(handle) !== -1) {\n    _w = clamp(w, 0, cols);\n  }\n  if (['nw', 'n', 'ne'].indexOf(handle) !== -1) {\n    _h = clamp(h, 0, maxRows);\n  }\n  return { w: _w, h: _h };\n}\n\n// Similar to _.clamp\nexport function clamp(num: number, lowerBound: number, upperBound: number): number {\n  return Math.max(Math.min(num, upperBound), lowerBound);\n}\n","import { css } from '@emotion/css';\nimport { useResizeObserver } from '@react-aria/utils';\nimport { useEffect, useRef, useState } from 'react';\nimport { useLocation } from 'react-router';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { SceneGridItemLike, SceneGridLayout, SceneGridRow, SceneObject, SceneTimeRangeState } from '@grafana/scenes';\nimport { useTheme2 } from '@grafana/ui';\nimport { GRID_COLUMN_COUNT } from 'app/core/constants';\nimport { activateInActiveParents } from 'app/features/dashboard-scene/utils/utils';\n\nimport ReportFooter from './ReportFooter';\nimport ReportHeader from './ReportHeader';\nimport {\n  buildGridLayout,\n  buildSimpleLayout,\n  calcGridItemPosition,\n  getGridParams,\n  PositionParams,\n  ReportGridItem,\n  ReportPage,\n} from './utils';\n\nexport const A4_WIDTH = 794;\nexport const A4_HEIGHT = 1122;\nexport const FOOTER = 10;\nconst SIDE_MARGIN = 16;\n\ninterface Props {\n  grid: SceneGridLayout;\n  dashboardTitle: string;\n  timeRange: SceneTimeRangeState;\n  variableControls?: SceneObject[];\n}\n\nexport function ReportGridRenderer({ grid, dashboardTitle, timeRange, variableControls }: Props) {\n  const [isActive, setIsActive] = useState(false);\n  const { scaleFactor, isLandscape, isSimpleLayout, reportTitle, showTemplateVariables } = useUrlValues();\n  const theme = useTheme2();\n  const styles = getStyles(theme, scaleFactor);\n\n  uncollapseRows(grid.state.children);\n  const { children } = grid.useState();\n\n  const [headerHeight, setHeaderHeight] = useState<number>(0);\n  const observedDiv = useRef<HTMLDivElement | null>(null);\n  useResizeObserver({\n    ref: observedDiv,\n    onResize: () => {\n      const element = observedDiv.current;\n      if (element && element.offsetHeight !== 0) {\n        setHeaderHeight(element.offsetHeight);\n      }\n    },\n  });\n\n  useEffect(() => {\n    setIsActive(true);\n    return activateInActiveParents(grid);\n  }, [grid]);\n\n  if (!isActive) {\n    return null;\n  }\n\n  let pageWidth = isLandscape ? A4_HEIGHT : A4_WIDTH;\n  let pageHeight = isLandscape ? A4_WIDTH : A4_HEIGHT;\n\n  const screenWidth = pageWidth * scaleFactor - 2 * SIDE_MARGIN;\n  const screenHeight = (pageHeight - headerHeight - FOOTER) * scaleFactor;\n\n  // this object can't be memoized because there are some references inside children that are being updated\n  // when using repeating panels\n  let blocks: ReportPage[] = [];\n  if (isSimpleLayout) {\n    blocks = buildSimpleLayout(children, scaleFactor, screenHeight, isLandscape);\n  } else {\n    blocks = buildGridLayout(children, scaleFactor, screenHeight);\n  }\n\n  return (\n    <div>\n      {/*This hidden ReportHeader is used to dynamically measure the height and then build the grid using that value*/}\n      <div style={{ width: screenWidth, visibility: 'hidden', position: 'absolute', top: 0, left: 0 }}>\n        <ReportHeader\n          reportTitle={reportTitle || dashboardTitle}\n          dashboardTitle={dashboardTitle}\n          timeRange={timeRange}\n          scaleFactor={scaleFactor}\n          variableControls={variableControls}\n          showTemplateVariables={showTemplateVariables}\n          ref={observedDiv}\n        />\n      </div>\n      <>\n        {blocks.map((page, index) => (\n          <div key={index} className={styles.page}>\n            <div key={index} className={styles.content}>\n              <ReportHeader\n                reportTitle={reportTitle || dashboardTitle}\n                dashboardTitle={dashboardTitle}\n                timeRange={timeRange}\n                scaleFactor={scaleFactor}\n                variableControls={variableControls}\n                showTemplateVariables={showTemplateVariables}\n              />\n              <div style={getPageStyle(page, screenWidth)}>\n                {page.items.map((item, index) => (\n                  <div key={index} style={getItemStyle(item, screenWidth)}>\n                    {item.render()}\n                  </div>\n                ))}\n              </div>\n            </div>\n            <ReportFooter scaleFactor={scaleFactor} currentPage={index + 1} totalPageCount={blocks.length} />\n            {page.pageBreakAfter && <div style={{ pageBreakAfter: 'always' }} />}\n          </div>\n        ))}\n      </>\n    </div>\n  );\n}\n\nexport function useUrlValues() {\n  const location = useLocation();\n  const urlParams = new URLSearchParams(location.search);\n  const scaleFactor = parseFloat(urlParams.get('scale') ?? '');\n\n  return {\n    scaleFactor: isNaN(scaleFactor) ? 1 : scaleFactor,\n    isLandscape: urlParams.get('pdf.landscape') !== 'false',\n    isSimpleLayout: urlParams.get('pdf.layout') === 'simple',\n    reportTitle: urlParams.get('title'),\n    showTemplateVariables:\n      urlParams.get('pdf.showTemplateVariables') !== null && urlParams.get('pdf.showTemplateVariables') !== 'false',\n  };\n}\n\nfunction uncollapseRows(children: SceneGridItemLike[]) {\n  for (const gridChild of children) {\n    if (gridChild instanceof SceneGridRow && gridChild.state.isCollapsed) {\n      gridChild.onCollapseToggle();\n    }\n  }\n}\n\nfunction getItemStyle(item: ReportGridItem, screenWidth: number): React.CSSProperties {\n  const params: PositionParams = getGridParams(screenWidth);\n  const position = calcGridItemPosition(params, item.x, item.y, item.w, item.h);\n\n  return {\n    top: position.top,\n    left: position.left,\n    width: position.width,\n    height: position.height,\n    position: 'absolute',\n  };\n}\n\nfunction getPageStyle(block: ReportPage, screenWidth: number): React.CSSProperties {\n  const params: PositionParams = getGridParams(screenWidth);\n  const position = calcGridItemPosition(params, 0, 0, GRID_COLUMN_COUNT, block.h);\n\n  return {\n    width: position.width,\n    height: position.height,\n    position: 'relative',\n  };\n}\n\nfunction getStyles(theme: GrafanaTheme2, scaleFactor: number) {\n  return {\n    page: css({\n      display: 'flex',\n      flexDirection: 'column',\n      justifyContent: 'space-between',\n      alignItems: 'center',\n      width: '100%',\n      minHeight: '100vh',\n      // this is needed to avoid printing an extra empty page in the end\n      '&:last-of-type': {\n        marginBottom: theme.spacing(2 * -1),\n      },\n    }),\n    content: css({\n      flex: 1,\n    }),\n  };\n}\n","// Libraries\nimport { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { UrlSyncContextProvider } from '@grafana/scenes';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardPageRouteParams } from 'app/features/dashboard/containers/types';\nimport { getDashboardScenePageStateManager } from 'app/features/dashboard-scene/pages/DashboardScenePageStateManager';\nimport { DashboardScene } from 'app/features/dashboard-scene/scene/DashboardScene';\nimport { DefaultGridLayoutManager } from 'app/features/dashboard-scene/scene/layout-default/DefaultGridLayoutManager';\nimport { DashboardRoutes } from 'app/types';\n\nimport { ReportGridRenderer } from './ReportGridRenderer';\n\nexport interface Props extends GrafanaRouteComponentProps<DashboardPageRouteParams> {}\n\nexport function DashboardReportPage({ route }: Props) {\n  const stateManager = getDashboardScenePageStateManager();\n  const { dashboard, isLoading, loadError } = stateManager.useState();\n  const { uid = '' } = useParams();\n\n  useEffect(() => {\n    stateManager.loadDashboard({ uid, route: DashboardRoutes.Report });\n\n    return () => {\n      stateManager.clearState();\n    };\n  }, [stateManager, uid, route.routeName]);\n\n  if (!dashboard) {\n    return (\n      <div>\n        {isLoading && <PageLoader />}\n        {loadError && <h2>{loadError}</h2>}\n      </div>\n    );\n  }\n\n  return <DashbordReportRenderer model={dashboard} />;\n}\n\ninterface RendererProps {\n  model: DashboardScene;\n}\n\nfunction DashbordReportRenderer({ model }: RendererProps) {\n  const [isActive, setIsActive] = useState(false);\n  const dashboard = model.useState();\n  const timeRange = dashboard.$timeRange!.useState();\n  const variableControls = dashboard.controls?.useState().variableControls;\n\n  const styles = useStyles2(getStyles);\n  useEffect(() => {\n    setIsActive(true);\n    return model.activate();\n  }, [model]);\n\n  if (!isActive) {\n    return null;\n  }\n\n  const layout = dashboard.body;\n  if (!(layout instanceof DefaultGridLayoutManager)) {\n    return <Alert title=\"Unsupported dashboard layout\" severity=\"error\" />;\n  }\n\n  return (\n    <UrlSyncContextProvider scene={model}>\n      <div className={styles.canvas}>\n        <div className={styles.body}>\n          <ReportGridRenderer grid={layout.state.grid} dashboardTitle={dashboard.title} timeRange={timeRange} variableControls={variableControls}/>\n        </div>\n      </div>\n    </UrlSyncContextProvider>\n  );\n}\n\nfunction getStyles(theme: GrafanaTheme2) {\n  return {\n    canvas: css({\n      label: 'canvas',\n      display: 'flex',\n      flexDirection: 'column',\n      flexBasis: '100%',\n      flexGrow: 1,\n      padding: '0 ' + theme.spacing(2),\n    }),\n    body: css({\n      label: 'body',\n      flexGrow: 1,\n      display: 'flex',\n      gap: '8px',\n      marginBottom: theme.spacing(2),\n    }),\n  };\n}\n\nexport default DashboardReportPage;\n","export const getContentType = (value: string | File) => {\n  if (!value) {\n    return 'url';\n  }\n\n  if (isFile(value)) {\n    return 'file';\n  }\n  if (value.startsWith('http') || value.startsWith('data:')) {\n    return 'url';\n  }\n  if (value.startsWith('#') || value.startsWith('rgb(') || value.startsWith('rgba(')) {\n    return 'color';\n  }\n\n  return 'file';\n};\n\nexport const isFile = (value: string | File): value is File => value instanceof File;\n","import { API_ROOT } from '../../reports/constants';\n\nimport { getContentType, isFile } from './content';\n\nexport const getResourceUrl = (resource: File | string) => {\n  if (isFile(resource)) {\n    return URL.createObjectURL(resource);\n  }\n\n  // Separate handling for the file names\n  if (getContentType(resource) === 'file') {\n    return `${API_ROOT}${resource}`;\n  }\n\n  return resource;\n};\n\nexport const isValidUrl = (value: unknown) => {\n  if (!value || value instanceof File) {\n    return true;\n  }\n  return typeof value === 'string' && value.startsWith('http');\n};\n"],"names":["$9daab02d461809db$var$hasResizeObserver","$9daab02d461809db$export$683480f191c0e3ea","options","ref","box","onResize","element","resizeObserverInstance","entries","ReportFooter","scaleFactor","currentPage","totalPageCount","theme","styles","getStyles","useReportLogoUrl","location","reportLogo","getReadableDateTimes","timeRange","dateDisplayFormat","dateTimeFrom","dateTimeTo","displayFrom","displayTo","ReportHeader","reportTitle","dashboardTitle","showTemplateVariables","variableControls","Stack","c","buildSimpleLayout","gridChildren","screenHeight","isLandscape","children","pages","maxRowCount","panelHeight","yPos","rowCount","isAfterRow","i","gridChild","isRow","blockItem","DashboardGridItem","buildGridLayout","yShift","reportItems","convertToReportGridItems","item","getUpdatedReportItem","nextBlockItem","newH","nextPanelH","repeatedPanels","x","y","height","width","childX","childY","childH","childW","j","panel","a","b","updatedItem","getGridParams","screenWidth","calcGridColWidth","positionParams","margin","containerPadding","containerWidth","cols","calcGridItemWHPx","gridUnits","colOrRowSize","marginPx","calcGridItemPosition","w","h","rowHeight","colWidth","calcXY","top","left","maxRows","clamp","calcWH","handle","_w","_h","num","lowerBound","upperBound","A4_WIDTH","A4_HEIGHT","FOOTER","SIDE_MARGIN","ReportGridRenderer","grid","isActive","setIsActive","isSimpleLayout","useUrlValues","uncollapseRows","headerHeight","setHeaderHeight","observedDiv","pageWidth","pageHeight","blocks","page","index","getPageStyle","getItemStyle","urlParams","params","position","block","DashboardReportPage","route","stateManager","dashboard","isLoading","loadError","uid","DashbordReportRenderer","PageLoader","model","layout","DefaultGridLayoutManager","Alert","getContentType","value","isFile","getResourceUrl","resource","isValidUrl"],"sourceRoot":""}