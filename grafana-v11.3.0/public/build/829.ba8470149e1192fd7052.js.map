{"version":3,"file":"829.ba8470149e1192fd7052.js","mappings":"4PAWA,MAAMA,EAA8B,IAG9BC,EAASC,GAAe,IAAI,QAASC,GAAY,WAAWA,EAASD,CAAE,CAAC,EACxEE,EAA2B,IASpBC,EAAuB,CAAC,CACnC,YAAAC,EACA,kBAAAC,EACA,yBAAAC,CACF,IAAiC,CAC/B,KAAM,CAAE,qBAAAC,CAAqB,KAAI,MAAgB,EAC3C,CAAE,cAAAC,EAAe,UAAAC,EAAW,MAAAC,EAAO,QAAAC,CAAQ,KAAI,MAA2B,CAC9E,aAAcJ,CAChB,CAAC,EACK,CAACK,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EACpDC,MAAS,MAAWC,CAAS,EAE7BC,EAA4DR,EAAc,IAAKS,IAC5E,CACL,MAAOA,EAAa,KACpB,MAAOA,EACP,UAAW,OACT,OAAC,IAAI,CAAC,QAAQ,YAAY,MAAM,YAC9B,mBAAC,KAA2B,CAAC,UAAWA,EAAa,iCAAkC,MAAO,EAAG,EACnG,CAEJ,EACD,EAEKC,KAAwE,WAAQ,IAC7EF,EAAQ,KAAMG,GAAWA,EAAO,OAAO,OAASb,CAAwB,GAAK,KACnF,CAACU,EAASV,CAAwB,CAAC,EAGhCc,GAAiB,IAAM,CAC3BP,EAAkB,EAAI,EACtB,QAAQ,IAAI,CAACF,EAAQ,EAAGZ,EAAMG,CAAwB,CAAC,CAAC,EAAE,QAAQ,IAAM,CACtEW,EAAkB,EAAK,CACzB,CAAC,CACH,EAGA,OAAIH,KACK,OAAC,IAAK,CAAC,MAAM,iCAAiC,SAAS,OAAQ,MAItE,QAAC,IAAK,CACJ,oBAAC,MACC,YAAaM,EAAQ,OAASlB,EAC9B,QAAAkB,EACA,MAAOE,EACN,GAAGd,EACJ,UAAAK,CAAA,CACF,EACCJ,MACC,OAAC,KACC,KAAK,OACL,QAASe,GACT,aAAW,yBACX,QAAQ,8BACR,aAAW,MAAGN,GAAO,cAAe,CAClC,CAACA,GAAO,OAAO,EAAGF,GAAkBH,CACtC,CAAC,EACH,GAEJ,CAEJ,EAEMY,KAAW,aAAU,CACzB,KAAM,CACJ,UAAW,cACb,EACA,GAAI,CACF,UAAW,gBACb,CACF,CAAC,EAEKN,EAAaO,IAA0B,CAC3C,iBAAe,OAAI,CACjB,MAAOA,EAAM,OAAO,KAAK,UACzB,OAAQ,UACR,aAAcA,EAAM,MAAM,OAAO,OACjC,SAAU,QACZ,CAAC,EACD,WAAS,OAAI,CACX,cAAe,OACf,CAACA,EAAM,YAAY,aAAa,eAAe,CAAC,EAAG,CACjD,UAAW,GAAGD,CAAQ,qBACxB,EACA,CAACC,EAAM,YAAY,aAAa,QAAQ,CAAC,EAAG,CAC1C,UAAW,GAAGD,CAAQ,qBACxB,CACF,CAAC,CACH,E,mHC3GA,MAAME,EAAe,IAAO,gBAAgB,aAAe,MAiC9CC,GAhC4B,CAACC,EAAcF,IAAiB,CAEvE,MAAMG,EAAqC,IACzC,MAAwB,KAAK,KAC7B,MAAwB,KAAK,KAC7B,MAAwB,IAAI,KAC5B,MAAwB,IAAI,KAC5B,MAAwB,KAAK,KAC7B,MAAwB,KAAK,KAC7B,MAAwB,KAAK,KAC7B,MAAwB,IAAI,CAC9B,EAGMC,KAA8B,MAA4BF,CAAW,EAOrEG,EAAOF,EAAyB,OAAQG,GAAWF,GAA+BE,CAAM,EAExFC,KAAO,SAAM,EAAsBF,EAAK,OAASG,GAAkB,CACvE,MAAMC,KAAe,QAAKJ,CAAI,GAAKD,EAC7BM,EAAaL,EAAK,SAAW,EAAI,EAAI,EAC3C,OAAOI,EAAeC,GAAcF,EAAQ,EAC9C,CAAC,EAED,MAAO,CAAC,GAAGH,EAAM,GAAGE,CAAI,EAAE,IAAI,IAAwB,CACxD,GAE4DP,CAAY,EAW3DW,EAA2B,CAAC,CAAE,gBAAAC,EAAiB,SAAAC,CAAS,OACnE,OAAC,IAAK,CAAC,UAAU,MAAM,IAAK,GAAK,KAAK,UACnC,SAAAZ,EAAmB,IAAKa,GAAa,CACpC,MAAMC,EAAWH,IAAoBE,EAErC,SACE,OAAC,MACC,KAAK,SACL,gBAAeC,EAEf,QAASA,EAAW,UAAY,YAChC,KAAK,KACL,QAAS,IAAMF,EAASC,CAAQ,EAE/B,SAAAA,CAAA,EALIA,CAMP,CAEJ,CAAC,EACH,C,6eClDF,MAAME,EAAiB,IAAM,CAC3B,MAAMzB,KAAS,MAAWC,EAAS,EAC7ByB,EAAU,IAAM,OAAO,KAAK,kDAAmD,QAAQ,EAC7F,SACE,QAACC,EAAA,EAAK,CAAC,IAAK,GACV,oBAAC,OAAI,UAAW3B,EAAO,gBAAiB,uDAAqD,KAC7F,OAAC4B,EAAA,EAAO,CAAC,UAAU,MAAM,QAAS,2BAA4B,MAAM,OAClE,mBAACC,EAAA,EAAI,CAAC,KAAK,cAAc,KAAK,KAAK,UAAW7B,EAAO,SAAU,QAAA0B,CAAA,CAAkB,EACnF,GACF,CAEJ,EAEaI,EAAmBC,GAAyBA,EAAI,QAAQ,GAAG,IAAM,GAEvE,SAASC,GAAiBC,EAA8B,CAC7D,KAAM,CAAE,MAAAC,CAAM,EAAID,EAGZE,EAA+B,CACnC,iBAHwBC,GAAuBN,EAAgBM,CAAU,EAIzE,iBAAkBX,CACpB,EAEMY,EAAuB,CAC3B,eAAgB,GAChB,eAAiBH,GAAU,CAACJ,EAAgBI,CAAK,CACnD,EAEA,SACE,OAACI,EAAA,IACC,SAAU,GACV,SAAS,GACT,WAAY,GACZ,iBAAkBJ,GAAO,IACzB,gBAAiB,mBAAgB,YAChC,GAAGD,EACJ,gBAAiB,yBAAsB,KACvC,UAAAI,EACA,cAAAF,CAAA,CACF,CAEJ,CAEA,MAAMlC,GAAaO,IAA0B,CAC3C,mBAAiB,OAAI,CACnB,MAAOA,EAAM,OAAO,QAAQ,KAC5B,SAAU,OACV,aAAc,KAChB,CAAC,EACD,YAAU,OAAI,CACZ,MAAOA,EAAM,OAAO,QAAQ,KAC5B,SAAU,OACV,aAAc,MACd,OAAQ,SACV,CAAC,CACH,GCjDa+B,GAAoB,IAEpBC,EAAwB,CAACC,EAAmBC,IAAqC,CAG5F,KAAM,CAAE,UAAWC,EAAyB,YAAaC,CAAe,EACtEC,GAAA,GAAa,UAAU,eAAe,SACpC,CACE,UAAWJ,EACX,YAAa,IACf,EACA,CACE,KAAM,CAACA,EACP,0BAA2B,EAC7B,CACF,EA4BF,MAAO,CAAE,gBAxBY,WAAQ,IACtBG,GAKgB,OAAO,OAAOA,CAAc,EAAE,KAAK,GAAK,CAAC,GAG3D,IAA8BE,GAAU,CACvC,MAAMC,EAAgBC,GAAmBF,CAAK,EAC9C,MAAO,CACL,MAAOA,EAAM,KACb,MAAOA,EAAM,KACb,YAAaA,EAAM,UAAY,MAE/B,WAAaJ,EAA0C,GAAhBK,EACvC,cAAAA,CACF,CACF,CAAC,EAEA,KAAKE,EAAW,EAlBV,CAAC,EAmBT,CAACL,EAAgBF,CAAuB,CAAC,EAErB,QAASC,CAAwB,CAC1D,EAEMK,GAAsBF,GACnBA,EAAM,MAAM,KAAMI,MAAS,MAAmBA,CAAI,GAAK,EAAQA,EAAK,cAAc,UAAoB,EAGzGD,GAAc,CAACE,EAA4BC,IACxCD,EAAE,OAAO,cAAcC,EAAE,OAAS,EAAE,GAAK,EAG5CC,GAAyB,CAACP,EAAgCQ,IACvDR,EAAM,OAAO,YAAY,EAAE,SAASQ,EAAM,YAAY,CAAC,EAGzD,SAASC,GAAe,CAC7B,uBAAAC,EACA,wBAAAd,CACF,EAGG,CACD,KAAM,CACJ,UAAW,CAAE,OAAAe,CAAO,EACpB,MAAAC,EACA,SAAAC,EACA,QAAAC,CACF,KAAI,MAA+B,EAE7B5D,KAAS,MAAW,EAAS,EAE7B6D,EAASH,EAAM,QAAQ,EACvBZ,EAAQY,EAAM,OAAO,EAErB,CAAE,aAAAI,EAAc,QAAAC,CAAQ,EAAIvB,EAAsBqB,GAAQ,KAAO,GAAInB,CAAuB,EAE5F,CAACsB,EAAkBC,CAAmB,KAAI,YAAS,EAAK,EACxD,CAACC,GAA2BC,EAA4B,KAAI,YAAS,EAAK,EAE1EC,EAA4B,IAAMH,EAAoB,EAAI,EAC1DI,GAAqC,IAAMF,GAA6B,EAAI,EAE5EG,GAAwBT,GAAmB,CAC/CU,GAAW,EACXZ,EAAS,SAAUE,CAAM,EACzBI,EAAoB,EAAK,CAC3B,EAEMO,GAA0B,CAACC,EAAmBC,KAA+B,CACjFf,EAAS,QAASc,CAAS,EAC3Bd,EAAS,gBAAiBe,EAAkB,EAC5CP,GAA6B,EAAK,CACpC,EAEMI,MAAa,eAAY,IAAM,CACnCZ,EAAS,QAAS,EAAE,CACtB,EAAG,CAACA,CAAQ,CAAC,EAEPgB,MAAa,eACjB,MAAOrB,GAAkB,CACvB,MAAMsB,GAAUtB,EAAQQ,EAAa,OAAQhB,IAAUO,GAAuBP,GAAOQ,CAAK,CAAC,EAAIQ,EAC/F,SAAO,QAAKc,GAASrC,EAAiB,CACxC,EACA,CAACuB,CAAY,CACf,EAEMe,MAAkB,WAAQ,OACvB,YAASF,GAAY,IAAK,CAAE,QAAS,EAAK,CAAC,EACjD,CAACA,EAAU,CAAC,EAETG,GAAoBhC,EAAQ,CAAE,MAAOA,EAAO,MAAOA,CAAM,EAAI,OAEnE,SACE,QAAC,OAAI,UAAW9C,EAAO,UACrB,qBAAC2B,EAAA,EAAK,CAAC,WAAW,SAEd,oBAACoD,EAAA,GACC,SACE,OAACC,EAAA,EAAK,CAAC,QAAQ,SAAS,YAAa,sCAAuC,kBAE5E,EAEF,UAAWhF,EAAO,UAClB,MAAOyD,EAAO,QAAQ,QACtB,cAAY,gBAEZ,mBAAC9B,EAAA,EAAK,CAAC,UAAU,MAAM,WAAW,SAC9B,UAACqC,MACD,oBACE,oBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAiB,EAAK,GAAGC,EAAM,CAAE,OAClC,OAAC,OAAI,MAAO,CAAE,MAAO,GAAI,EACvB,mBAAClD,GAAA,CACC,QAAQ,SACR,QAAS,CAAC,CAACyB,EAAO,QAAQ,QACzB,GAAGyB,GACJ,YAAa,GACb,SAAU,CAAC,CAAE,MAAAC,GAAO,IAAAC,EAAI,IAAM,CAC5BF,GAAM,SAAS,CAAE,MAAAC,GAAO,IAAAC,EAAI,CAAC,EAC7Bb,GAAW,CACb,EACF,EACF,EAEF,KAAK,SACL,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,iBAAkB,CACtD,EACF,KACA,OAACc,EAAA,EAAI,CAAC,MAAM,YAAY,cAAE,KAC1B,OAACC,EAAA,IACC,QAASlB,EACT,KAAK,SACL,KAAK,OACL,KAAK,UACL,QAAQ,YACR,SAAU,CAAC,MAAW,cAAc,uBAAoB,aAAa,EACrE,cAAamB,EAAA,GAAU,WAAW,WAAW,gBAC9C,sBAED,GACF,MACI,OAAC,OAAI,kCAAsB,EACnC,EACF,EAEDvB,MACC,OAACwB,GAAA,CAAoB,SAAUlB,GAAsB,QAAS,IAAML,EAAoB,EAAK,EAAG,GAEpG,EAECD,MACC,OAACwB,GAAA,CAAoB,SAAUlB,GAAsB,QAAS,IAAML,EAAoB,EAAK,EAAG,KAGlG,QAACtC,EAAA,EAAK,CAAC,WAAW,SAChB,oBAAC,OAAI,MAAO,CAAE,MAAO,GAAI,EACvB,mBAACoD,EAAA,GACC,MAAM,gCACN,cAAY,eACZ,YAAY,gDACZ,UAAW/E,EAAO,UAClB,MAAOyD,EAAO,OAAO,QACrB,QAAS,CAAC,CAACA,EAAO,OAAO,QACzB,QAAQ,QAER,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,IAAAwB,EAAK,GAAGC,EAAM,EAAG,WAAAO,EAAW,OAC9C,OAAC,MACC,SAAU,CAAC5B,GAAUE,EACrB,QAAQ,QAEP,GAAGmB,GACJ,SAAWpC,IAAU,CACnBoC,GAAM,SAASpC,GAAM,OAAS,EAAE,CAClC,EACA,UAAWiB,EACX,QAAS,EAAQF,GAAW,CAACf,GAAS,EAAQ2C,GAAW,MACzD,YAAaZ,GACb,aAAY,GACZ,eAAgB,oBAChB,aAAcC,GACd,eAAgBhB,EAChB,eAAiBzD,OACf,QAAC,OACC,oBAAC,QAAM,SAAAA,GAAO,MAAM,EACnBA,GAAO,kBACN,oBACG,iBACD,OAACqF,GAAA,GAAiB,EAAC,GACrB,GAEJ,EAEF,YAAa,oCAvBR,YAAS,CAwBhB,EAEF,KAAK,QACL,QAAA9B,EACA,MAAO,CACL,SAAU,CAAE,MAAO,GAAM,QAAS,yBAA0B,CAC9D,EACF,EACF,EACF,KACA,QAAC+B,GAAA,EAAG,CAAC,UAAW,EAAG,IAAK,EAAG,QAAS,OAAQ,WAAY,SACtD,oBAACN,EAAA,EAAI,CAAC,MAAM,YAAY,cAAE,KAC1B,OAACC,EAAA,IACC,QAASjB,GACT,KAAK,SACL,KAAK,OACL,KAAK,UACL,QAAQ,YACR,SAAU,CAACR,EACX,cAAa0B,EAAA,GAAU,WAAW,WAAW,yBAC9C,gCAED,GACF,EACCrB,OACC,OAAC0B,GAAA,CACC,SAAUpB,GACV,QAAS,IAAML,GAA6B,EAAK,EACjD,uBAAAX,CAAA,CACF,GAEJ,GACF,CAEJ,CAEA,SAASgC,GAAoB,CAC3B,QAAAK,EACA,SAAAC,CACF,EAGuB,CACrB,MAAM9F,KAAS,MAAW,EAAS,EAE7B,CAACmF,EAAOY,CAAQ,KAAI,YAAS,EAAE,EAC/BC,EAAW,SAAY,CAC3B,MAAMC,EAAY,QAAM,MAAa,CAAE,MAAAd,CAAa,CAAC,EACrD,GAAI,CAACc,EAAU,IAAK,CAClB,IAAU,KAAK,KAAU,WAAY,CAAC,6BAA6B,CAAC,EACpE,MACF,CAEA,MAAMpC,EAAiB,CAAE,MAAOoC,EAAU,MAAO,IAAKA,EAAU,GAAI,EACpEH,EAASjC,CAAM,EACf,IAAU,KAAK,KAAU,aAAc,CAAC,iBAAkB,IAAI,CAAC,CACjE,EAEMjE,EAAQkC,EAAgBqD,CAAK,EAEnC,SACE,QAACe,EAAA,EAAK,CAAC,UAAWlG,EAAO,MAAO,OAAQ,GAAM,MAAO,aAAc,UAAW6F,EAAS,gBAAiBA,EACtG,oBAAC,OAAI,UAAW7F,EAAO,WAAY,kDAAsC,KAEzE,QAAC,QAAK,SAAAgG,EACJ,oBAACjB,EAAA,GACC,SAAO,OAACC,EAAA,EAAK,CAAC,QAAQ,SAAS,uBAAW,EAC1C,MAAO,wCACP,QAASpF,EAET,mBAACuG,EAAA,GACC,cAAaZ,EAAA,GAAU,WAAW,WAAW,mBAC7C,UAAW,GACX,GAAG,aACH,YAAY,eACZ,MAAOJ,EACP,SAAWiB,GAAML,EAASK,EAAE,cAAc,KAAK,EAC/C,UAAWpG,EAAO,UACpB,EACF,KAEA,QAACkG,EAAA,EAAM,UAAN,CACC,oBAACZ,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAASO,EAAS,kBAE5D,KACA,OAACP,EAAA,IACC,KAAK,SACL,SAAU,CAACH,GAASvF,EACpB,cAAa2F,EAAA,GAAU,WAAW,WAAW,0BAC9C,kBAED,GACF,GACF,GACF,CAEJ,CAEA,SAASK,GAA6B,CACpC,QAAAC,EACA,SAAAC,EACA,uBAAAtC,CACF,EAIuB,CACrB,MAAMxD,KAAS,MAAW,EAAS,EAC7BgG,EAAW,IAAM,CACrBF,EAASO,GAAU,OAAO,EAAGA,GAAU,eAAe,CAAC,CACzD,EAEM,CAAE,MAAA3C,CAAM,KAAI,MAA+B,EAE3C4C,EAAkB,mBAClBC,EAAwB,sBACxB,CAAC9B,EAAWrC,CAAU,EAAIsB,EAAM,CAAC,QAAS,cAAc,CAAC,EAEzD8C,GACHhD,GAA0BA,EAAuBpB,CAAU,GAAG,KAAMqE,IAAMA,GAAE,OAAShC,CAAS,GAAG,QAAU,CAAC,EAEzGiC,EAAW,IAAM,CACrBb,EAAQ,CACV,EAEMc,KAAU,MAAQ,CACtB,cAAe,CAAE,MAAO,GAAI,cAAe,KAAkC,EAC7E,KAAM,WACN,iBAAkB,EACpB,CAAC,EAEK,CAAE,SAAAC,GAAU,aAAAC,GAAc,UAAAC,EAAW,SAAAnD,GAAU,UAAA0C,GAAW,MAAOU,EAAqB,EAAIJ,EAC1FjC,GAAqBqC,GAAqB,eAAe,EAEzDC,GAAyBzF,IAAqB,CAClDoC,GAAS,gBAAiBpC,GAAU,CAAE,eAAgB,EAAK,CAAC,CAC9D,EAEA,SACE,QAAC2E,EAAA,GACC,UAAWlG,EAAO,MAClB,OAAQ,GACR,MAAO,uBACP,UAAW0G,EACX,gBAAiBA,EAEjB,oBAAC,OAAI,UAAW1G,EAAO,WAAY,qEAAyD,KAE5F,OAAC,KAAY,CAAE,GAAG2G,EAChB,oBAAC,QAAK,SAAUE,GAAa,IAAMb,EAAS,CAAC,EAC3C,oBAACjB,EAAA,GACC,SACE,OAACC,EAAA,GACC,QAASuB,EACT,YAAY,qEACb,iCAED,EAEF,MAAOO,EAAU,OAAO,OAAO,QAC/B,QAAS,EAAQA,EAAU,OAAO,MAElC,mBAACX,EAAA,GACC,cAAaZ,EAAA,GAAU,WAAW,WAAW,uBAC7C,UAAWvF,EAAO,UAClB,UAAW,GACX,GAAIuG,EACJ,YAAY,eACX,GAAGK,GAAS,QAAS,CAAE,SAAU,CAAE,MAAO,GAAM,QAAS,WAAY,CAAE,CAAC,EAC3E,EACF,KAEA,OAAC7B,EAAA,GACC,MAAO+B,EAAU,OAAO,eAAe,QACvC,SACE,OAAC9B,EAAA,EAAK,CAAC,QAASsB,EAAiB,YAAY,kDAAkD,+BAE/F,EAEF,QAAS,EAAQQ,EAAU,OAAO,cAElC,mBAACX,EAAA,GACC,cAAaZ,EAAA,GAAU,WAAW,WAAW,2BAC7C,UAAWvF,EAAO,UAClB,GAAIsG,EACJ,YAAa,MACZ,GAAGM,GACF,mBACA,MAAyEJ,CAAU,CACrF,EACF,EACF,KAEA,OAACpF,EAAA,GAAwB,CAAC,gBAAiBsD,GAAoB,SAAUsC,EAAA,CAAuB,KAEhG,QAACd,EAAA,EAAM,UAAN,CACC,oBAACZ,EAAA,GAAM,CAAC,QAAQ,YAAY,KAAK,SAAS,QAASoB,EAAU,kBAE7D,KACA,OAACpB,EAAA,IACC,KAAK,SACL,SAAU,CAACwB,EAAU,QACrB,cAAavB,EAAA,GAAU,WAAW,WAAW,yBAC9C,kBAED,GACF,GACF,EACF,GACF,CAEJ,CAEA,MAAM,GAAa/E,IAA0B,CAC3C,aAAW,OAAI,CACb,QAAS,OACT,cAAe,SACf,WAAY,WACZ,SAAU,GAAGA,EAAM,YAAY,OAAO,EAAE,KACxC,eAAgB,eAClB,CAAC,EACD,aAAW,OAAI,CACb,SAAU,CACZ,CAAC,EACD,SAAO,OAAI,CACT,MAAO,GAAGA,EAAM,YAAY,OAAO,EAAE,IACvC,CAAC,EACD,cAAY,OAAI,CACd,MAAOA,EAAM,OAAO,KAAK,UACzB,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,CACH,G,gBC/cA,MAAMN,GAA6B,CACjC,CAAE,MAAO,MAA0B,SAAU,MAAO,UAAW,EAC/D,CAAE,MAAO,MAA0B,OAAQ,MAAO,SAAU,EAC5D,CAAE,MAAO,MAA0B,GAAI,MAAO,QAAS,EACvD,CAAE,MAAO,MAA0B,MAAO,MAAO,OAAQ,EACzD,CAAE,MAAO,MAA0B,SAAU,MAAO,iBAAkB,CACxE,EAEa+G,GAA0B,CAAC,CAAE,cAAAC,EAAe,aAAAC,EAAc,GAAGlF,CAAM,IAAa,CAC3F,MAAMmF,KAAO,WAAQ,IACdF,EAGAC,EAGEjH,GAFEA,GAAQ,OAAQmH,GAAQA,EAAI,QAAU,MAA0B,KAAK,EAHrEnH,GAAQ,OAAQmH,GAAQA,EAAI,QAAU,MAA0B,MAAM,EAM9E,CAACH,EAAeC,CAAY,CAAC,EAChC,SAAO,OAACG,EAAA,GAAM,CAAC,QAASF,EAAO,GAAGnF,CAAA,CAAO,CAC3C,E,eCrBO,SAASsF,GAA6BC,EAA2C,CACtF,MAAMC,KAAgC,MAA4BD,CAAuB,EAYzF,MAT0B,CACxB,EACAC,EAAgC,EAChCA,EAAgC,EAChCA,EAAgC,EAChCA,EAAgC,EAChCA,EAAgC,CAClC,EAEe,IAAI,IAAwB,CAC7C,CAEO,SAASC,GAAuB,CAAE,sBAAAC,EAAuB,wBAAAH,EAAyB,SAAAlG,CAAS,EAAU,CAC1G,MAAMsG,EAA0BC,GAAqBF,IAA0BE,EAEzE3H,EAAUqH,GAA6BC,CAAuB,EAEpE,SACE,OAAC7F,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,KAAK,UACnC,SAAAzB,EAAQ,IAAK2H,MACZ,OAACvC,EAAA,IACC,KAAK,SACL,gBAAesC,EAAuBC,CAAQ,EAE9C,QAASD,EAAuBC,CAAQ,EAAI,UAAY,YACxD,KAAK,KACL,QAAS,IAAM,CACbvG,EAASuG,CAAQ,CACnB,EAEC,SAAAA,IAAa,KAAO,OAASA,CAAA,EAPzBA,CAQP,CACD,EACH,CAEJ,C,cCxBO,MAAMC,GAAwB,GAE/BC,GAAwBC,IAAqE,CACjG,SAAU,CACR,MAAO,GACP,QAAS,WACX,EACA,SAAW9F,GAAU,CAEnB,GAAIA,IAAU,IACZ,MAAO,GAGT,GAAI,CACF,MAAM+F,KAAY,MAAwB/F,CAAK,EAG/C,GAAI+F,IAAc,EAChB,MAAO,GAGT,GAAI,CACF,MAAMC,KAAc,MAAwBF,CAAa,EACzD,OAAOC,GAAaC,EAChB,MACA,KACE,sDACA,0EACF,CACN,MAAc,CAGZ,MAAO,EACT,CACF,OAAStI,EAAO,CACd,OAAOA,aAAiB,MACpBA,EAAM,WACN,KAAE,yDAA0D,0BAA0B,CAC5F,CACF,CACF,GAEMuI,GAAgB,CAACtE,EAAgBf,IAAkB,CACvD,KAAM,CAAE,aAAAgB,CAAa,EAAItB,EAAsBqB,EAAQ,EAAK,EAM5D,MAAO,IAJuB,eAC3BuE,GAAmBtE,EAAa,KAAMuE,GAAyCA,EAAY,QAAUD,CAAM,EAC5G,CAACtE,CAAY,CACf,EAC8BhB,CAAK,CACrC,EAEA,SAASwF,GAAiC,CACxC,cAAAN,EACA,iBAAAO,EACA,wBAAA7F,CACF,EAIG,CACD,MAAM1C,KAAS,MAAW,EAAS,EAC7B,CAAE,MAAA0D,EAAO,SAAAC,EAAU,UAAA0C,CAAU,KAAI,MAA+B,EAChE,CAACmC,EAAgBC,CAAiB,KAAI,YAAS,EAAK,EAEpD,CAAChE,EAAWhC,EAAWL,CAAU,EAAIsB,EAAM,CAAC,QAAS,aAAc,cAAc,CAAC,EAGlFF,MADoBkF,EAAA,GAA4BC,GAAUA,EAAM,UAAU,EAC/B,IAAyB,EAGpEC,KADoBC,EAAA,IAA0B,IAAyB,EACjC,KAAMC,GAAOA,EAAG,MAAQrG,CAAS,EACvEsG,GAAgBH,GAAmB,OAAO,KAAMnC,GAAMA,EAAE,OAAShC,CAAS,EAE1EuE,GAAab,GAAc1F,GAAa,GAAIgC,CAAS,KAE3D,aAAU,IAAM,CACV,CAACuE,IAAcD,IAAe,UAChCR,EAAiBQ,GAAc,QAAQ,CAE3C,EAAG,CAACR,EAAkBS,GAAYrF,EAAUoF,EAAa,CAAC,EAE1D,MAAME,GAAsB,CAACC,EAAQ,KAAU,CACxCA,MACH,MAAQ,KAAY,oBAAoB,EAE1CT,EAAkB,EAAK,CACzB,EAEMU,GAAuB,IAAMV,EAAkB,EAAI,EAEnDW,GAAoB5F,IAAwB,SAAWwF,IAAc,CAACvG,GAAa,CAACgC,EACpF4E,GAAwC,CAC5C,KAAMjH,EACN,YAAa,KACb,OAAQ,CAAC,CACX,EACMkH,GAAgC,CAAE,KAAM7E,EAAW,SAAUuD,EAAe,MAAO,CAAC,EAAG,OAAQ,CAAC,CAAE,EAExG,SACE,QAAC,OACC,oBAACzE,GAAA,CACC,uBAAwBC,IAAwB,OAChD,wBAAAd,CAAA,CACF,EACCN,GAAcoG,MACb,OAAC,MACC,UAAWI,GAAqBS,GAChC,MAAON,IAAiBO,GACxB,UAAA7G,EACA,QAAS,IAAMwG,GAAoB,EACnC,iBAAgB,GAChB,WAAY,GACd,EAED7G,GAAcqC,MACb,OAAC,OAAI,UAAWzE,EAAO,oBACrB,mBAAC2B,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC7B,mBAAC,OAAI,UAAW3B,EAAO,UACrB,mBAAC2B,EAAA,EAAK,CAAC,UAAU,SAAS,IAAK,EAC5B,SAAA0E,EAAU,OAAO,GAAKA,EAAU,eAAe,MAC9C,QAAC,QACC,qBAAC,KAAK,CAAC,QAAQ,kDAAkD,OAAQ,CAAE,cAAA2B,CAAc,EAAG,iEACrC,CAAE,cAAAA,CAAc,EAAE,KACzE,EACC,CAACgB,OACA,OAACO,EAAA,GACC,KAAK,MACL,aAAW,OACX,SAAUH,GACV,QAASD,EAAA,CACX,GAEJ,EAEJ,EACF,EACF,EACF,GAEJ,CAEJ,CAEA,SAASK,GAAS,CAAE,cAAAxB,CAAc,EAA8B,CAC9D,MAAMhI,KAAS,MAAW,EAAS,EAC7B,CACJ,SAAA4G,EACA,UAAW,CAAE,OAAAnD,CAAO,EACpB,SAAAE,EACA,MAAAD,CACF,KAAI,MAA+B,EAE7B+F,EAAgB,iBAChBC,EAAuBhG,EAAM,aAAa,EAE1CiG,EAAoBC,GAA0B,CAClDjG,EAAS,cAAeiG,CAAa,CACvC,EAEA,SACE,QAACjI,EAAA,EAAK,CAAC,UAAU,SAAS,kBAAgB,aAAa,cAAY,aACjE,oBAACoD,EAAA,GACC,SACE,OAACC,EAAA,GACC,QAASyE,EACT,YAAY,8IAEZ,mBAAC,KAAK,CAAC,QAAQ,sDAAsD,0BAAc,EACrF,EAEF,UAAWzJ,EAAO,YAClB,MAAOyD,EAAO,aAAa,QAC3B,QAAiBA,EAAO,aAAa,QAAW,GAAO,OACvD,oCAAqC,GAErC,mBAAC0C,EAAA,EAAK,CAAC,GAAIsD,EAAe,MAAO,EAAI,GAAG7C,EAAS,cAAemB,GAAqBC,CAAa,CAAC,EAAG,EACxG,KACA,OAACN,GAAA,CACC,sBAAuBgC,EACvB,wBAAyB1B,EACzB,SAAU2B,CAAA,CACZ,GACF,CAEJ,CAEA,SAASE,IAAsC,CAI7C,SACE,QAAClI,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,SAC1C,oBAAC0D,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC9B,mBAAC,KAAK,CAAC,QAAQ,sDAAsD,6FAErE,EACF,KACA,OAACyE,EAAA,GACC,YAAY,yJACZ,aAXJ,oIAYI,SAAU,8BACV,MAAM,uCACR,GACF,CAEJ,CAEA,SAASC,IAAiB,CAGxB,SACE,QAACpI,EAAA,EAAK,CAAC,UAAU,MAAM,IAAK,GAAK,WAAW,SAC1C,oBAAC0D,EAAA,EAAI,CAAC,QAAQ,YAAY,MAAM,YAC9B,mBAAC,KAAK,CAAC,QAAQ,wDAAwD,mDAEvE,EACF,KACA,OAACyE,EAAA,GACC,eACE,oBACE,oBAAC,KACC,mBAAC,KAAK,CAAC,QAAQ,oDAAoD,sFAEnE,EACF,KACA,OAAC,KACC,mBAAC,KAAK,CAAC,QAAQ,oDAAoD,6LAGnE,EACF,KACA,OAAC,KACC,mBAAC,KAAK,CAAC,QAAQ,oDAAoD,4LAGnE,EACF,GACF,EAEF,aA/BW,6FAgCX,SAAU,yCACV,MAAM,wBACR,GACF,CAEJ,CAEO,SAASE,GAA0B,CACxC,cAAAhC,EACA,iBAAAO,EACA,SAAA0B,EACA,wBAAAvH,CACF,EAKG,CACD,MAAM1C,KAAS,MAAW,EAAS,EAC7B,CAACkK,EAAmBC,CAAoB,KAAI,YAAS,EAAK,EAE1D,CAAE,MAAAzG,EAAO,SAAAC,CAAS,KAAI,MAA+B,EAErDyG,EAAW1G,EAAM,UAAU,EAC3B2G,EAAO3G,EAAM,MAAM,EAEnB4G,KAAwB,MAA4BD,CAAI,EAE9D,SAEE,QAACE,GAAA,EAAiB,CAAC,OAAQ,EAAG,MAAM,0BAA0B,YAAaR,GAAe,EACxF,qBAACpI,EAAA,EAAK,CAAC,UAAU,SAAS,kBAAgB,aAAa,cAAY,aACjE,oBAAC2G,GAAA,CACC,iBAAAC,EACA,cAAAP,EACA,wBAAAtF,CAAA,CACF,EAEC4H,MAAyB,OAACd,GAAA,CAAS,cAAAxB,CAAA,CAA8B,EAEjEiC,MACC,OAAClF,EAAA,EAAK,CAAC,QAAQ,qBACb,mBAAC,MACC,OAAQ,OACN,QAACpD,EAAA,EAAK,CAAC,IAAK,EAAG,UAAU,MAAM,WAAW,SACxC,oBAAC6I,EAAA,GACC,GAAG,cACH,SAAWtI,GAAU,CACnByB,EAAS,WAAYzB,EAAM,cAAc,OAAO,CAClD,EACA,MAAO,EAAQkI,CAAQ,CACzB,KACA,QAAC,SAAM,QAAQ,cAAc,UAAWpK,EAAO,YAC7C,oBAAC,KAAK,CAAC,QAAQ,wBAAwB,4BAAgB,KACvD,OAAC4B,EAAA,EAAO,CAAC,UAAU,MAAM,QAAQ,mDAAmD,MAAO,OACzF,mBAACC,EAAA,EAAI,CAAC,SAAU,EAAG,KAAK,cAAc,KAAK,KAAK,UAAW7B,EAAO,SAAU,EAC9E,GACF,GACF,EAEF,KAAK,WACP,EACF,GAEJ,EACCsK,MACC,oBACE,oBAACG,EAAA,GACC,YAAa,CAACP,EACd,SAAWQ,GAAcP,EAAqB,CAACO,CAAS,EACxD,KAAK,uCACP,EACCR,MACC,oBACE,oBAACL,GAAA,EAAoC,KACrC,OAAC9E,EAAA,EAAK,CAAC,QAAQ,sBAAsB,MAAM,gDACzC,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAA4F,EAAU,IAAA1F,GAAK,GAAGC,EAAM,CAAE,OAC5C,OAAC+B,GAAA,CACE,GAAG/B,GACJ,QAAQ,sBACR,MAAO,GACP,cAAe,GACf,aAAc,GACd,SAAWhD,GAAUyI,EAASzI,GAAO,KAAK,EAC5C,EAEF,KAAK,cACP,EACF,KACA,OAAC6C,EAAA,EAAK,CAAC,QAAQ,uBAAuB,MAAM,4CAC1C,mBAAC,MACC,OAAQ,CAAC,CAAE,MAAO,CAAE,SAAA4F,EAAU,IAAA1F,GAAK,GAAGC,EAAM,CAAE,OAC5C,OAAC+B,GAAA,CACE,GAAG/B,GACJ,QAAQ,uBACR,MAAO,GACP,cAAe,GACf,aAAc,GACd,SAAWhD,GAAUyI,EAASzI,GAAO,KAAK,EAC5C,EAEF,KAAK,eACP,EACF,GACF,GAEJ,GAEJ,CAEJ,CAEA,MAAM,GAAa1B,IAA0B,CAC3C,eAAa,OAAI,CACf,aAAc,CAChB,CAAC,EACD,iBAAe,OAAI,CACjB,YAAaA,EAAM,QAAQ,CAAC,CAC9B,CAAC,EACD,uBAAqB,OAAI,CACvB,MAAOA,EAAM,OAAO,KAAK,UACzB,SAAU,GAAGA,EAAM,YAAY,OAAO,EAAE,KACxC,SAAUA,EAAM,WAAW,KAAK,EAClC,CAAC,EACD,wBAAsB,OAAI,CACxB,aAAcA,EAAM,QAAQ,CAAC,CAC/B,CAAC,EACD,eAAa,OAAI,CACf,YAAa,SACb,YAAaA,EAAM,QAAQ,CAAC,EAC5B,MAAOA,EAAM,OAAO,QAAQ,IAC9B,CAAC,EACD,YAAU,OAAI,CACZ,WAAY,MACd,CAAC,EACD,kBAAgB,OAAI,CAClB,MAAOA,EAAM,OAAO,QAAQ,IAC9B,CAAC,EACD,QAAM,OAAI,CACR,WAAY,MACd,CAAC,EACD,iBAAe,OAAI,CACjB,UAAWA,EAAM,QAAQ,CAAC,EAC1B,WAAY,IAAIA,EAAM,QAAQ,CAAC,CAAC,EAClC,CAAC,EACD,aAAW,OAAI,CACb,UAAWA,EAAM,QAAQ,CAAC,CAC5B,CAAC,EACD,eAAa,OAAI,CACf,MAAOA,EAAM,OAAO,KAAK,QACzB,OAAQ,UACR,SAAUA,EAAM,WAAW,UAAU,QACvC,CAAC,CACH,E,0VCjaA,MAAMoK,EAAkC,OACtC,QAACC,EAAA,EAAK,CAAC,SAAS,UAAU,MAAM,4CAA4C,iDACzC,OAAC,UAAQ,aAAO,gBAAgB,YAAY,EAAS,sCAEtF,OAAC,OAAG,EAAE,mEAER,E,qCCsBF,MAAMC,GAAiB,GAEvB,SAASC,EAAS,CAAE,QAAAC,EAAS,MAAApL,CAAM,EAAyC,CAC1E,OAAIA,KACK,OAACqL,EAAA,EAAK,CAAC,MAAM,MAAM,KAAK,qBAAqB,KAAM,QAAS,QAASD,CAAA,CAAS,KAE9E,OAACC,EAAA,EAAK,CAAC,MAAM,SAAS,KAAK,uBAAuB,KAAM,UAAW,QAASD,CAAA,CAAS,CAEhG,CAEA,MAAME,GAAqBC,GAAuB,CAChD,GAAI,CACF,MAAMtD,KAAW,MAAwBsD,CAAU,EAMnD,MAJI,EAAAtD,EAAW,IAAwB,KAInCA,GAAY,IAAwB,OAAU,EAKpD,MAAgB,CACd,MAAO,EACT,CACF,EAKauD,GAAqB,CAAC,CAAE,2BAAAC,CAA2B,IAAsD,CACpH,MAAMrL,KAAS,MAAWC,EAAS,EAE7B,CAAE,MAAAyD,CAAM,KAAI,MAA2B,EACvCrC,EAAkBqC,EAAM,eAAe,EACvC4H,GAAyB,CAASjK,EAElCkK,GAAkCF,EACrC,MAAM,EACN,IAAI,CAACnI,EAAoBjC,MAAW,CACnC,GAAIA,GACJ,QAAM,MAAaiC,EAAM7B,CAAe,CAC1C,EAAE,EACD,KACC,CAACmK,EAAQC,QACP,MAA4BD,EAAO,KAAK,aAAe,EAAE,KACzD,MAA4BC,GAAO,KAAK,aAAe,EAAE,CAC7D,EAEIC,MAA2C,WAAQ,IAChD,CACL,CACE,GAAI,YACJ,MAAO,QACP,WAAY,CAAC,CAAE,KAAM,CAAE,UAAAC,CAAU,CAAE,OAC1B,mBAAG,SAAAA,CAAA,CAAU,EAEtB,KAAM,OACR,EACA,CACE,GAAI,MACJ,MAAO,iBACP,WAAY,CAAC,CAAE,KAAM,CAAE,YAAAC,CAAY,CAAE,OAC5B,mBAAG,SAAAA,CAAA,CAAY,EAExB,KAAM,EACR,EACA,CACE,GAAI,oBACJ,MAAO,QACP,WAAY,CAAC,CAAE,KAAM,CAAE,kBAAmBC,CAAkB,CAAE,IACxDP,MACK,OAACP,EAAA,CAAS,QAAQ,6BAA8B,GAElDG,GAAkB7J,CAAe,EAGlCwK,IAAsB,KAEtB,OAACd,EAAA,CAAS,QAAQ,6EAA6E,MAAK,GAAC,KAGhG,mBAAG,SAAAc,CAAA,CAAkB,KAPrB,OAACd,EAAA,CAAS,QAAS,qCAAsC,MAAK,GAAC,EAW5E,KAAM,EACR,CACF,EACC,CAAC1J,EAAiBiK,EAAsB,CAAC,EAE5C,SACE,OAAC,OAAI,UAAWtL,EAAO,aACrB,mBAAC8L,EAAA,EAAY,CAAC,MAAOP,GAAM,KAAMG,GAAS,WAAY,CAAE,aAAcZ,EAAe,EAAG,EAC1F,CAEJ,EAQaiB,GAAyDC,IAA+C,CACnH,SAAU,CACR,MAAO,GACP,QAAS,WACX,EACA,SAAWhE,GAA0B,CACnC,GAAI,CACF,MAAMH,KAAW,MAAwBG,CAAa,EAEtD,GAAIH,EAAW,IAAwB,IACrC,MAAO,uBAAuB,GAAqB,YAGrD,GAAIA,GAAY,IAAwB,OAAU,EAChD,MAAO,yBAAyB,GAAqB,YAEvD,MAAI,MAA+BmE,EAAOhE,CAAa,EAAE,SAAW,EAClE,MAAO,GACF,CACL,MAAMiE,EAAqBD,EAAM,IAAK9I,IAAS,CAC7C,KAAM,CAAE,YAAA0I,EAAY,KAAI,MAAa1I,GAAM8E,CAAa,EACxD,OAAO4D,MAAc,MAA4BA,EAAW,EAAI,IAClE,CAAC,EACKM,GAAuB,KAAK,IAChC,GAAGD,EAAmB,OAAQE,IAA6BA,KAAW,IAAI,CAC5E,EACA,MAAO,gKAA6J,MAAyBD,EAAoB,CAAC,IACpN,CACF,OAAStM,EAAO,CACd,OAAOA,aAAiB,MAAQA,EAAM,QAAU,0BAClD,CACF,CACF,GAYO,SAASwM,GAAoBnK,EAAuC,CACzE,KAAM,CAAE,UAAAoK,EAAW,MAAAvJ,EAAO,QAAA+C,EAAS,iBAAAyG,GAAkB,UAAA7J,EAAU,EAAIR,EAE7DjC,MAAS,MAAWC,EAAS,EAC7BsM,KAAY,MAAmB,EAS/B,CAACC,GAAiBC,EAAoB,KAAIC,EAAA,IAAgC,EAC1E,CAACC,GAAiBC,EAAoB,KAAI,MAAmB,EAC7D,CAACC,GAAeC,EAAkB,KAAI,MAAiB,EAEvD,CAAE,QAAA/I,GAAS,MAAAnE,EAAM,KAAI,MAAkB6M,GAAsBK,GAAoBF,EAAoB,EAErGG,MAAgB,WACpB,KAAmB,CACjB,iBAAe,OAAuBV,CAAS,EAAE,KACjD,UAAWvJ,EAAM,KACjB,cAAeA,EAAM,UAAY,IACnC,GACA,CAACuJ,EAAWvJ,EAAM,KAAMA,EAAM,QAAQ,CACxC,EAEMkK,MAAkB,MAAmBX,EAAU,WAAW,EAC1DY,EAAwBD,KAAoB,KAG5CE,MAAsB,OAAuBb,CAAS,EAAE,QAExDc,GAAiBF,EAAwB,SAAW,YAEpDjH,GAAW,MAAOoH,GAAuB,CAC7C,MAAMC,EAA2C,CAC/C,eAAgBL,GAChB,UAAWlK,EAAM,KACjB,cAAemK,EAAwBxK,GAAa4J,EAAU,IAChE,EAGMiB,EAAuBL,KACzB,OAAuBG,EAAO,cAAeF,EAAmB,EAChEE,EAAO,cACLG,EAAmBH,EAAO,UAC1BI,EAAkBJ,EAAO,cAGzBK,EAAaR,EAAwB,GAAQK,IAAyBD,EAAoB,cAC1FK,EAAeH,IAAqBF,EAAoB,UAE9D,GAAI,CACEI,EACF,MAAMZ,GAAc,QAAQQ,EAAqBC,EAAsBC,EAAkBC,CAAe,EAC/FE,EACT,MAAMf,GAAgB,QAAQU,EAAqBE,EAAkBC,CAAe,EAEpF,MAAMhB,GAAgB,QAAQa,EAAqBG,CAAe,EAEpE3H,EAAQ,EAAI,EACZ,QAAM,SAAS,MAAsB,CAAE,gBAAAmH,EAAgB,CAAC,CAAC,CAC3D,MAAiB,CAAC,CACpB,EAEMrG,MAAU,MAAoB,CAClC,KAAM,SACN,cAAAoG,GACA,iBAAkB,EACpB,CAAC,EAEK,CACJ,aAAAlG,GACA,SAAAD,GACA,MAAAlD,GACA,UAAW,CAAE,QAAAiK,GAAS,OAAAlK,GAAQ,QAAAmK,EAAQ,EACtC,SAAAjK,GACA,UAAA0C,EACF,EAAIM,GAEEkH,EAAY,IAAM,CACtBtB,EAAU,MAAM,6DAA6D,CAC/E,EAEMlB,KAA6B,WACjCvI,EAAM,MAAM,IAAK,GAAM,EAAE,SAAS,EAAE,OAAQI,GAAS,IAAC,MAAmCA,CAAI,CAAC,CAChG,EACM4K,EAA0BzC,EAA2B,OAAS,EAC9D0C,EACJzB,IAAoBW,EAAwB,wBAA0B,qCAExE,SACE,OAAC/G,EAAA,EAAK,CAAC,UAAWlG,GAAO,MAAO,OAAQ,GAAM,MAAO+N,EAAY,UAAWlI,EAAS,gBAAiBA,EACpG,mBAAC,KAAY,CAAE,GAAGc,GAChB,mBAAC,QAAK,SAAUE,GAAab,GAAU6H,CAAS,EAC9C,gCACG,WAAC5L,EAAM,eACN,QAACN,EAAA,EAAK,CAAC,IAAK,EAAG,WAAY,SACzB,oBAACoD,EAAA,GACC,UAAW/E,GAAO,UAClB,SACE,OAACgF,EAAA,GACC,QAAQ,gBACR,YACE,CAACiI,GACD,uFAGD,SAAAE,EAAA,CACH,EAEF,QAAiB1J,GAAO,cAAiB,GAAO,OAChD,MAAOA,GAAO,eAAe,QAE7B,mBAAC0C,EAAA,GACC,GAAG,gBACH,SAAUmG,IAAoBW,EAC7B,GAAGrG,GAAS,gBAAiB,CAC5B,SAAU,6BACZ,CAAC,EACH,EACF,EACCqG,GAAyBhL,EAAM,cAC9B,OAAC,MACC,KAAMA,EAAM,UACZ,MAAM,eACN,QAAQ,YACR,KAAK,cACL,OAAO,SACT,GAEJ,KAEF,OAAC8C,EAAA,GACC,SACE,OAACC,EAAA,GACC,QAAQ,YACR,YAAY,qEACb,4BAED,EAEF,QAAS,CAAC,CAACvB,GAAO,UAClB,MAAOA,GAAO,WAAW,QAEzB,mBAAC0C,EAAA,GACC,UAAW,GACX,GAAG,YACH,SAAUmG,GACT,GAAG1F,GAAS,YAAa,CACxB,SAAU,oCACZ,CAAC,EACH,EACF,KACA,OAAC7B,EAAA,GACC,SACE,OAACC,EAAA,GACC,QAAQ,gBACR,YAAY,2EAEZ,mBAACrD,EAAA,EAAK,CAAC,IAAK,GAAK,+BAAmB,EACtC,EAEF,QAAiB8B,GAAO,cAAiB,GAAO,OAChD,MAAOA,GAAO,eAAe,QAE7B,oBAAC9B,EAAA,EAAK,CAAC,UAAU,SACf,oBAACwE,EAAA,GACC,GAAG,gBACH,YAAa,KACZ,GAAGS,GAAS,gBAAiBmF,GAA+BV,CAA0B,CAAC,EAC1F,KACA,OAACjK,EAAA,IACC,gBAAiBiF,GAAU,eAAe,EAC1C,SAAWnE,GAAUyB,GAAS,gBAAiBzB,EAAO,CAAE,eAAgB,GAAM,YAAa,EAAK,CAAC,EACnG,GACF,EACF,EAGC+K,MAAyB,KAAmCvJ,GAAM,eAAe,CAAC,EAAE,iBACnF,OAACkH,EAA+B,EAAC,EAGlC,CAACkD,MAA2B,OAAC,OAAI,oDAAwC,EACzEA,MACC,oBACE,oBAAC,OAAI,mDAAuC,KAC5C,OAAC,OAAI,UAAW9N,GAAO,kBAAmB,gGAE1C,KACA,OAACoL,GAAA,CAAmB,2BAAAC,CAAA,CAAwD,GAC9E,EAEDzL,OAAS,OAACiL,EAAA,EAAK,CAAC,MAAO,8BAAgC,kBAAmBjL,EAAK,EAAE,KAClF,OAAC,OAAI,UAAWI,GAAO,aACrB,oBAACkG,EAAA,EAAM,UAAN,CACC,oBAACZ,EAAA,IACC,QAAQ,YACR,KAAK,SACL,SAAUvB,GACV,QAAS,IAAM8B,EAAQ,EAAK,EAC5B,KAAK,UACN,kBAED,KACA,OAACP,EAAA,GAAM,CAAC,KAAK,SAAS,SAAU,CAACqI,IAAW,CAACC,IAAW7J,GACrD,SAAAA,GAAU,YAAc,OAC3B,GACF,EACF,GACF,GArHsD,KAAK,UAAUgJ,EAAa,CAsHpF,EACF,EACF,CAEJ,CAEA,MAAM9M,GAAaO,IAA0B,CAC3C,SAAO,OAAI,CACT,SAAU,OACZ,CAAC,EACD,gBAAc,OAAI,CAChB,IAAK,QACL,SAAU,UACZ,CAAC,EACD,aAAW,OAAI,CACb,KAAM,CACR,CAAC,EACD,gBAAc,OAAI,CAChB,UAAWA,EAAM,QAAQ,CAAC,EAC1B,aAAcA,EAAM,QAAQ,CAAC,EAC7B,OAAQ,MACV,CAAC,EACD,qBAAmB,OAAI,CACrB,SAAUA,EAAM,WAAW,UAAU,QACvC,CAAC,CACH,E,+ICnZA,MAAMwN,EAA2B,OAAM,KAAE,sCAAuC,iCAAiC,EAM1G,SAASC,GAAkC,CAChD,KAAM,CAACC,CAAmB,KAAI,KAAuB,EAC/C,CAACC,CAAe,EAAI,KAAa,UAAU,4BAA4B,YAAY,EAEzF,SAAO,MAAS,MAAOC,EAAgC7M,IAAqB,CAC1E,KAAM,CAAE,cAAA8M,CAAc,EAAID,EAEpBE,KAAS,MAAsB,CAAE,SAAA/M,CAAS,CAAC,EAC3C,CAAE,uBAAAgN,EAAwB,YAAAC,CAAY,EAAI,MAAMN,EAAoBE,EAAWE,CAAM,EAE3F,OAAOH,EAAgB,CACrB,YAAAK,EACA,UAAWH,EACX,QAASE,EACT,oBAAqB,CAAE,eAAgBP,EAAyB,CAAE,CACpE,CAAC,EAAE,OAAO,CACZ,CAAC,CACH,CAOO,SAASS,GAAmB,CACjC,KAAM,CAACP,CAAmB,KAAI,KAAuB,EAC/C,CAACQ,CAAc,EAAI,KAAa,UAAU,yBAAyB,aAAa,EAChF,CAACP,CAAe,EAAI,KAAa,UAAU,4BAA4B,YAAY,EACnF,CAACQ,CAAe,EAAI,KAAa,UAAU,6BAA6B,YAAY,EAGpFC,KAAiB,KAAE,oCAAqC,+BAA+B,EAE7F,SAAO,MACL,MAAOR,EAAgCC,EAAuB5J,EAAoBlD,IAAsB,CAEtG,MAAI,MAAqB6M,EAAU,cAAc,EAC/C,MAAM,IAAI,MAAM,mFAAmF,EAGrG,MAAME,KAAS,MAAoB,CAAE,iBAAkBD,EAAe,UAAA5J,EAAW,SAAAlD,CAAS,CAAC,EACrF,CAAE,uBAAAgN,EAAwB,YAAAC,CAAY,EAAI,MAAMN,EAAoBE,EAAWE,CAAM,EAErFO,EAAeT,EAAU,cACzBU,EAAkBR,EAAO,QAAQ,iBAEjCS,EAAeX,EAAU,UACzBY,EAAkBV,EAAO,QAAQ,UAKvC,GAAIU,IAHmB,EAAQA,GAAoBD,IAAiBC,KAI9C,MAAMN,EAAe,CACvC,YAAAF,EACA,UAAWM,EACX,MAAOE,EAEP,oBAAqB,CAAE,eAAgB,EAAM,CAC/C,CAAC,EACE,OAAO,EACP,MAAM,GAAqB,IAEb,OAAO,OACtB,MAAM,IAAI,MAAM,iFAAiF,EAMrG,aAAMb,EAAgB,CACpB,YAAAK,EACA,UAAWM,EACX,QAASP,EACT,oBAAqB,CAAE,eAAAK,CAAe,CACxC,CAAC,EAAE,OAAO,EAGK,MAAMD,EAAgB,CACnC,YAAAH,EACA,UAAWK,EACX,MAAOE,EACP,oBAAqB,CAAE,iBAAkB,EAAM,CACjD,CAAC,EAAE,OAAO,CAGZ,CACF,CACF,CAMO,SAASE,GAAqB,CACnC,KAAM,CAACf,CAAmB,KAAI,KAAuB,EAC/C,CAACQ,CAAc,EAAI,KAAa,UAAU,yBAAyB,aAAa,EAChF,CAACP,CAAe,EAAI,KAAa,UAAU,4BAA4B,YAAY,EACnF,CAACQ,CAAe,EAAI,KAAa,UAAU,6BAA6B,YAAY,EAE1F,SAAO,MAAS,MAAOP,EAAgC3J,EAAmBlD,IAAsB,CAC9F,MAAM+M,KAAS,MAAsB,CAAE,UAAA7J,EAAW,SAAAlD,CAAS,CAAC,EACtD,CAAE,uBAAAgN,EAAwB,YAAAC,CAAY,EAAI,MAAMN,EAAoBE,EAAWE,CAAM,EAErFS,EAAeX,EAAU,UACzBc,EAAeZ,EAAO,QAAQ,UAC9BD,EAAgBD,EAAU,cAE1BQ,KAAiB,KAAE,sCAAuC,iCAAiC,EAajG,IAVoB,MAAMF,EAAe,CACvC,YAAAF,EACA,UAAWH,EACX,MAAOa,EAEP,oBAAqB,CAAE,eAAgB,EAAM,CAC/C,CAAC,EACE,OAAO,EACP,MAAM,GAAqB,IAEb,OAAO,OACtB,MAAM,IAAI,MAAM,kFAAkF,EAKpG,MAAMC,EAAS,MAAMhB,EAAgB,CACnC,YAAAK,EACA,UAAWH,EACX,QAASE,EACT,oBAAqB,CAAE,eAAAK,CAAe,CACxC,CAAC,EAAE,OAAO,EAGV,aAAMD,EAAgB,CACpB,YAAAH,EACA,UAAWH,EACX,MAAOU,EACP,oBAAqB,CAAE,iBAAkB,EAAM,CACjD,CAAC,EAAE,OAAO,EAEHI,CACT,CAAC,CACH,CAMO,SAASC,GAA6B,CAC3C,KAAM,CAAClB,CAAmB,KAAI,KAAuB,EAC/C,CAACC,CAAe,EAAI,KAAa,UAAU,4BAA4B,YAAY,EAEzF,SAAO,MAAS,MAAOC,EAAgCiB,IAAmC,CACxF,KAAM,CAAE,cAAAhB,CAAc,EAAID,EAEpBE,KAAS,MAA8B,CAAE,MAAAe,CAAM,CAAC,EAChD,CAAE,uBAAAd,EAAwB,YAAAC,CAAY,EAAI,MAAMN,EAAoBE,EAAWE,CAAM,EAE3F,OAAOH,EAAgB,CACrB,YAAAK,EACA,UAAWH,EACX,QAASE,EACT,oBAAqB,CAAE,eAAgBP,EAAyB,CAAE,CACpE,CAAC,EAAE,OAAO,CACZ,CAAC,CACH,C,8DCzLO,SAASsB,GAAiB,CAC/B,SAAO,WAAQ,OAAM,MAAe,EAAG,CAAC,CAAC,CAC3C,C","sources":["webpack://grafana/./public/app/features/alerting/unified/components/notification-policies/ContactPointSelector.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/EvaluationGroupQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/RuleFolderPicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/FolderAndGroup.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaAlertStatePicker.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/PendingPeriodQuickPick.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rule-editor/GrafanaEvaluationBehavior.tsx","webpack://grafana/./public/app/features/alerting/unified/components/InvalidIntervalWarning.tsx","webpack://grafana/./public/app/features/alerting/unified/components/rules/EditRuleGroupModal.tsx","webpack://grafana/./public/app/features/alerting/unified/hooks/ruleGroup/useUpdateRuleGroup.ts","webpack://grafana/./public/app/features/alerting/unified/utils/accessControlHooks.ts"],"sourcesContent":["import { css, cx, keyframes } from '@emotion/css';\nimport { useMemo, useState } from 'react';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Select, SelectCommonProps, Stack, Alert, IconButton, Text, useStyles2 } from '@grafana/ui';\nimport { ContactPointReceiverSummary } from 'app/features/alerting/unified/components/contact-points/ContactPoint';\nimport { useAlertmanager } from 'app/features/alerting/unified/state/AlertmanagerContext';\n\nimport { useContactPointsWithStatus } from '../contact-points/useContactPoints';\nimport { ContactPointWithMetadata } from '../contact-points/utils';\n\nconst MAX_CONTACT_POINTS_RENDERED = 500;\n\n// Mock sleep method, as fetching receivers is very fast and may seem like it hasn't occurred\nconst sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\nconst LOADING_SPINNER_DURATION = 1000;\n\ntype ContactPointSelectorProps = {\n  selectProps: SelectCommonProps<ContactPointWithMetadata>;\n  showRefreshButton?: boolean;\n  /** Name of a contact point to optionally find and set as the preset value on the dropdown */\n  selectedContactPointName?: string | null;\n};\n\nexport const ContactPointSelector = ({\n  selectProps,\n  showRefreshButton,\n  selectedContactPointName,\n}: ContactPointSelectorProps) => {\n  const { selectedAlertmanager } = useAlertmanager();\n  const { contactPoints, isLoading, error, refetch } = useContactPointsWithStatus({\n    alertmanager: selectedAlertmanager!,\n  });\n  const [loaderSpinning, setLoaderSpinning] = useState(false);\n  const styles = useStyles2(getStyles);\n\n  const options: Array<SelectableValue<ContactPointWithMetadata>> = contactPoints.map((contactPoint) => {\n    return {\n      label: contactPoint.name,\n      value: contactPoint,\n      component: () => (\n        <Text variant=\"bodySmall\" color=\"secondary\">\n          <ContactPointReceiverSummary receivers={contactPoint.grafana_managed_receiver_configs} limit={2} />\n        </Text>\n      ),\n    };\n  });\n\n  const matchedContactPoint: SelectableValue<ContactPointWithMetadata> | null = useMemo(() => {\n    return options.find((option) => option.value?.name === selectedContactPointName) || null;\n  }, [options, selectedContactPointName]);\n\n  // force some minimum wait period for fetching contact points\n  const onClickRefresh = () => {\n    setLoaderSpinning(true);\n    Promise.all([refetch(), sleep(LOADING_SPINNER_DURATION)]).finally(() => {\n      setLoaderSpinning(false);\n    });\n  };\n\n  // TODO error handling\n  if (error) {\n    return <Alert title=\"Failed to fetch contact points\" severity=\"error\" />;\n  }\n\n  return (\n    <Stack>\n      <Select\n        virtualized={options.length > MAX_CONTACT_POINTS_RENDERED}\n        options={options}\n        value={matchedContactPoint}\n        {...selectProps}\n        isLoading={isLoading}\n      />\n      {showRefreshButton && (\n        <IconButton\n          name=\"sync\"\n          onClick={onClickRefresh}\n          aria-label=\"Refresh contact points\"\n          tooltip=\"Refresh contact points list\"\n          className={cx(styles.refreshButton, {\n            [styles.loading]: loaderSpinning || isLoading,\n          })}\n        />\n      )}\n    </Stack>\n  );\n};\n\nconst rotation = keyframes({\n  from: {\n    transform: 'rotate(0deg)',\n  },\n  to: {\n    transform: 'rotate(720deg)',\n  },\n});\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  refreshButton: css({\n    color: theme.colors.text.secondary,\n    cursor: 'pointer',\n    borderRadius: theme.shape.radius.circle,\n    overflow: 'hidden',\n  }),\n  loading: css({\n    pointerEvents: 'none',\n    [theme.transitions.handleMotion('no-preference')]: {\n      animation: `${rotation} 2s infinite linear`,\n    },\n    [theme.transitions.handleMotion('reduce')]: {\n      animation: `${rotation} 6s infinite linear`,\n    },\n  }),\n});\n","import { last, times } from 'lodash';\n\nimport { config } from '@grafana/runtime';\nimport { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\nconst MIN_INTERVAl = config.unifiedAlerting.minInterval ?? '10s';\nexport const getEvaluationGroupOptions = (minInterval = MIN_INTERVAl) => {\n  const MIN_OPTIONS_TO_SHOW = 8;\n  const DEFAULT_INTERVAL_OPTIONS: number[] = [\n    parsePrometheusDuration('10s'),\n    parsePrometheusDuration('30s'),\n    parsePrometheusDuration('1m'),\n    parsePrometheusDuration('5m'),\n    parsePrometheusDuration('10m'),\n    parsePrometheusDuration('15m'),\n    parsePrometheusDuration('30m'),\n    parsePrometheusDuration('1h'),\n  ];\n\n  // 10s for OSS and 1m0s for Grafana Cloud\n  const minEvaluationIntervalMillis = safeParsePrometheusDuration(minInterval);\n\n  /**\n   * 1. make sure we always show at least 8 options to the user\n   * 2. find the default interval closest to the configured minInterval\n   * 3. if we have fewer than 8 options, we basically double the last interval until we have 8 options\n   */\n  const head = DEFAULT_INTERVAL_OPTIONS.filter((millis) => minEvaluationIntervalMillis <= millis);\n\n  const tail = times(MIN_OPTIONS_TO_SHOW - head.length, (index: number) => {\n    const lastInterval = last(head) ?? minEvaluationIntervalMillis;\n    const multiplier = head.length === 0 ? 1 : 2; // if the head is empty we start with the min interval and multiply it only once :)\n    return lastInterval * multiplier * (index + 1);\n  });\n\n  return [...head, ...tail].map(formatPrometheusDuration);\n};\n\nexport const QUICK_PICK_OPTIONS = getEvaluationGroupOptions(MIN_INTERVAl);\n\ninterface Props {\n  currentInterval: string;\n  onSelect: (interval: string) => void;\n}\n\n/**\n * Allow a quick selection of group evaluation intervals, based on the configured \"unifiedAlerting.minInterval\" value\n * ie. [1m, 2m, 5m, 10m, 15m] etc.\n */\nexport const EvaluationGroupQuickPick = ({ currentInterval, onSelect }: Props) => (\n  <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n    {QUICK_PICK_OPTIONS.map((interval) => {\n      const isActive = currentInterval === interval;\n\n      return (\n        <Button\n          role=\"option\"\n          aria-selected={isActive}\n          key={interval}\n          variant={isActive ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => onSelect(interval)}\n        >\n          {interval}\n        </Button>\n      );\n    })}\n  </Stack>\n);\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Icon, Stack, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Props as FolderPickerProps, OldFolderPicker } from 'app/core/components/Select/OldFolderPicker';\nimport { PermissionLevelString, SearchQueryType } from 'app/types';\n\nimport { CustomAdd, FolderWarning } from '../../../../../core/components/Select/OldFolderPicker';\n\nexport interface Folder {\n  title: string;\n  uid: string;\n}\n\nexport interface RuleFolderPickerProps extends Omit<FolderPickerProps, 'initialTitle' | 'initialFolderId'> {\n  value?: Folder;\n  invalid?: boolean;\n}\n\nconst SlashesWarning = () => {\n  const styles = useStyles2(getStyles);\n  const onClick = () => window.open('https://github.com/grafana/grafana/issues/42947', '_blank');\n  return (\n    <Stack gap={0.5}>\n      <div className={styles.slashNotAllowed}>Folders with &apos;/&apos; character are not allowed.</div>\n      <Tooltip placement=\"top\" content={'Link to the Github issue'} theme=\"info\">\n        <Icon name=\"info-circle\" size=\"xs\" className={styles.infoIcon} onClick={onClick} />\n      </Tooltip>\n    </Stack>\n  );\n};\n\nexport const containsSlashes = (str: string): boolean => str.indexOf('/') !== -1;\n\nexport function RuleFolderPicker(props: RuleFolderPickerProps) {\n  const { value } = props;\n  const warningCondition = (folderName: string) => containsSlashes(folderName);\n\n  const folderWarning: FolderWarning = {\n    warningCondition: warningCondition,\n    warningComponent: SlashesWarning,\n  };\n\n  const customAdd: CustomAdd = {\n    disallowValues: true,\n    isAllowedValue: (value) => !containsSlashes(value),\n  };\n\n  return (\n    <OldFolderPicker\n      showRoot={false}\n      rootName=\"\"\n      allowEmpty={true}\n      initialFolderUid={value?.uid}\n      searchQueryType={SearchQueryType.AlertFolder}\n      {...props}\n      permissionLevel={PermissionLevelString.Edit}\n      customAdd={customAdd}\n      folderWarning={folderWarning}\n    />\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  slashNotAllowed: css({\n    color: theme.colors.warning.main,\n    fontSize: '12px',\n    marginBottom: '2px',\n  }),\n  infoIcon: css({\n    color: theme.colors.warning.main,\n    fontSize: '12px',\n    marginBottom: '2px',\n    cursor: 'pointer',\n  }),\n});\n","import { css } from '@emotion/css';\nimport { debounce, take, uniqueId } from 'lodash';\nimport { useCallback, useMemo, useState } from 'react';\nimport * as React from 'react';\nimport { FormProvider, useForm, useFormContext, Controller } from 'react-hook-form';\n\nimport { AppEvents, GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { selectors } from '@grafana/e2e-selectors';\nimport { AsyncSelect, Box, Button, Field, Input, Label, Modal, Stack, Text, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/services/context_srv';\nimport { createFolder } from 'app/features/manage-dashboards/state/actions';\nimport { AccessControlAction } from 'app/types';\nimport { RulerRuleGroupDTO, RulerRulesConfigDTO } from 'app/types/unified-alerting-dto';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { GRAFANA_RULER_CONFIG } from '../../api/featureDiscoveryApi';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../../utils/rule-form';\nimport { isGrafanaRulerRule } from '../../utils/rules';\nimport { ProvisioningBadge } from '../Provisioning';\nimport { evaluateEveryValidationOptions } from '../rules/EditRuleGroupModal';\n\nimport { EvaluationGroupQuickPick } from './EvaluationGroupQuickPick';\nimport { containsSlashes, Folder, RuleFolderPicker } from './RuleFolderPicker';\n\nexport const MAX_GROUP_RESULTS = 1000;\n\nexport const useFolderGroupOptions = (folderUid: string, enableProvisionedGroups: boolean) => {\n  // fetch the ruler rules from the database so we can figure out what other \"groups\" are already defined\n  // for our folders\n  const { isLoading: isLoadingRulerNamespace, currentData: rulerNamespace } =\n    alertRuleApi.endpoints.rulerNamespace.useQuery(\n      {\n        namespace: folderUid,\n        rulerConfig: GRAFANA_RULER_CONFIG,\n      },\n      {\n        skip: !folderUid,\n        refetchOnMountOrArgChange: true,\n      }\n    );\n\n  // There should be only one entry in the rulerNamespace object\n  // However it uses folder name as key, so to avoid fetching folder name, we use Object.values\n  const groupOptions = useMemo(() => {\n    if (!rulerNamespace) {\n      // still waiting for namespace information to be fetched\n      return [];\n    }\n\n    const folderGroups = Object.values(rulerNamespace).flat() ?? [];\n\n    return folderGroups\n      .map<SelectableValue<string>>((group) => {\n        const isProvisioned = isProvisionedGroup(group);\n        return {\n          label: group.name,\n          value: group.name,\n          description: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n          // we include provisioned folders, but disable the option to select them\n          isDisabled: !enableProvisionedGroups ? isProvisioned : false,\n          isProvisioned: isProvisioned,\n        };\n      })\n\n      .sort(sortByLabel);\n  }, [rulerNamespace, enableProvisionedGroups]);\n\n  return { groupOptions, loading: isLoadingRulerNamespace };\n};\n\nconst isProvisionedGroup = (group: RulerRuleGroupDTO) => {\n  return group.rules.some((rule) => isGrafanaRulerRule(rule) && Boolean(rule.grafana_alert.provenance) === true);\n};\n\nconst sortByLabel = (a: SelectableValue<string>, b: SelectableValue<string>) => {\n  return a.label?.localeCompare(b.label ?? '') || 0;\n};\n\nconst findGroupMatchingLabel = (group: SelectableValue<string>, query: string) => {\n  return group.label?.toLowerCase().includes(query.toLowerCase());\n};\n\nexport function FolderAndGroup({\n  groupfoldersForGrafana,\n  enableProvisionedGroups,\n}: {\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n  enableProvisionedGroups: boolean;\n}) {\n  const {\n    formState: { errors },\n    watch,\n    setValue,\n    control,\n  } = useFormContext<RuleFormValues>();\n\n  const styles = useStyles2(getStyles);\n\n  const folder = watch('folder');\n  const group = watch('group');\n\n  const { groupOptions, loading } = useFolderGroupOptions(folder?.uid ?? '', enableProvisionedGroups);\n\n  const [isCreatingFolder, setIsCreatingFolder] = useState(false);\n  const [isCreatingEvaluationGroup, setIsCreatingEvaluationGroup] = useState(false);\n\n  const onOpenFolderCreationModal = () => setIsCreatingFolder(true);\n  const onOpenEvaluationGroupCreationModal = () => setIsCreatingEvaluationGroup(true);\n\n  const handleFolderCreation = (folder: Folder) => {\n    resetGroup();\n    setValue('folder', folder);\n    setIsCreatingFolder(false);\n  };\n\n  const handleEvalGroupCreation = (groupName: string, evaluationInterval: string) => {\n    setValue('group', groupName);\n    setValue('evaluateEvery', evaluationInterval);\n    setIsCreatingEvaluationGroup(false);\n  };\n\n  const resetGroup = useCallback(() => {\n    setValue('group', '');\n  }, [setValue]);\n\n  const getOptions = useCallback(\n    async (query: string) => {\n      const results = query ? groupOptions.filter((group) => findGroupMatchingLabel(group, query)) : groupOptions;\n      return take(results, MAX_GROUP_RESULTS);\n    },\n    [groupOptions]\n  );\n\n  const debouncedSearch = useMemo(() => {\n    return debounce(getOptions, 300, { leading: true });\n  }, [getOptions]);\n\n  const defaultGroupValue = group ? { value: group, label: group } : undefined;\n\n  return (\n    <div className={styles.container}>\n      <Stack alignItems=\"center\">\n        {\n          <Field\n            label={\n              <Label htmlFor=\"folder\" description={'Select a folder to store your rule.'}>\n                Folder\n              </Label>\n            }\n            className={styles.formInput}\n            error={errors.folder?.message}\n            data-testid=\"folder-picker\"\n          >\n            <Stack direction=\"row\" alignItems=\"center\">\n              {(!isCreatingFolder && (\n                <>\n                  <Controller\n                    render={({ field: { ref, ...field } }) => (\n                      <div style={{ width: 420 }}>\n                        <RuleFolderPicker\n                          inputId=\"folder\"\n                          invalid={!!errors.folder?.message}\n                          {...field}\n                          enableReset={true}\n                          onChange={({ title, uid }) => {\n                            field.onChange({ title, uid });\n                            resetGroup();\n                          }}\n                        />\n                      </div>\n                    )}\n                    name=\"folder\"\n                    rules={{\n                      required: { value: true, message: 'Select a folder' },\n                    }}\n                  />\n                  <Text color=\"secondary\">or</Text>\n                  <Button\n                    onClick={onOpenFolderCreationModal}\n                    type=\"button\"\n                    icon=\"plus\"\n                    fill=\"outline\"\n                    variant=\"secondary\"\n                    disabled={!contextSrv.hasPermission(AccessControlAction.FoldersCreate)}\n                    data-testid={selectors.components.AlertRules.newFolderButton}\n                  >\n                    New folder\n                  </Button>\n                </>\n              )) || <div>Creating new folder...</div>}\n            </Stack>\n          </Field>\n        }\n        {isCreatingFolder && (\n          <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n        )}\n      </Stack>\n\n      {isCreatingFolder && (\n        <FolderCreationModal onCreate={handleFolderCreation} onClose={() => setIsCreatingFolder(false)} />\n      )}\n\n      <Stack alignItems=\"center\">\n        <div style={{ width: 420 }}>\n          <Field\n            label=\"Evaluation group and interval\"\n            data-testid=\"group-picker\"\n            description=\"Define how often the alert rule is evaluated.\"\n            className={styles.formInput}\n            error={errors.group?.message}\n            invalid={!!errors.group?.message}\n            htmlFor=\"group\"\n          >\n            <Controller\n              render={({ field: { ref, ...field }, fieldState }) => (\n                <AsyncSelect\n                  disabled={!folder || loading}\n                  inputId=\"group\"\n                  key={uniqueId()}\n                  {...field}\n                  onChange={(group) => {\n                    field.onChange(group.label ?? '');\n                  }}\n                  isLoading={loading}\n                  invalid={Boolean(folder) && !group && Boolean(fieldState.error)}\n                  loadOptions={debouncedSearch}\n                  cacheOptions\n                  loadingMessage={'Loading groups...'}\n                  defaultValue={defaultGroupValue}\n                  defaultOptions={groupOptions}\n                  getOptionLabel={(option: SelectableValue<string>) => (\n                    <div>\n                      <span>{option.label}</span>\n                      {option.isProvisioned && (\n                        <>\n                          {' '}\n                          <ProvisioningBadge />\n                        </>\n                      )}\n                    </div>\n                  )}\n                  placeholder={'Select an evaluation group...'}\n                />\n              )}\n              name=\"group\"\n              control={control}\n              rules={{\n                required: { value: true, message: 'Must enter a group name' },\n              }}\n            />\n          </Field>\n        </div>\n        <Box marginTop={4} gap={1} display={'flex'} alignItems={'center'}>\n          <Text color=\"secondary\">or</Text>\n          <Button\n            onClick={onOpenEvaluationGroupCreationModal}\n            type=\"button\"\n            icon=\"plus\"\n            fill=\"outline\"\n            variant=\"secondary\"\n            disabled={!folder}\n            data-testid={selectors.components.AlertRules.newEvaluationGroupButton}\n          >\n            New evaluation group\n          </Button>\n        </Box>\n        {isCreatingEvaluationGroup && (\n          <EvaluationGroupCreationModal\n            onCreate={handleEvalGroupCreation}\n            onClose={() => setIsCreatingEvaluationGroup(false)}\n            groupfoldersForGrafana={groupfoldersForGrafana}\n          />\n        )}\n      </Stack>\n    </div>\n  );\n}\n\nfunction FolderCreationModal({\n  onClose,\n  onCreate,\n}: {\n  onClose: () => void;\n  onCreate: (folder: Folder) => void;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n\n  const [title, setTitle] = useState('');\n  const onSubmit = async () => {\n    const newFolder = await createFolder({ title: title });\n    if (!newFolder.uid) {\n      appEvents.emit(AppEvents.alertError, ['Folder could not be created']);\n      return;\n    }\n\n    const folder: Folder = { title: newFolder.title, uid: newFolder.uid };\n    onCreate(folder);\n    appEvents.emit(AppEvents.alertSuccess, ['Folder Created', 'OK']);\n  };\n\n  const error = containsSlashes(title);\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={'New folder'} onDismiss={onClose} onClickBackdrop={onClose}>\n      <div className={styles.modalTitle}>Create a new folder to store your rule</div>\n\n      <form onSubmit={onSubmit}>\n        <Field\n          label={<Label htmlFor=\"folder\">Folder name</Label>}\n          error={\"The folder name can't contain slashes\"}\n          invalid={error}\n        >\n          <Input\n            data-testid={selectors.components.AlertRules.newFolderNameField}\n            autoFocus={true}\n            id=\"folderName\"\n            placeholder=\"Enter a name\"\n            value={title}\n            onChange={(e) => setTitle(e.currentTarget.value)}\n            className={styles.formInput}\n          />\n        </Field>\n\n        <Modal.ButtonRow>\n          <Button variant=\"secondary\" type=\"button\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            type=\"submit\"\n            disabled={!title || error}\n            data-testid={selectors.components.AlertRules.newFolderNameCreateButton}\n          >\n            Create\n          </Button>\n        </Modal.ButtonRow>\n      </form>\n    </Modal>\n  );\n}\n\nfunction EvaluationGroupCreationModal({\n  onClose,\n  onCreate,\n  groupfoldersForGrafana,\n}: {\n  onClose: () => void;\n  onCreate: (group: string, evaluationInterval: string) => void;\n  groupfoldersForGrafana?: RulerRulesConfigDTO | null;\n}): React.ReactElement {\n  const styles = useStyles2(getStyles);\n  const onSubmit = () => {\n    onCreate(getValues('group'), getValues('evaluateEvery'));\n  };\n\n  const { watch } = useFormContext<RuleFormValues>();\n\n  const evaluateEveryId = 'eval-every-input';\n  const evaluationGroupNameId = 'new-eval-group-name';\n  const [groupName, folderName] = watch(['group', 'folder.title']);\n\n  const groupRules =\n    (groupfoldersForGrafana && groupfoldersForGrafana[folderName]?.find((g) => g.name === groupName)?.rules) ?? [];\n\n  const onCancel = () => {\n    onClose();\n  };\n\n  const formAPI = useForm({\n    defaultValues: { group: '', evaluateEvery: DEFAULT_GROUP_EVALUATION_INTERVAL },\n    mode: 'onChange',\n    shouldFocusError: true,\n  });\n\n  const { register, handleSubmit, formState, setValue, getValues, watch: watchGroupFormValues } = formAPI;\n  const evaluationInterval = watchGroupFormValues('evaluateEvery');\n\n  const setEvaluationInterval = (interval: string) => {\n    setValue('evaluateEvery', interval, { shouldValidate: true });\n  };\n\n  return (\n    <Modal\n      className={styles.modal}\n      isOpen={true}\n      title={'New evaluation group'}\n      onDismiss={onCancel}\n      onClickBackdrop={onCancel}\n    >\n      <div className={styles.modalTitle}>Create a new evaluation group to use for this alert rule.</div>\n\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(() => onSubmit())}>\n          <Field\n            label={\n              <Label\n                htmlFor={evaluationGroupNameId}\n                description=\"A group evaluates all its rules over the same evaluation interval.\"\n              >\n                Evaluation group name\n              </Label>\n            }\n            error={formState.errors.group?.message}\n            invalid={Boolean(formState.errors.group)}\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newEvaluationGroupName}\n              className={styles.formInput}\n              autoFocus={true}\n              id={evaluationGroupNameId}\n              placeholder=\"Enter a name\"\n              {...register('group', { required: { value: true, message: 'Required.' } })}\n            />\n          </Field>\n\n          <Field\n            error={formState.errors.evaluateEvery?.message}\n            label={\n              <Label htmlFor={evaluateEveryId} description=\"How often all rules in the group are evaluated.\">\n                Evaluation interval\n              </Label>\n            }\n            invalid={Boolean(formState.errors.evaluateEvery)}\n          >\n            <Input\n              data-testid={selectors.components.AlertRules.newEvaluationGroupInterval}\n              className={styles.formInput}\n              id={evaluateEveryId}\n              placeholder={DEFAULT_GROUP_EVALUATION_INTERVAL}\n              {...register(\n                'evaluateEvery',\n                evaluateEveryValidationOptions<{ group: string; evaluateEvery: string }>(groupRules)\n              )}\n            />\n          </Field>\n\n          <EvaluationGroupQuickPick currentInterval={evaluationInterval} onSelect={setEvaluationInterval} />\n\n          <Modal.ButtonRow>\n            <Button variant=\"secondary\" type=\"button\" onClick={onCancel}>\n              Cancel\n            </Button>\n            <Button\n              type=\"submit\"\n              disabled={!formState.isValid}\n              data-testid={selectors.components.AlertRules.newEvaluationGroupCreate}\n            >\n              Create\n            </Button>\n          </Modal.ButtonRow>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    display: 'flex',\n    flexDirection: 'column',\n    alignItems: 'baseline',\n    maxWidth: `${theme.breakpoints.values.lg}px`,\n    justifyContent: 'space-between',\n  }),\n  formInput: css({\n    flexGrow: 1,\n  }),\n  modal: css({\n    width: `${theme.breakpoints.values.sm}px`,\n  }),\n  modalTitle: css({\n    color: theme.colors.text.secondary,\n    marginBottom: theme.spacing(2),\n  }),\n});\n","import { useMemo } from 'react';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Select } from '@grafana/ui';\nimport { SelectBaseProps } from '@grafana/ui/src/components/Select/types';\nimport { GrafanaAlertStateDecision } from 'app/types/unified-alerting-dto';\n\ntype Props = Omit<SelectBaseProps<GrafanaAlertStateDecision>, 'options'> & {\n  includeNoData: boolean;\n  includeError: boolean;\n};\n\nconst options: SelectableValue[] = [\n  { value: GrafanaAlertStateDecision.Alerting, label: 'Alerting' },\n  { value: GrafanaAlertStateDecision.NoData, label: 'No Data' },\n  { value: GrafanaAlertStateDecision.OK, label: 'Normal' },\n  { value: GrafanaAlertStateDecision.Error, label: 'Error' },\n  { value: GrafanaAlertStateDecision.KeepLast, label: 'Keep Last State' },\n];\n\nexport const GrafanaAlertStatePicker = ({ includeNoData, includeError, ...props }: Props) => {\n  const opts = useMemo(() => {\n    if (!includeNoData) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.NoData);\n    }\n    if (!includeError) {\n      return options.filter((opt) => opt.value !== GrafanaAlertStateDecision.Error);\n    }\n    return options;\n  }, [includeNoData, includeError]);\n  return <Select options={opts} {...props} />;\n};\n","import { Button, Stack } from '@grafana/ui';\n\nimport { formatPrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\n\ninterface Props {\n  selectedPendingPeriod: string;\n  groupEvaluationInterval: string;\n  onSelect: (interval: string) => void;\n}\n\nexport function getPendingPeriodQuickOptions(groupEvaluationInterval: string): string[] {\n  const groupEvaluationIntervalMillis = safeParsePrometheusDuration(groupEvaluationInterval);\n\n  // we generate the quick selection based on the group's evaluation interval\n  const options: number[] = [\n    0,\n    groupEvaluationIntervalMillis * 1,\n    groupEvaluationIntervalMillis * 2,\n    groupEvaluationIntervalMillis * 3,\n    groupEvaluationIntervalMillis * 4,\n    groupEvaluationIntervalMillis * 5,\n  ];\n\n  return options.map(formatPrometheusDuration);\n}\n\nexport function PendingPeriodQuickPick({ selectedPendingPeriod, groupEvaluationInterval, onSelect }: Props) {\n  const isQuickSelectionActive = (duration: string) => selectedPendingPeriod === duration;\n\n  const options = getPendingPeriodQuickOptions(groupEvaluationInterval);\n\n  return (\n    <Stack direction=\"row\" gap={0.5} role=\"listbox\">\n      {options.map((duration) => (\n        <Button\n          role=\"option\"\n          aria-selected={isQuickSelectionActive(duration)}\n          key={duration}\n          variant={isQuickSelectionActive(duration) ? 'primary' : 'secondary'}\n          size=\"sm\"\n          onClick={() => {\n            onSelect(duration);\n          }}\n        >\n          {duration === '0s' ? 'None' : duration}\n        </Button>\n      ))}\n    </Stack>\n  );\n}\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useState } from 'react';\nimport { Controller, RegisterOptions, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2, SelectableValue } from '@grafana/data';\nimport { Field, Icon, IconButton, Input, Label, Stack, Switch, Text, Tooltip, useStyles2 } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\nimport { isGrafanaAlertingRuleByType } from 'app/features/alerting/unified/utils/rules';\n\nimport { CombinedRuleGroup, CombinedRuleNamespace } from '../../../../../types/unified-alerting';\nimport { LogMessages, logInfo } from '../../Analytics';\nimport { useCombinedRuleNamespaces } from '../../hooks/useCombinedRuleNamespaces';\nimport { useUnifiedAlertingSelector } from '../../hooks/useUnifiedAlertingSelector';\nimport { RuleFormValues } from '../../types/rule-form';\nimport { GRAFANA_RULES_SOURCE_NAME } from '../../utils/datasource';\nimport { parsePrometheusDuration } from '../../utils/time';\nimport { CollapseToggle } from '../CollapseToggle';\nimport { EditCloudGroupModal } from '../rules/EditRuleGroupModal';\n\nimport { FolderAndGroup, useFolderGroupOptions } from './FolderAndGroup';\nimport { GrafanaAlertStatePicker } from './GrafanaAlertStatePicker';\nimport { NeedHelpInfo } from './NeedHelpInfo';\nimport { PendingPeriodQuickPick } from './PendingPeriodQuickPick';\nimport { RuleEditorSection } from './RuleEditorSection';\n\nexport const MIN_TIME_RANGE_STEP_S = 10; // 10 seconds\n\nconst forValidationOptions = (evaluateEvery: string): RegisterOptions<{ evaluateFor: string }> => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (value) => {\n    // parsePrometheusDuration does not allow 0 but does allow 0s\n    if (value === '0') {\n      return true;\n    }\n\n    try {\n      const millisFor = parsePrometheusDuration(value);\n\n      // 0 is a special value meaning for equals evaluation interval\n      if (millisFor === 0) {\n        return true;\n      }\n\n      try {\n        const millisEvery = parsePrometheusDuration(evaluateEvery);\n        return millisFor >= millisEvery\n          ? true\n          : t(\n              'alert-rule-form.evaluation-behaviour-for.validation',\n              'Pending period must be greater than or equal to the evaluation interval.'\n            );\n      } catch (err) {\n        // if we fail to parse \"every\", assume validation is successful, or the error messages\n        // will overlap in the UI\n        return true;\n      }\n    } catch (error) {\n      return error instanceof Error\n        ? error.message\n        : t('alert-rule-form.evaluation-behaviour-for.error-parsing', 'Failed to parse duration');\n    }\n  },\n});\n\nconst useIsNewGroup = (folder: string, group: string) => {\n  const { groupOptions } = useFolderGroupOptions(folder, false);\n\n  const groupIsInGroupOptions = useCallback(\n    (group_: string) => groupOptions.some((groupInList: SelectableValue<string>) => groupInList.label === group_),\n    [groupOptions]\n  );\n  return !groupIsInGroupOptions(group);\n};\n\nfunction FolderGroupAndEvaluationInterval({\n  evaluateEvery,\n  setEvaluateEvery,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const { watch, setValue, getValues } = useFormContext<RuleFormValues>();\n  const [isEditingGroup, setIsEditingGroup] = useState(false);\n\n  const [groupName, folderUid, folderName] = watch(['group', 'folder.uid', 'folder.title']);\n\n  const rulerRuleRequests = useUnifiedAlertingSelector((state) => state.rulerRules);\n  const groupfoldersForGrafana = rulerRuleRequests[GRAFANA_RULES_SOURCE_NAME];\n\n  const grafanaNamespaces = useCombinedRuleNamespaces(GRAFANA_RULES_SOURCE_NAME);\n  const existingNamespace = grafanaNamespaces.find((ns) => ns.uid === folderUid);\n  const existingGroup = existingNamespace?.groups.find((g) => g.name === groupName);\n\n  const isNewGroup = useIsNewGroup(folderUid ?? '', groupName);\n\n  useEffect(() => {\n    if (!isNewGroup && existingGroup?.interval) {\n      setEvaluateEvery(existingGroup.interval);\n    }\n  }, [setEvaluateEvery, isNewGroup, setValue, existingGroup]);\n\n  const closeEditGroupModal = (saved = false) => {\n    if (!saved) {\n      logInfo(LogMessages.leavingRuleGroupEdit);\n    }\n    setIsEditingGroup(false);\n  };\n\n  const onOpenEditGroupModal = () => setIsEditingGroup(true);\n\n  const editGroupDisabled = groupfoldersForGrafana?.loading || isNewGroup || !folderUid || !groupName;\n  const emptyNamespace: CombinedRuleNamespace = {\n    name: folderName,\n    rulesSource: GRAFANA_RULES_SOURCE_NAME,\n    groups: [],\n  };\n  const emptyGroup: CombinedRuleGroup = { name: groupName, interval: evaluateEvery, rules: [], totals: {} };\n\n  return (\n    <div>\n      <FolderAndGroup\n        groupfoldersForGrafana={groupfoldersForGrafana?.result}\n        enableProvisionedGroups={enableProvisionedGroups}\n      />\n      {folderName && isEditingGroup && (\n        <EditCloudGroupModal\n          namespace={existingNamespace ?? emptyNamespace}\n          group={existingGroup ?? emptyGroup}\n          folderUid={folderUid}\n          onClose={() => closeEditGroupModal()}\n          intervalEditOnly\n          hideFolder={true}\n        />\n      )}\n      {folderName && groupName && (\n        <div className={styles.evaluationContainer}>\n          <Stack direction=\"column\" gap={0}>\n            <div className={styles.marginTop}>\n              <Stack direction=\"column\" gap={1}>\n                {getValues('group') && getValues('evaluateEvery') && (\n                  <span>\n                    <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-group.text\" values={{ evaluateEvery }}>\n                      All rules in the selected group are evaluated every {{ evaluateEvery }}.\n                    </Trans>\n                    {!isNewGroup && (\n                      <IconButton\n                        name=\"pen\"\n                        aria-label=\"Edit\"\n                        disabled={editGroupDisabled}\n                        onClick={onOpenEditGroupModal}\n                      />\n                    )}\n                  </span>\n                )}\n              </Stack>\n            </div>\n          </Stack>\n        </div>\n      )}\n    </div>\n  );\n}\n\nfunction ForInput({ evaluateEvery }: { evaluateEvery: string }) {\n  const styles = useStyles2(getStyles);\n  const {\n    register,\n    formState: { errors },\n    setValue,\n    watch,\n  } = useFormContext<RuleFormValues>();\n\n  const evaluateForId = 'eval-for-input';\n  const currentPendingPeriod = watch('evaluateFor');\n\n  const setPendingPeriod = (pendingPeriod: string) => {\n    setValue('evaluateFor', pendingPeriod);\n  };\n\n  return (\n    <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n      <Field\n        label={\n          <Label\n            htmlFor={evaluateForId}\n            description='Period the threshold condition must be met to trigger the alert. Selecting \"None\" triggers the alert immediately once the condition is met.'\n          >\n            <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.pending-period\">Pending period</Trans>\n          </Label>\n        }\n        className={styles.inlineField}\n        error={errors.evaluateFor?.message}\n        invalid={Boolean(errors.evaluateFor?.message) ? true : undefined}\n        validationMessageHorizontalOverflow={true}\n      >\n        <Input id={evaluateForId} width={8} {...register('evaluateFor', forValidationOptions(evaluateEvery))} />\n      </Field>\n      <PendingPeriodQuickPick\n        selectedPendingPeriod={currentPendingPeriod}\n        groupEvaluationInterval={evaluateEvery}\n        onSelect={setPendingPeriod}\n      />\n    </Stack>\n  );\n}\n\nfunction NeedHelpInfoForConfigureNoDataError() {\n  const docsLink =\n    'https://grafana.com/docs/grafana/latest/alerting/alerting-rules/create-grafana-managed-rule/#configure-no-data-and-error-handling';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.info-help.text\">\n          Define the alert behavior when the evaluation fails or the query returns no data.\n        </Trans>\n      </Text>\n      <NeedHelpInfo\n        contentText=\"These settings can help mitigate temporary data source issues, preventing alerts from unintentionally firing due to lack of data, errors, or timeouts.\"\n        externalLink={docsLink}\n        linkText={`Read more about this option`}\n        title=\"Configure no data and error handling\"\n      />\n    </Stack>\n  );\n}\n\nfunction getDescription() {\n  const docsLink = 'https://grafana.com/docs/grafana/latest/alerting/fundamentals/alert-rules/rule-evaluation/';\n\n  return (\n    <Stack direction=\"row\" gap={0.5} alignItems=\"center\">\n      <Text variant=\"bodySmall\" color=\"secondary\">\n        <Trans i18nKey=\"alert-rule-form.evaluation-behaviour.description.text\">\n          Define how the alert rule is evaluated.\n        </Trans>\n      </Text>\n      <NeedHelpInfo\n        contentText={\n          <>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description1\">\n                Evaluation groups are containers for evaluating alert and recording rules.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description2\">\n                An evaluation group defines an evaluation interval - how often a rule is evaluated. Alert rules within\n                the same evaluation group are evaluated over the same evaluation interval.\n              </Trans>\n            </p>\n            <p>\n              <Trans i18nKey=\"alert-rule-form.evaluation-behaviour-description3\">\n                Pending period specifies how long the threshold condition must be met before the alert starts firing.\n                This option helps prevent alerts from being triggered by temporary issues.\n              </Trans>\n            </p>\n          </>\n        }\n        externalLink={docsLink}\n        linkText={`Read about evaluation and alert states`}\n        title=\"Alert rule evaluation\"\n      />\n    </Stack>\n  );\n}\n\nexport function GrafanaEvaluationBehavior({\n  evaluateEvery,\n  setEvaluateEvery,\n  existing,\n  enableProvisionedGroups,\n}: {\n  evaluateEvery: string;\n  setEvaluateEvery: (value: string) => void;\n  existing: boolean;\n  enableProvisionedGroups: boolean;\n}) {\n  const styles = useStyles2(getStyles);\n  const [showErrorHandling, setShowErrorHandling] = useState(false);\n\n  const { watch, setValue } = useFormContext<RuleFormValues>();\n\n  const isPaused = watch('isPaused');\n  const type = watch('type');\n\n  const isGrafanaAlertingRule = isGrafanaAlertingRuleByType(type);\n\n  return (\n    // TODO remove \"and alert condition\" for recording rules\n    <RuleEditorSection stepNo={3} title=\"Set evaluation behavior\" description={getDescription()}>\n      <Stack direction=\"column\" justify-content=\"flex-start\" align-items=\"flex-start\">\n        <FolderGroupAndEvaluationInterval\n          setEvaluateEvery={setEvaluateEvery}\n          evaluateEvery={evaluateEvery}\n          enableProvisionedGroups={enableProvisionedGroups}\n        />\n        {/* Show the pending period input only for Grafana alerting rules */}\n        {isGrafanaAlertingRule && <ForInput evaluateEvery={evaluateEvery} />}\n\n        {existing && (\n          <Field htmlFor=\"pause-alert-switch\">\n            <Controller\n              render={() => (\n                <Stack gap={1} direction=\"row\" alignItems=\"center\">\n                  <Switch\n                    id=\"pause-alert\"\n                    onChange={(value) => {\n                      setValue('isPaused', value.currentTarget.checked);\n                    }}\n                    value={Boolean(isPaused)}\n                  />\n                  <label htmlFor=\"pause-alert\" className={styles.switchLabel}>\n                    <Trans i18nKey=\"alert-rule-form.pause\">Pause evaluation</Trans>\n                    <Tooltip placement=\"top\" content=\"Turn on to pause evaluation for this alert rule.\" theme={'info'}>\n                      <Icon tabIndex={0} name=\"info-circle\" size=\"sm\" className={styles.infoIcon} />\n                    </Tooltip>\n                  </label>\n                </Stack>\n              )}\n              name=\"isPaused\"\n            />\n          </Field>\n        )}\n      </Stack>\n      {isGrafanaAlertingRule && (\n        <>\n          <CollapseToggle\n            isCollapsed={!showErrorHandling}\n            onToggle={(collapsed) => setShowErrorHandling(!collapsed)}\n            text=\"Configure no data and error handling\"\n          />\n          {showErrorHandling && (\n            <>\n              <NeedHelpInfoForConfigureNoDataError />\n              <Field htmlFor=\"no-data-state-input\" label=\"Alert state if no data or all values are null\">\n                <Controller\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <GrafanaAlertStatePicker\n                      {...field}\n                      inputId=\"no-data-state-input\"\n                      width={42}\n                      includeNoData={true}\n                      includeError={false}\n                      onChange={(value) => onChange(value?.value)}\n                    />\n                  )}\n                  name=\"noDataState\"\n                />\n              </Field>\n              <Field htmlFor=\"exec-err-state-input\" label=\"Alert state if execution error or timeout\">\n                <Controller\n                  render={({ field: { onChange, ref, ...field } }) => (\n                    <GrafanaAlertStatePicker\n                      {...field}\n                      inputId=\"exec-err-state-input\"\n                      width={42}\n                      includeNoData={false}\n                      includeError={true}\n                      onChange={(value) => onChange(value?.value)}\n                    />\n                  )}\n                  name=\"execErrState\"\n                />\n              </Field>\n            </>\n          )}\n        </>\n      )}\n    </RuleEditorSection>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  inlineField: css({\n    marginBottom: 0,\n  }),\n  evaluateLabel: css({\n    marginRight: theme.spacing(1),\n  }),\n  evaluationContainer: css({\n    color: theme.colors.text.secondary,\n    maxWidth: `${theme.breakpoints.values.sm}px`,\n    fontSize: theme.typography.size.sm,\n  }),\n  intervalChangedLabel: css({\n    marginBottom: theme.spacing(1),\n  }),\n  warningIcon: css({\n    justifySelf: 'center',\n    marginRight: theme.spacing(1),\n    color: theme.colors.warning.text,\n  }),\n  infoIcon: css({\n    marginLeft: '10px',\n  }),\n  warningMessage: css({\n    color: theme.colors.warning.text,\n  }),\n  bold: css({\n    fontWeight: 'bold',\n  }),\n  alignInterval: css({\n    marginTop: theme.spacing(1),\n    marginLeft: `-${theme.spacing(1)}`,\n  }),\n  marginTop: css({\n    marginTop: theme.spacing(1),\n  }),\n  switchLabel: css({\n    color: theme.colors.text.primary,\n    cursor: 'pointer',\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { config } from '@grafana/runtime';\nimport { Alert } from '@grafana/ui';\n\nconst EvaluationIntervalLimitExceeded = () => (\n  <Alert severity=\"warning\" title=\"Global evaluation interval limit exceeded\">\n    A minimum evaluation interval of <strong>{config.unifiedAlerting.minInterval}</strong> has been configured in\n    Grafana.\n    <br />\n    Please contact the administrator to configure a lower interval.\n  </Alert>\n);\n\nexport { EvaluationIntervalLimitExceeded };\n","import { css } from '@emotion/css';\nimport { compact } from 'lodash';\nimport { useMemo } from 'react';\nimport { FieldValues, FormProvider, RegisterOptions, useForm, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, Badge, Button, Field, Input, Label, LinkButton, Modal, Stack, useStyles2 } from '@grafana/ui';\nimport { useAppNotification } from 'app/core/copy/appNotification';\nimport { dispatch } from 'app/store/store';\nimport { CombinedRuleGroup, CombinedRuleNamespace, RuleGroupIdentifier } from 'app/types/unified-alerting';\nimport { RulerRuleDTO } from 'app/types/unified-alerting-dto';\n\nimport {\n  useMoveRuleGroup,\n  useRenameRuleGroup,\n  useUpdateRuleGroupConfiguration,\n} from '../../hooks/ruleGroup/useUpdateRuleGroup';\nimport { anyOfRequestState } from '../../hooks/useAsync';\nimport { fetchRulerRulesAction, rulesInSameGroupHaveInvalidFor } from '../../state/actions';\nimport { checkEvaluationIntervalGlobalLimit } from '../../utils/config';\nimport { GRAFANA_RULES_SOURCE_NAME, getRulesSourceName } from '../../utils/datasource';\nimport { stringifyErrorLike } from '../../utils/misc';\nimport { DEFAULT_GROUP_EVALUATION_INTERVAL } from '../../utils/rule-form';\nimport { AlertInfo, getAlertInfo, isGrafanaOrDataSourceRecordingRule } from '../../utils/rules';\nimport { formatPrometheusDuration, parsePrometheusDuration, safeParsePrometheusDuration } from '../../utils/time';\nimport { DynamicTable, DynamicTableColumnProps, DynamicTableItemProps } from '../DynamicTable';\nimport { EvaluationIntervalLimitExceeded } from '../InvalidIntervalWarning';\nimport { decodeGrafanaNamespace, encodeGrafanaNamespace } from '../expressions/util';\nimport { EvaluationGroupQuickPick } from '../rule-editor/EvaluationGroupQuickPick';\nimport { MIN_TIME_RANGE_STEP_S } from '../rule-editor/GrafanaEvaluationBehavior';\n\nconst ITEMS_PER_PAGE = 10;\n\nfunction ForBadge({ message, error }: { message: string; error?: boolean }) {\n  if (error) {\n    return <Badge color=\"red\" icon=\"exclamation-circle\" text={'Error'} tooltip={message} />;\n  } else {\n    return <Badge color=\"orange\" icon=\"exclamation-triangle\" text={'Unknown'} tooltip={message} />;\n  }\n}\n\nconst isValidEvaluation = (evaluation: string) => {\n  try {\n    const duration = parsePrometheusDuration(evaluation);\n\n    if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n      return false;\n    }\n\n    if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n      return false;\n    }\n\n    return true;\n  } catch (error) {\n    return false;\n  }\n};\n\ntype AlertsWithForTableColumnProps = DynamicTableColumnProps<AlertInfo>;\ntype AlertsWithForTableProps = DynamicTableItemProps<AlertInfo>;\n\nexport const RulesForGroupTable = ({ rulesWithoutRecordingRules }: { rulesWithoutRecordingRules: RulerRuleDTO[] }) => {\n  const styles = useStyles2(getStyles);\n\n  const { watch } = useFormContext<FormValues>();\n  const currentInterval = watch('groupInterval');\n  const unknownCurrentInterval = !Boolean(currentInterval);\n\n  const rows: AlertsWithForTableProps[] = rulesWithoutRecordingRules\n    .slice()\n    .map((rule: RulerRuleDTO, index) => ({\n      id: index,\n      data: getAlertInfo(rule, currentInterval),\n    }))\n    .sort(\n      (alert1, alert2) =>\n        safeParsePrometheusDuration(alert1.data.forDuration ?? '') -\n        safeParsePrometheusDuration(alert2.data.forDuration ?? '')\n    );\n\n  const columns: AlertsWithForTableColumnProps[] = useMemo(() => {\n    return [\n      {\n        id: 'alertName',\n        label: 'Alert',\n        renderCell: ({ data: { alertName } }) => {\n          return <>{alertName}</>;\n        },\n        size: '330px',\n      },\n      {\n        id: 'for',\n        label: 'Pending period',\n        renderCell: ({ data: { forDuration } }) => {\n          return <>{forDuration}</>;\n        },\n        size: 0.5,\n      },\n      {\n        id: 'numberEvaluations',\n        label: '#Eval',\n        renderCell: ({ data: { evaluationsToFire: numberEvaluations } }) => {\n          if (unknownCurrentInterval) {\n            return <ForBadge message=\"#Evaluations not available.\" />;\n          } else {\n            if (!isValidEvaluation(currentInterval)) {\n              return <ForBadge message={'Invalid evaluation interval format'} error />;\n            }\n            if (numberEvaluations === 0) {\n              return (\n                <ForBadge message=\"Invalid 'For' value: it should be greater or equal to evaluation interval.\" error />\n              );\n            } else {\n              return <>{numberEvaluations}</>;\n            }\n          }\n        },\n        size: 0.4,\n      },\n    ];\n  }, [currentInterval, unknownCurrentInterval]);\n\n  return (\n    <div className={styles.tableWrapper}>\n      <DynamicTable items={rows} cols={columns} pagination={{ itemsPerPage: ITEMS_PER_PAGE }} />\n    </div>\n  );\n};\n\ninterface FormValues {\n  namespaceName: string;\n  groupName: string;\n  groupInterval: string;\n}\n\nexport const evaluateEveryValidationOptions = <T extends FieldValues>(rules: RulerRuleDTO[]): RegisterOptions<T> => ({\n  required: {\n    value: true,\n    message: 'Required.',\n  },\n  validate: (evaluateEvery: string) => {\n    try {\n      const duration = parsePrometheusDuration(evaluateEvery);\n\n      if (duration < MIN_TIME_RANGE_STEP_S * 1000) {\n        return `Cannot be less than ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n\n      if (duration % (MIN_TIME_RANGE_STEP_S * 1000) !== 0) {\n        return `Must be a multiple of ${MIN_TIME_RANGE_STEP_S} seconds.`;\n      }\n      if (rulesInSameGroupHaveInvalidFor(rules, evaluateEvery).length === 0) {\n        return true;\n      } else {\n        const rulePendingPeriods = rules.map((rule) => {\n          const { forDuration } = getAlertInfo(rule, evaluateEvery);\n          return forDuration ? safeParsePrometheusDuration(forDuration) : null;\n        });\n        const largestPendingPeriod = Math.min(\n          ...rulePendingPeriods.filter((period): period is number => period !== null)\n        );\n        return `Evaluation interval should be smaller or equal to \"pending period\" values for existing rules in this rule group. Choose a value smaller than or equal to \"${formatPrometheusDuration(largestPendingPeriod)}\".`;\n      }\n    } catch (error) {\n      return error instanceof Error ? error.message : 'Failed to parse duration';\n    }\n  },\n});\n\nexport interface ModalProps {\n  namespace: CombinedRuleNamespace;\n  group: CombinedRuleGroup;\n  onClose: (saved?: boolean) => void;\n  intervalEditOnly?: boolean;\n  folderUrl?: string;\n  folderUid?: string;\n  hideFolder?: boolean;\n}\n\nexport function EditCloudGroupModal(props: ModalProps): React.ReactElement {\n  const { namespace, group, onClose, intervalEditOnly, folderUid } = props;\n\n  const styles = useStyles2(getStyles);\n  const notifyApp = useAppNotification();\n\n  /**\n   * This modal can take 3 different actions, depending on what fields were updated.\n   *\n   *  1. update the rule group details without renaming either the namespace or group\n   *  2. rename the rule group, but keeping it in the same namespace\n   *  3. move the rule group to a new namespace, optionally with a different group name\n   */\n  const [updateRuleGroup, updateRuleGroupState] = useUpdateRuleGroupConfiguration();\n  const [renameRuleGroup, renameRuleGroupState] = useRenameRuleGroup();\n  const [moveRuleGroup, moveRuleGroupState] = useMoveRuleGroup();\n\n  const { loading, error } = anyOfRequestState(updateRuleGroupState, moveRuleGroupState, renameRuleGroupState);\n\n  const defaultValues = useMemo(\n    (): FormValues => ({\n      namespaceName: decodeGrafanaNamespace(namespace).name,\n      groupName: group.name,\n      groupInterval: group.interval ?? DEFAULT_GROUP_EVALUATION_INTERVAL,\n    }),\n    [namespace, group.name, group.interval]\n  );\n\n  const rulesSourceName = getRulesSourceName(namespace.rulesSource);\n  const isGrafanaManagedGroup = rulesSourceName === GRAFANA_RULES_SOURCE_NAME;\n\n  // parse any parent folders the alert rule might be stored in\n  const nestedFolderParents = decodeGrafanaNamespace(namespace).parents;\n\n  const nameSpaceLabel = isGrafanaManagedGroup ? 'Folder' : 'Namespace';\n\n  const onSubmit = async (values: FormValues) => {\n    const ruleGroupIdentifier: RuleGroupIdentifier = {\n      dataSourceName: rulesSourceName,\n      groupName: group.name,\n      namespaceName: isGrafanaManagedGroup ? folderUid! : namespace.name,\n    };\n\n    // make sure that when dealing with a nested folder for Grafana managed rules we encode the folder properly\n    const updatedNamespaceName = isGrafanaManagedGroup\n      ? encodeGrafanaNamespace(values.namespaceName, nestedFolderParents)\n      : values.namespaceName;\n    const updatedGroupName = values.groupName;\n    const updatedInterval = values.groupInterval;\n\n    // GMA alert rules cannot be moved to another folder, we currently do not support it but it should be doable (with caveats).\n    const shouldMove = isGrafanaManagedGroup ? false : updatedNamespaceName !== ruleGroupIdentifier.namespaceName;\n    const shouldRename = updatedGroupName !== ruleGroupIdentifier.groupName;\n\n    try {\n      if (shouldMove) {\n        await moveRuleGroup.execute(ruleGroupIdentifier, updatedNamespaceName, updatedGroupName, updatedInterval);\n      } else if (shouldRename) {\n        await renameRuleGroup.execute(ruleGroupIdentifier, updatedGroupName, updatedInterval);\n      } else {\n        await updateRuleGroup.execute(ruleGroupIdentifier, updatedInterval);\n      }\n      onClose(true);\n      await dispatch(fetchRulerRulesAction({ rulesSourceName }));\n    } catch (_error) {} // React hook form will handle errors\n  };\n\n  const formAPI = useForm<FormValues>({\n    mode: 'onBlur',\n    defaultValues,\n    shouldFocusError: true,\n  });\n\n  const {\n    handleSubmit,\n    register,\n    watch,\n    formState: { isDirty, errors, isValid },\n    setValue,\n    getValues,\n  } = formAPI;\n\n  const onInvalid = () => {\n    notifyApp.error('There are errors in the form. Correct the errors and retry.');\n  };\n\n  const rulesWithoutRecordingRules = compact(\n    group.rules.map((r) => r.rulerRule).filter((rule) => !isGrafanaOrDataSourceRecordingRule(rule))\n  );\n  const hasSomeNoRecordingRules = rulesWithoutRecordingRules.length > 0;\n  const modalTitle =\n    intervalEditOnly || isGrafanaManagedGroup ? 'Edit evaluation group' : 'Edit namespace or evaluation group';\n\n  return (\n    <Modal className={styles.modal} isOpen={true} title={modalTitle} onDismiss={onClose} onClickBackdrop={onClose}>\n      <FormProvider {...formAPI}>\n        <form onSubmit={handleSubmit(onSubmit, onInvalid)} key={JSON.stringify(defaultValues)}>\n          <>\n            {!props.hideFolder && (\n              <Stack gap={1} alignItems={'center'}>\n                <Field\n                  className={styles.formInput}\n                  label={\n                    <Label\n                      htmlFor=\"namespaceName\"\n                      description={\n                        !isGrafanaManagedGroup &&\n                        'Change the current namespace name. Moving groups between namespaces is not supported'\n                      }\n                    >\n                      {nameSpaceLabel}\n                    </Label>\n                  }\n                  invalid={Boolean(errors.namespaceName) ? true : undefined}\n                  error={errors.namespaceName?.message}\n                >\n                  <Input\n                    id=\"namespaceName\"\n                    readOnly={intervalEditOnly || isGrafanaManagedGroup}\n                    {...register('namespaceName', {\n                      required: 'Namespace name is required.',\n                    })}\n                  />\n                </Field>\n                {isGrafanaManagedGroup && props.folderUrl && (\n                  <LinkButton\n                    href={props.folderUrl}\n                    title=\"Go to folder\"\n                    variant=\"secondary\"\n                    icon=\"folder-open\"\n                    target=\"_blank\"\n                  />\n                )}\n              </Stack>\n            )}\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupName\"\n                  description=\"A group evaluates all its rules over the same evaluation interval.\"\n                >\n                  Evaluation group\n                </Label>\n              }\n              invalid={!!errors.groupName}\n              error={errors.groupName?.message}\n            >\n              <Input\n                autoFocus={true}\n                id=\"groupName\"\n                readOnly={intervalEditOnly}\n                {...register('groupName', {\n                  required: 'Evaluation group name is required.',\n                })}\n              />\n            </Field>\n            <Field\n              label={\n                <Label\n                  htmlFor=\"groupInterval\"\n                  description=\"How often is the rule evaluated. Applies to every rule within the group.\"\n                >\n                  <Stack gap={0.5}>Evaluation interval</Stack>\n                </Label>\n              }\n              invalid={Boolean(errors.groupInterval) ? true : undefined}\n              error={errors.groupInterval?.message}\n            >\n              <Stack direction=\"column\">\n                <Input\n                  id=\"groupInterval\"\n                  placeholder={DEFAULT_GROUP_EVALUATION_INTERVAL}\n                  {...register('groupInterval', evaluateEveryValidationOptions(rulesWithoutRecordingRules))}\n                />\n                <EvaluationGroupQuickPick\n                  currentInterval={getValues('groupInterval')}\n                  onSelect={(value) => setValue('groupInterval', value, { shouldValidate: true, shouldDirty: true })}\n                />\n              </Stack>\n            </Field>\n\n            {/* if we're dealing with a Grafana-managed group, check if the evaluation interval is valid / permitted */}\n            {isGrafanaManagedGroup && checkEvaluationIntervalGlobalLimit(watch('groupInterval')).exceedsLimit && (\n              <EvaluationIntervalLimitExceeded />\n            )}\n\n            {!hasSomeNoRecordingRules && <div>This group does not contain alert rules.</div>}\n            {hasSomeNoRecordingRules && (\n              <>\n                <div>List of rules that belong to this group</div>\n                <div className={styles.evalRequiredLabel}>\n                  #Eval column represents the number of evaluations needed before alert starts firing.\n                </div>\n                <RulesForGroupTable rulesWithoutRecordingRules={rulesWithoutRecordingRules} />\n              </>\n            )}\n            {error && <Alert title={'Failed to update rule group'}>{stringifyErrorLike(error)}</Alert>}\n            <div className={styles.modalButtons}>\n              <Modal.ButtonRow>\n                <Button\n                  variant=\"secondary\"\n                  type=\"button\"\n                  disabled={loading}\n                  onClick={() => onClose(false)}\n                  fill=\"outline\"\n                >\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={!isDirty || !isValid || loading}>\n                  {loading ? 'Saving...' : 'Save'}\n                </Button>\n              </Modal.ButtonRow>\n            </div>\n          </>\n        </form>\n      </FormProvider>\n    </Modal>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  modal: css({\n    maxWidth: '560px',\n  }),\n  modalButtons: css({\n    top: '-24px',\n    position: 'relative',\n  }),\n  formInput: css({\n    flex: 1,\n  }),\n  tableWrapper: css({\n    marginTop: theme.spacing(2),\n    marginBottom: theme.spacing(2),\n    height: '100%',\n  }),\n  evalRequiredLabel: css({\n    fontSize: theme.typography.bodySmall.fontSize,\n  }),\n});\n","import { t } from 'app/core/internationalization';\nimport { RuleGroupIdentifier } from 'app/types/unified-alerting';\n\nimport { alertRuleApi } from '../../api/alertRuleApi';\nimport { notFoundToNullOrThrow } from '../../api/util';\nimport {\n  updateRuleGroupAction,\n  moveRuleGroupAction,\n  renameRuleGroupAction,\n  reorderRulesInRuleGroupAction,\n} from '../../reducers/ruler/ruleGroups';\nimport { isGrafanaRulesSource } from '../../utils/datasource';\nimport { useAsync } from '../useAsync';\n\nimport { useProduceNewRuleGroup } from './useProduceNewRuleGroup';\n\nconst ruleUpdateSuccessMessage = () => t('alerting.rule-groups.update.success', 'Successfully updated rule group');\n\n/**\n * Update an existing rule group, currently only supports updating the interval.\n * Use \"useRenameRuleGroup\" or \"useMoveRuleGroup\" for updating the namespace or group name.\n */\nexport function useUpdateRuleGroupConfiguration() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, interval: string) => {\n    const { namespaceName } = ruleGroup;\n\n    const action = updateRuleGroupAction({ interval });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n    return upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage: ruleUpdateSuccessMessage() },\n    }).unwrap();\n  });\n}\n\n/**\n * Move a rule group to either another namespace with (optionally) a different name, throws if the action\n * targets an existing rule group.\n * Optionally, update the rule group evaluation interval.\n */\nexport function useMoveRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [fetchRuleGroup] = alertRuleApi.endpoints.getRuleGroupForNamespace.useLazyQuery();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n  const [deleteRuleGroup] = alertRuleApi.endpoints.deleteRuleGroupFromNamespace.useMutation();\n\n  // @TODO maybe add where we moved it from and to for additional peace of mind\n  const successMessage = t('alerting.rule-groups.move.success', 'Successfully moved rule group');\n\n  return useAsync(\n    async (ruleGroup: RuleGroupIdentifier, namespaceName: string, groupName?: string, interval?: string) => {\n      // we could technically support moving rule groups to another folder, though we don't have a \"move\" wizard yet.\n      if (isGrafanaRulesSource(ruleGroup.dataSourceName)) {\n        throw new Error('Moving a Grafana-managed rule group to another folder is currently not supported.');\n      }\n\n      const action = moveRuleGroupAction({ newNamespaceName: namespaceName, groupName, interval });\n      const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n      const oldNamespace = ruleGroup.namespaceName;\n      const targetNamespace = action.payload.newNamespaceName;\n\n      const oldGroupName = ruleGroup.groupName;\n      const targetGroupName = action.payload.groupName;\n\n      const isGroupRenamed = Boolean(targetGroupName) && oldGroupName !== targetGroupName;\n\n      // if we're also renaming the group, check if the target does not already exist\n      if (targetGroupName && isGroupRenamed) {\n        const targetGroup = await fetchRuleGroup({\n          rulerConfig,\n          namespace: targetNamespace,\n          group: targetGroupName,\n          // since this could throw 404\n          notificationOptions: { showErrorAlert: false },\n        })\n          .unwrap()\n          .catch(notFoundToNullOrThrow);\n\n        if (targetGroup?.rules?.length) {\n          throw new Error('Target group already has rules, merging rule groups is currently not supported.');\n        }\n      }\n\n      // create the new group in the target namespace\n      // ⚠️ it's important to do this before we remove the old group – better to have two groups than none if one of these requests fails\n      await upsertRuleGroup({\n        rulerConfig,\n        namespace: targetNamespace,\n        payload: newRuleGroupDefinition,\n        notificationOptions: { successMessage },\n      }).unwrap();\n\n      // now remove the old one\n      const result = await deleteRuleGroup({\n        rulerConfig,\n        namespace: oldNamespace,\n        group: oldGroupName,\n        notificationOptions: { showSuccessAlert: false },\n      }).unwrap();\n\n      return result;\n    }\n  );\n}\n\n/**\n * Rename a rule group but keep it within the same namespace, throws if the action targets an existing rule group.\n * Optionally, update the rule group evaluation interval.\n */\nexport function useRenameRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [fetchRuleGroup] = alertRuleApi.endpoints.getRuleGroupForNamespace.useLazyQuery();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n  const [deleteRuleGroup] = alertRuleApi.endpoints.deleteRuleGroupFromNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, groupName: string, interval?: string) => {\n    const action = renameRuleGroupAction({ groupName, interval });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n    const oldGroupName = ruleGroup.groupName;\n    const newGroupName = action.payload.groupName;\n    const namespaceName = ruleGroup.namespaceName;\n\n    const successMessage = t('alerting.rule-groups.rename.success', 'Successfully renamed rule group');\n\n    // check if the target group exists\n    const targetGroup = await fetchRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      group: newGroupName,\n      // since this could throw 404\n      notificationOptions: { showErrorAlert: false },\n    })\n      .unwrap()\n      .catch(notFoundToNullOrThrow);\n\n    if (targetGroup?.rules?.length) {\n      throw new Error('Target group has existing rules, merging rule groups is currently not supported.');\n    }\n\n    // if the target group does not exist, create the new group\n    // ⚠️ it's important to do this before we remove the old group – better to have two groups than none if one of these requests fails\n    const result = await upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage },\n    }).unwrap();\n\n    // now delete the group we renamed\n    await deleteRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      group: oldGroupName,\n      notificationOptions: { showSuccessAlert: false },\n    }).unwrap();\n\n    return result;\n  });\n}\n\n/**\n * Reorder rules within an existing rule group. Pass in an array of swap operations Array<[oldIndex, newIndex]>.\n * This prevents rules from accidentally being updated and only allows indices to be moved around.\n */\nexport function useReorderRuleForRuleGroup() {\n  const [produceNewRuleGroup] = useProduceNewRuleGroup();\n  const [upsertRuleGroup] = alertRuleApi.endpoints.upsertRuleGroupForNamespace.useMutation();\n\n  return useAsync(async (ruleGroup: RuleGroupIdentifier, swaps: Array<[number, number]>) => {\n    const { namespaceName } = ruleGroup;\n\n    const action = reorderRulesInRuleGroupAction({ swaps });\n    const { newRuleGroupDefinition, rulerConfig } = await produceNewRuleGroup(ruleGroup, action);\n\n    return upsertRuleGroup({\n      rulerConfig,\n      namespace: namespaceName,\n      payload: newRuleGroupDefinition,\n      notificationOptions: { successMessage: ruleUpdateSuccessMessage() },\n    }).unwrap();\n  });\n}\n","import { useMemo } from 'react';\n\nimport { getRulesAccess } from './access-control';\n\nexport function useRulesAccess() {\n  return useMemo(() => getRulesAccess(), []);\n}\n"],"names":["MAX_CONTACT_POINTS_RENDERED","sleep","ms","resolve","LOADING_SPINNER_DURATION","ContactPointSelector","selectProps","showRefreshButton","selectedContactPointName","selectedAlertmanager","contactPoints","isLoading","error","refetch","loaderSpinning","setLoaderSpinning","styles","getStyles","options","contactPoint","matchedContactPoint","option","onClickRefresh","rotation","theme","MIN_INTERVAl","QUICK_PICK_OPTIONS","minInterval","DEFAULT_INTERVAL_OPTIONS","minEvaluationIntervalMillis","head","millis","tail","index","lastInterval","multiplier","EvaluationGroupQuickPick","currentInterval","onSelect","interval","isActive","SlashesWarning","onClick","Stack","Tooltip","Icon","containsSlashes","str","RuleFolderPicker","props","value","folderWarning","folderName","customAdd","OldFolderPicker","MAX_GROUP_RESULTS","useFolderGroupOptions","folderUid","enableProvisionedGroups","isLoadingRulerNamespace","rulerNamespace","alertRuleApi","group","isProvisioned","isProvisionedGroup","sortByLabel","rule","a","b","findGroupMatchingLabel","query","FolderAndGroup","groupfoldersForGrafana","errors","watch","setValue","control","folder","groupOptions","loading","isCreatingFolder","setIsCreatingFolder","isCreatingEvaluationGroup","setIsCreatingEvaluationGroup","onOpenFolderCreationModal","onOpenEvaluationGroupCreationModal","handleFolderCreation","resetGroup","handleEvalGroupCreation","groupName","evaluationInterval","getOptions","results","debouncedSearch","defaultGroupValue","Field","Label","ref","field","title","uid","Text","Button","selectors","FolderCreationModal","fieldState","Provisioning","Box","EvaluationGroupCreationModal","onClose","onCreate","setTitle","onSubmit","newFolder","Modal","Input","e","getValues","evaluateEveryId","evaluationGroupNameId","groupRules","g","onCancel","formAPI","register","handleSubmit","formState","watchGroupFormValues","setEvaluationInterval","GrafanaAlertStatePicker","includeNoData","includeError","opts","opt","Select","getPendingPeriodQuickOptions","groupEvaluationInterval","groupEvaluationIntervalMillis","PendingPeriodQuickPick","selectedPendingPeriod","isQuickSelectionActive","duration","MIN_TIME_RANGE_STEP_S","forValidationOptions","evaluateEvery","millisFor","millisEvery","useIsNewGroup","group_","groupInList","FolderGroupAndEvaluationInterval","setEvaluateEvery","isEditingGroup","setIsEditingGroup","useUnifiedAlertingSelector","state","existingNamespace","useCombinedRuleNamespaces","ns","existingGroup","isNewGroup","closeEditGroupModal","saved","onOpenEditGroupModal","editGroupDisabled","emptyNamespace","emptyGroup","IconButton","ForInput","evaluateForId","currentPendingPeriod","setPendingPeriod","pendingPeriod","NeedHelpInfoForConfigureNoDataError","NeedHelpInfo","getDescription","GrafanaEvaluationBehavior","existing","showErrorHandling","setShowErrorHandling","isPaused","type","isGrafanaAlertingRule","RuleEditorSection","Switch","CollapseToggle","collapsed","onChange","EvaluationIntervalLimitExceeded","Alert","ITEMS_PER_PAGE","ForBadge","message","Badge","isValidEvaluation","evaluation","RulesForGroupTable","rulesWithoutRecordingRules","unknownCurrentInterval","rows","alert1","alert2","columns","alertName","forDuration","numberEvaluations","DynamicTable","evaluateEveryValidationOptions","rules","rulePendingPeriods","largestPendingPeriod","period","EditCloudGroupModal","namespace","intervalEditOnly","notifyApp","updateRuleGroup","updateRuleGroupState","useUpdateRuleGroup","renameRuleGroup","renameRuleGroupState","moveRuleGroup","moveRuleGroupState","defaultValues","rulesSourceName","isGrafanaManagedGroup","nestedFolderParents","nameSpaceLabel","values","ruleGroupIdentifier","updatedNamespaceName","updatedGroupName","updatedInterval","shouldMove","shouldRename","isDirty","isValid","onInvalid","hasSomeNoRecordingRules","modalTitle","ruleUpdateSuccessMessage","useUpdateRuleGroupConfiguration","produceNewRuleGroup","upsertRuleGroup","ruleGroup","namespaceName","action","newRuleGroupDefinition","rulerConfig","useMoveRuleGroup","fetchRuleGroup","deleteRuleGroup","successMessage","oldNamespace","targetNamespace","oldGroupName","targetGroupName","useRenameRuleGroup","newGroupName","result","useReorderRuleForRuleGroup","swaps","useRulesAccess"],"sourceRoot":""}