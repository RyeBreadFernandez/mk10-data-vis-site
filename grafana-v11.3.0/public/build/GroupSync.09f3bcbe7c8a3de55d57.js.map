{"version":3,"file":"GroupSync.09f3bcbe7c8a3de55d57.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/RolePicker/hooks.ts","webpack://grafana/./public/app/extensions/groupsync/EmptyState.tsx","webpack://grafana/./public/app/extensions/groupsync/api.tsx","webpack://grafana/./public/app/extensions/groupsync/NewMappingForm.tsx","webpack://grafana/./public/app/extensions/groupsync/GroupSyncEditor.tsx"],"sourcesContent":["import { difference } from 'lodash';\nimport { useState } from 'react';\nimport { useDeepCompareEffect } from 'react-use';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { contextSrv } from 'app/core/core';\nimport { Role, AccessControlAction } from 'app/types';\n\nimport { fetchRoleOptions } from './api';\n\ntype MultiOrgRoleOptions = Record<number, Role[]>;\n\nexport const useRoleOptions = (organizationId: number) => {\n  const [orgId, setOrgId] = useState(organizationId);\n\n  const { value = [] } = useAsync(async () => {\n    if (contextSrv.licensedAccessControlEnabled() && contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return fetchRoleOptions(orgId);\n    }\n    return Promise.resolve([]);\n  }, [orgId]);\n\n  return [{ roleOptions: value }, setOrgId] as const;\n};\n\nexport const useMultiOrgRoleOptions = (orgIDs: number[]): MultiOrgRoleOptions => {\n  const [orgRoleOptions, setOrgRoleOptions] = useState<MultiOrgRoleOptions>({});\n\n  useDeepCompareEffect(() => {\n    if (!contextSrv.licensedAccessControlEnabled() || !contextSrv.hasPermission(AccessControlAction.ActionRolesList)) {\n      return;\n    }\n\n    const currentOrgIDs = Object.keys(orgRoleOptions).map((o) => (typeof o === 'number' ? o : parseInt(o, 10)));\n    const newOrgIDs = difference(orgIDs, currentOrgIDs);\n\n    Promise.all(\n      newOrgIDs.map((orgID) => {\n        return fetchRoleOptions(orgID).then((roleOptions) => [orgID, roleOptions]);\n      })\n    ).then((value) => {\n      setOrgRoleOptions({\n        ...orgRoleOptions,\n        ...Object.fromEntries(value),\n      });\n    });\n  }, [orgIDs]);\n\n  return orgRoleOptions;\n};\n","import { EmptyState, TextLink } from '@grafana/ui';\nimport { Trans, t } from 'app/core/internationalization';\n\nexport function GroupSyncEmptyState() {\n  return (\n    <EmptyState\n      variant=\"call-to-action\"\n      message={t('groupsync.empty-state.title', \"You haven't created any group mappings yet\")}\n    >\n      <Trans i18nKey=\"groupsync.empty-state.pro-tip\">\n        Want to manage Grafana access through groups in your Identity Provider? Create group mappings to Grafana RBAC\n        roles.{' '}\n        <TextLink external href=\"https://grafana.com/docs/grafana/latest/administration/group-attribute-sync\">\n          Learn more\n        </TextLink>\n      </Trans>\n    </EmptyState>\n  );\n}\n","import { cloneDeep, isEqual } from 'lodash';\nimport { useState } from 'react';\nimport useAsync from 'react-use/lib/useAsync';\n\nimport { getBackendSrv } from '@grafana/runtime';\n\nimport type { Group, GroupFilters, GetGroupsResponse, GroupSyncListAPI, GroupSyncWriterAPI, GroupAttrs } from './types';\n\nconst PageSize = 50;\n\nexport function fetchGroupSyncGroups(page: number, perPage: number, filters: GroupFilters): Promise<GetGroupsResponse> {\n  const params: Record<string, any> = {\n    page,\n    perPage,\n  };\n  if (typeof filters.groupID === 'string' && filters.groupID.trim().length > 0) {\n    params.groupID = filters.groupID;\n  }\n  return getBackendSrv().get('/api/groupsync/groups', params);\n}\n\nexport async function createGroup(groupID: string, attrs: GroupAttrs): Promise<void> {\n  await getBackendSrv().post(`/api/groupsync/groups/${groupID}`, attrs);\n}\n\n/**\n * Put the group.\n *\n * @param orgID number\n * @param group Group\n */\nexport async function putGroup(groupID: string, attrs: GroupAttrs): Promise<void> {\n  await getBackendSrv().put(`/api/groupsync/groups/${groupID}`, attrs);\n}\n\nexport async function deleteGroup(groupID: string): Promise<void> {\n  await getBackendSrv().delete(`/api/groupsync/groups/${groupID}`);\n}\n\n/**\n * useGroupSyncList tracks state for reading Groups from groupsync.\n *\n * @param initPage initial page to load\n * @param initFilters initial filters to apply\n * @returns\n */\nexport function useGroupSyncList(initPage: number, initFilters: GroupFilters): GroupSyncListAPI {\n  const [groups, setGroups] = useState<Group[]>([]);\n  const [loading, setLoading] = useState(true);\n  const [initialized, setInitialized] = useState(false);\n  const [total, setTotal] = useState(0);\n  const [page, setPage] = useState(initPage);\n  const [filters, setFilters] = useState(initFilters);\n\n  useAsync(async () => {\n    setLoading(true);\n    const resp = await fetchGroupSyncGroups(page, PageSize, filters);\n    setGroups(resp.groups);\n    setTotal(resp.total);\n    setLoading(false);\n    if (!initialized) {\n      setInitialized(true);\n    }\n  }, [page, filters]);\n\n  function setGroupIDFilter(newValue: string) {\n    setFilters({ ...filters, groupID: newValue });\n  }\n\n  async function refresh(reset: boolean) {\n    let currentPage = page;\n    if (reset) {\n      setPage(1);\n      currentPage = 1;\n    }\n    setLoading(true);\n    const resp = await fetchGroupSyncGroups(currentPage, PageSize, filters);\n    setGroups(resp.groups);\n    setTotal(resp.total);\n    setLoading(false);\n  }\n\n  return {\n    groups,\n    loading,\n    initialized,\n    total,\n    page,\n    setPage,\n    filters,\n    setGroupIDFilter,\n    refresh,\n  };\n}\n\nconst InitGroup: Group = {\n  groupID: '',\n  mappings: {},\n};\n\n/**\n * useGroupSyncWriter tracks state for a write operation on a Group.\n *\n * @param initGroup initial group values. Omit for new groups; provide a group entity when performing an update.\n * @returns GroupSyncWriterAPI\n */\nexport function useGroupSyncWriter(initGroup: Group = InitGroup): GroupSyncWriterAPI {\n  const [group, setGroup] = useState(initGroup);\n\n  return {\n    group,\n    setGroupID: (value: string) => {\n      setGroup({ ...group, groupID: value });\n    },\n    setRoles: (orgID: number, roleUIDs: string[]) => {\n      setGroup((prev) => {\n        const newMappings = cloneDeep(prev.mappings);\n        if (newMappings[orgID] === undefined) {\n          newMappings[orgID] = {\n            roles: roleUIDs,\n          };\n        } else {\n          newMappings[orgID].roles = roleUIDs;\n        }\n        return {\n          ...prev,\n          mappings: newMappings,\n        };\n      });\n    },\n    canSave: (): boolean => {\n      // groupID must not be empty\n      if (group.groupID.length === 0) {\n        return false;\n      }\n      // there must be changes to the mappings\n      if (isEqual(group.mappings, initGroup.mappings)) {\n        return false;\n      }\n      return true;\n    },\n    save: (orgID: number) => {\n      if (initGroup.groupID === '') {\n        return createGroup(group.groupID, group.mappings[orgID]);\n      } else {\n        return putGroup(group.groupID, group.mappings[orgID]);\n      }\n    },\n    reset: () => {\n      setGroup(InitGroup);\n    },\n  };\n}\n","import React, { useState } from 'react';\n\nimport { Button, Field, Input, Stack } from '@grafana/ui';\nimport { RolePicker } from 'app/core/components/RolePicker/RolePicker';\nimport { useRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { contextSrv } from 'app/core/core';\nimport type { Role } from 'app/types';\n\nimport { useGroupSyncWriter } from './api';\nimport type { Group } from './types';\n\ntype Props = {\n  onSave: (group: Group) => void;\n};\n\nexport function NewMappingForm({ onSave }: Props) {\n  const writerAPI = useGroupSyncWriter();\n  const [{ roleOptions }] = useRoleOptions(contextSrv.user.orgId);\n  const [roles, setRoles] = useState<Role[]>([]);\n  const [saving, setSaving] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setSaving(true);\n    writerAPI\n      .save(contextSrv.user.orgId)\n      .then(() => {\n        setSaving(false);\n        setRoles([]);\n        onSave(writerAPI.group);\n        writerAPI.reset();\n      })\n      .catch((err) => {\n        console.error(err);\n      });\n  };\n\n  const handleGroupIDChange: React.FormEventHandler<HTMLInputElement> = (event) => {\n    writerAPI.setGroupID(event.currentTarget.value);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <Stack gap={1} alignItems=\"end\">\n        <Field label=\"Group ID\" style={{ marginBottom: 0 }}>\n          <Input type=\"text\" name=\"groupID\" value={writerAPI.group.groupID} onChange={handleGroupIDChange} width={50} />\n        </Field>\n        <Field label=\"Roles\" style={{ marginBottom: 0 }}>\n          <RolePicker\n            appliedRoles={roles}\n            onRolesChange={(roles) => {\n              setRoles(roles);\n              writerAPI.setRoles(\n                contextSrv.user.orgId,\n                roles.map((role) => role.uid)\n              );\n            }}\n            roleOptions={roleOptions}\n            basicRoleDisabled={true}\n            canUpdateRoles\n          />\n        </Field>\n        <Button type=\"submit\" disabled={!writerAPI.canSave() || saving}>\n          Save\n        </Button>\n      </Stack>\n    </form>\n  );\n}\n","import { cloneDeep, isEmpty } from 'lodash';\nimport { useState, useMemo } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Column, FilterInput, InteractiveTable, Button, Pagination, Stack, ConfirmModal } from '@grafana/ui';\nimport { SlideDown } from 'app/core/components/Animations/SlideDown';\nimport { Page } from 'app/core/components/Page/Page';\nimport { RolePicker } from 'app/core/components/RolePicker/RolePicker';\nimport { useMultiOrgRoleOptions } from 'app/core/components/RolePicker/hooks';\nimport { Role, StoreState } from 'app/types';\n\nimport { GroupSyncEmptyState } from './EmptyState';\nimport { NewMappingForm } from './NewMappingForm';\nimport { deleteGroup, putGroup, useGroupSyncList } from './api';\nimport type { Group, GroupAttrs, GroupSyncListAPI } from './types';\n\ninterface TableDataItem {\n  groupID: string;\n  orgID: number;\n  roles: string[];\n}\n\nfunction groupsToTableItems(groups: Group[]): TableDataItem[] {\n  const items: TableDataItem[] = [];\n  for (const group of groups) {\n    for (const [orgID, attrs] of Object.entries(group.mappings)) {\n      items.push({\n        groupID: group.groupID,\n        orgID: parseInt(orgID, 10),\n        roles: attrs.roles,\n      });\n    }\n  }\n  return items;\n}\n\nfunction getUniqueOrgIDs(tableData: TableDataItem[]): number[] {\n  const orgIDs = new Set<number>();\n  tableData.forEach((item) => orgIDs.add(item.orgID));\n  return Array.from(orgIDs);\n}\n\ntype ActionBarProps = {\n  groupsList: GroupSyncListAPI;\n  singleOrg: boolean;\n};\n\nfunction ActionBar({ groupsList }: ActionBarProps) {\n  const [drawerOpen, setDrawerOpen] = useState(false);\n\n  return (\n    <Stack direction=\"column\" gap={2}>\n      <Stack justifyContent=\"space-between\">\n        <Stack gap={1}>\n          <FilterInput\n            value={groupsList.filters.groupID}\n            onChange={groupsList.setGroupIDFilter}\n            placeholder=\"Search by group ID\"\n            width={60}\n          />\n        </Stack>\n        <Button onClick={() => setDrawerOpen(!drawerOpen)}>{drawerOpen ? 'Close' : 'New'}</Button>\n      </Stack>\n      <SlideDown in={drawerOpen}>\n        <div className=\"cta-form\" style={{ marginBottom: 0 }}>\n          <Stack direction=\"column\" gap={1}>\n            <h5>New group mapping</h5>\n            {drawerOpen && <NewMappingForm onSave={() => groupsList.refresh(true)} />}\n          </Stack>\n        </div>\n      </SlideDown>\n    </Stack>\n  );\n}\n\nfunction GroupSyncEditor({ userOrgs }: Props) {\n  const [deleteGroupID, setDeleteGroupID] = useState('');\n  const groupsList = useGroupSyncList(1, {\n    groupID: '',\n  });\n  const tableData = groupsToTableItems(groupsList.groups);\n  const orgIDs = getUniqueOrgIDs(tableData);\n  if (orgIDs.length === 0) {\n    orgIDs.push(1);\n  }\n  const roleOptions = useMultiOrgRoleOptions(orgIDs);\n  const singleOrg = userOrgs.length === 1;\n\n  function handleDelete() {\n    deleteGroup(deleteGroupID)\n      .then(() => {\n        groupsList.refresh(false);\n      })\n      .finally(() => {\n        setDeleteGroupID('');\n      });\n  }\n\n  const cols: Array<Column<TableDataItem>> = useMemo(\n    () => [\n      {\n        id: 'groupID',\n        header: 'Group',\n        cell: ({ cell }) => <code>{cell.value}</code>,\n      },\n      {\n        id: 'roles',\n        header: 'Roles',\n        cell: ({ cell }) => {\n          const { orgID, groupID } = cell.row.original;\n          const orgRoleOptions = roleOptions[cell.row.original.orgID] || [];\n          const onRolesChange = (newRoles: Role[]) => {\n            const existingGroup = groupsList.groups.find((group) => group.groupID === groupID);\n            if (existingGroup === undefined) {\n              throw new Error('expected groupsList to contain table item');\n            }\n            const updated = cloneDeep(existingGroup);\n            const newAttrs: GroupAttrs = {\n              ...updated.mappings[orgID],\n              roles: newRoles.map((role) => role.uid),\n            };\n            putGroup(groupID, newAttrs);\n          };\n          return (\n            <RolePicker\n              appliedRoles={orgRoleOptions.filter((role) => cell.row.original.roles.includes(role.uid))}\n              onRolesChange={onRolesChange}\n              roleOptions={orgRoleOptions}\n              basicRoleDisabled={true}\n              apply\n              canUpdateRoles\n            />\n          );\n        },\n      },\n      {\n        id: 'delete',\n        header: '',\n        cell: ({ cell }) => (\n          <Stack justifyContent=\"end\">\n            <Button\n              variant=\"secondary\"\n              onClick={() => setDeleteGroupID(cell.row.original.groupID)}\n              icon=\"trash-alt\"\n              aria-label={`Delete group mapping`}\n            />\n          </Stack>\n        ),\n      },\n    ],\n    [groupsList, roleOptions]\n  );\n\n  return (\n    <Page navId=\"groupsync\">\n      <ConfirmModal\n        isOpen={!isEmpty(deleteGroupID)}\n        title=\"Delete group mappings\"\n        body=\"Are you sure you want to delete all mappings for this group?\"\n        confirmText=\"Delete\"\n        onConfirm={handleDelete}\n        onDismiss={() => setDeleteGroupID('')}\n      />\n      <Page.Contents isLoading={groupsList.loading && !groupsList.initialized}>\n        <Stack direction=\"column\" gap={1}>\n          <ActionBar groupsList={groupsList} singleOrg={singleOrg} />\n          {groupsList.initialized && groupsList.groups.length > 0 ? (\n            <InteractiveTable\n              columns={cols}\n              data={tableData}\n              getRowId={(originalRow) => `${originalRow.orgID}/${originalRow.groupID}`}\n            />\n          ) : (\n            <GroupSyncEmptyState />\n          )}\n          {groupsList.total > 50 && (\n            <Stack justifyContent=\"end\">\n              <Pagination\n                currentPage={groupsList.page}\n                numberOfPages={Math.ceil(groupsList.total / 50)}\n                onNavigate={(p) => {\n                  groupsList.setPage(p);\n                }}\n              />\n            </Stack>\n          )}\n        </Stack>\n      </Page.Contents>\n    </Page>\n  );\n}\n\nconst mapStateToProps = (state: StoreState) => {\n  return {\n    userOrgs: state.organization.userOrgs,\n  };\n};\nconst connector = connect(mapStateToProps, {});\ntype Props = ConnectedProps<typeof connector>;\n\nexport default connector(GroupSyncEditor);\n"],"names":["useRoleOptions","organizationId","orgId","setOrgId","value","useMultiOrgRoleOptions","orgIDs","orgRoleOptions","setOrgRoleOptions","currentOrgIDs","o","newOrgIDs","orgID","roleOptions","GroupSyncEmptyState","EmptyState","TextLink","PageSize","fetchGroupSyncGroups","page","perPage","filters","params","createGroup","groupID","attrs","putGroup","deleteGroup","useGroupSyncList","initPage","initFilters","groups","setGroups","loading","setLoading","initialized","setInitialized","total","setTotal","setPage","setFilters","useAsync","resp","setGroupIDFilter","newValue","refresh","reset","currentPage","InitGroup","useGroupSyncWriter","initGroup","group","setGroup","roleUIDs","prev","newMappings","NewMappingForm","onSave","writerAPI","roles","setRoles","saving","setSaving","handleSubmit","event","err","handleGroupIDChange","Stack","Field","Input","RolePicker","role","Button","groupsToTableItems","items","getUniqueOrgIDs","tableData","item","ActionBar","groupsList","drawerOpen","setDrawerOpen","FilterInput","SlideDown","GroupSyncEditor","userOrgs","deleteGroupID","setDeleteGroupID","singleOrg","handleDelete","cols","cell","onRolesChange","newRoles","existingGroup","newAttrs","Page","ConfirmModal","InteractiveTable","originalRow","Pagination","p","mapStateToProps","state"],"sourceRoot":""}