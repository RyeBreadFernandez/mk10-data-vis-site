{"version":3,"file":"RecordedQueriesConfig.093f092fec11fa65b3fb.js","mappings":"4UAKO,MAAMA,EAAyB,IAAmB,CACvD,MAAMC,KAAS,MAAWC,CAAS,EAEnC,SACE,OAACC,EAAA,GACC,UAAWF,EAAO,IAClB,QAAS,8BACT,UACE,QAAC,QACC,oBAACG,EAAA,EAAI,CAAC,KAAK,QAAS,GAAE,WACb,kDAFD,cAGV,EAEF,uBAAqB,oBAAE,EACzB,CAEJ,EAEMF,EAAaG,IACV,CACL,OAAK;AAAA;AAAA,KAGP,G,qCCRF,SAASC,EAAgBC,EAA6B,CACpD,MAAO,CACL,YAAU,MAAYA,EAAM,SAAU,iBAAiB,EACvD,mBAAiB,KAAsBA,EAAM,eAAe,EAC5D,UAAWA,EAAM,gBAAgB,SACnC,CACF,CAEA,MAAMC,EAAqB,CACzB,wBAAuB,KACvB,oBAAmB,KACnB,oBAAmB,IACrB,EAEMC,KAAY,WAAQH,EAAiBE,CAAkB,EAEhDE,EAAmC,CAAC,CAC/C,SAAAC,EACA,UAAAC,EACA,gBAAAC,EACA,wBAAAC,EACA,oBAAAC,EACA,oBAAqBC,CACvB,IAAa,IACX,aAAU,IAAM,CACdF,EAAwB,CAC1B,EAAG,CAACA,CAAuB,CAAC,EAC5B,MAAMb,KAAS,MAAW,CAAS,EAE7B,CAACgB,EAAqBC,CAAsB,KAAI,YAAwB,EAExEC,EAAmBN,EAAgB,IAAKO,GAAsB,CAClE,MAAMC,EAAU,IACd,OAACC,EAAA,IAEC,QAAS,SAAY,CACnB,MAAMP,EAAoB,CAAE,GAAGK,EAAI,OAAQ,CAACA,EAAG,MAAO,CAAC,CACzD,EACA,QAASA,EAAG,OAAS,YAAc,UAElC,SAAAA,EAAG,OAAS,kBAAoB,oBAN5B,8BAOP,KACA,OAACE,EAAA,IAEC,aAAY,wBACZ,QAAS,IAAMJ,EAAuBE,CAAE,EACxC,QAAS,cACV,mBAJM,uBAMP,CACF,EAEA,SAAO,OAACG,EAAA,EAAS,CAAa,cAAeH,EAAI,QAAAC,CAAA,EAA1BD,EAAG,EAAyC,CACrE,CAAC,EAEKI,EAAW,IACXZ,KACK,OAACa,EAAA,EAAU,EAAC,EAEdN,EAAiB,SAAW,KAAI,OAACnB,EAAsB,EAAC,EAAKmB,EAGtE,SACE,OAACO,EAAA,GAAI,CAAC,SAAAf,EACJ,oBAACe,EAAA,GAAK,SAAL,CACC,oBAAC,OAAI,UAAWzB,EAAO,OACrB,mBAAC,KAAU,CAAC,KAAM,MAAO,KAAM,iCAAkC,oCAEjE,EACF,EACCuB,EAAS,EACTP,MACC,OAACU,EAAA,GACC,OAAM,GACN,KAAK,YACL,MAAM,SACN,QAAM,QAAC,OAAI,8CAAuCV,EAAoB,KAAK,MAAO,EAClF,YAAY,SACZ,UAAW,IAAMC,EAAuB,MAAS,EACjD,UAAW,SAAY,CACrB,MAAMF,EAAsBC,CAAmB,EAC/CC,EAAuB,MAAS,CAClC,EACF,GAEJ,EACF,CAEJ,EAEM,EAAab,IACV,CACL,UAAQ;AAAA;AAAA;AAAA,uBAGWA,EAAM,QAAQ,CAAC,CAAC;AAAA,MAEnC,SAAO;AAAA;AAAA;AAAA,KAIT,GAGWuB,EAAwBnB,EAAUC,CAAgC,EAC/E,EAAekB,C","sources":["webpack://grafana/./public/app/extensions/recorded-queries/EmptyRecordedQueryList.tsx","webpack://grafana/./public/app/extensions/recorded-queries/RecordedQueriesConfig.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { CallToActionCard, Icon, useStyles2 } from '@grafana/ui';\n\nexport const EmptyRecordedQueryList = (): JSX.Element => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <CallToActionCard\n      className={styles.cta}\n      message={'No recorded queries defined'}\n      footer={\n        <span key=\"proTipFooter\">\n          <Icon name=\"rocket\" />\n          ProTip: {'You can record queries from the query editor.'}\n        </span>\n      }\n      callToActionElement={<></>}\n    />\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    cta: css`\n      text-align: center;\n    `,\n  };\n};\n","import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, ConfirmModal, LinkButton, useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport PageLoader from 'app/core/components/PageLoader/PageLoader';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\n\nimport { EnterpriseStoreState, RecordedQuery } from '../types';\n\nimport { EmptyRecordedQueryList } from './EmptyRecordedQueryList';\nimport { QueryCard } from './QueryCard';\nimport { deleteRecordedQuery, getRecordedQueriesAsync, updateRecordedQuery } from './state/actions';\nimport { getRecordedQueryItems } from './state/selectors';\n\nexport type Props = GrafanaRouteComponentProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: EnterpriseStoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'recordedQueries'),\n    recordedQueries: getRecordedQueryItems(state.recordedQueries),\n    isLoading: state.recordedQueries.isLoading,\n  };\n}\n\nconst mapDispatchToProps = {\n  getRecordedQueriesAsync,\n  updateRecordedQuery,\n  deleteRecordedQuery,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const RecordedQueriesConfigUnconnected = ({\n  navModel,\n  isLoading,\n  recordedQueries,\n  getRecordedQueriesAsync,\n  updateRecordedQuery,\n  deleteRecordedQuery: onDeleteRecordedQuery,\n}: Props) => {\n  useEffect(() => {\n    getRecordedQueriesAsync();\n  }, [getRecordedQueriesAsync]);\n  const styles = useStyles2(getStyles);\n\n  const [deleteRecordedQuery, setDeleteRecordedQuery] = useState<RecordedQuery>();\n\n  const queriesToDisplay = recordedQueries.map((rq: RecordedQuery) => {\n    const buttons = [\n      <Button\n        key={'toggle-recorded-query-active'}\n        onClick={async () => {\n          await updateRecordedQuery({ ...rq, active: !rq.active });\n        }}\n        variant={rq.active ? 'secondary' : 'primary'}\n      >\n        {rq.active ? 'Pause recording' : 'Resume recording'}\n      </Button>,\n      <Button\n        key={'delete-recorded-query'}\n        aria-label={'Delete recorded query'}\n        onClick={() => setDeleteRecordedQuery(rq)}\n        variant={'destructive'}\n      >\n        Delete\n      </Button>,\n    ];\n\n    return <QueryCard key={rq.id} recordedQuery={rq} buttons={buttons} />;\n  });\n\n  const contents = () => {\n    if (isLoading) {\n      return <PageLoader />;\n    }\n    return queriesToDisplay.length === 0 ? <EmptyRecordedQueryList /> : queriesToDisplay;\n  };\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <div className={styles.header}>\n          <LinkButton icon={'cog'} href={'/recorded-queries/write-target'}>\n            Edit remote write target\n          </LinkButton>\n        </div>\n        {contents()}\n        {deleteRecordedQuery && (\n          <ConfirmModal\n            isOpen\n            icon=\"trash-alt\"\n            title=\"Delete\"\n            body={<div>Are you sure you want to delete &apos;{deleteRecordedQuery.name}&apos;?</div>}\n            confirmText=\"Delete\"\n            onDismiss={() => setDeleteRecordedQuery(undefined)}\n            onConfirm={async () => {\n              await onDeleteRecordedQuery(deleteRecordedQuery);\n              setDeleteRecordedQuery(undefined);\n            }}\n          />\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    header: css`\n      display: flex;\n      justify-content: flex-end;\n      margin-bottom: ${theme.spacing(1)};\n    `,\n    title: css`\n      margin-bottom: 0;\n      width: 100%;\n    `,\n  };\n};\n\nexport const RecordedQueriesConfig = connector(RecordedQueriesConfigUnconnected);\nexport default RecordedQueriesConfig;\n"],"names":["EmptyRecordedQueryList","styles","getStyles","CallToActionCard","Icon","theme","mapStateToProps","state","mapDispatchToProps","connector","RecordedQueriesConfigUnconnected","navModel","isLoading","recordedQueries","getRecordedQueriesAsync","updateRecordedQuery","onDeleteRecordedQuery","deleteRecordedQuery","setDeleteRecordedQuery","queriesToDisplay","rq","buttons","Button","QueryCard","contents","PageLoader","Page","ConfirmModal","RecordedQueriesConfig"],"sourceRoot":""}