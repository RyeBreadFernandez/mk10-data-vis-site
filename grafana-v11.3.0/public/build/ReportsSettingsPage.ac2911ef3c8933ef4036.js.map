{"version":3,"file":"ReportsSettingsPage.ac2911ef3c8933ef4036.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/shared/ResourcePicker.tsx","webpack://grafana/./public/app/extensions/reports/ImagePreview.tsx","webpack://grafana/./public/app/extensions/reports/ReportBranding.tsx","webpack://grafana/./public/app/extensions/reports/ReportsSettingsPage.tsx","webpack://grafana/./public/app/extensions/shared/utils/content.ts","webpack://grafana/./public/app/extensions/shared/utils/data.ts"],"sourcesContent":["import { css, cx } from '@emotion/css';\nimport { useState } from 'react';\nimport { Controller, Path, useFormContext } from 'react-hook-form';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport {\n  FileDropzone,\n  Input,\n  RadioButtonGroup,\n  useStyles2,\n  ColorPickerInput,\n  FileListItem,\n  Field,\n  Stack,\n} from '@grafana/ui';\n\nimport { getContentType, isFile } from './utils/content';\nimport { isValidUrl } from './utils/data';\n\nexport type ContentType = 'url' | 'file' | 'color';\n\nexport type TypeOptions = Array<{ label: string; value: ContentType }>;\n\nexport const resourceTypeOptions: TypeOptions = [\n  { label: 'Paste URL', value: 'url' },\n  { label: 'Upload file', value: 'file' },\n  { label: 'Custom color', value: 'color' },\n];\n\ninterface ResourcePickerProps<T> {\n  name: Path<T>;\n  disabled?: boolean;\n  allowedTypes?: ContentType[];\n}\n\nexport function ResourcePicker<T>({ name, disabled, allowedTypes = ['url', 'file'] }: ResourcePickerProps<T>) {\n  const {\n    control,\n    register,\n    getValues,\n    setValue,\n    watch,\n    formState: { errors },\n  } = useFormContext();\n  const [initialValue] = useState(getValues()[name]);\n  const currentValue = watch(name, initialValue);\n  const [contentType, setContentType] = useState<ContentType>(getContentType(getValues()[name]));\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Stack gap={2} direction={'column'} data-testid={`resource-picker-${name}`}>\n      <div>\n        <RadioButtonGroup\n          options={resourceTypeOptions.filter((opt) => allowedTypes.includes(opt.value))}\n          onChange={(value) => {\n            setContentType(value);\n            if (getContentType(initialValue) === value) {\n              setValue(name, initialValue);\n            } else {\n              setValue<string>(name, '');\n            }\n          }}\n          disabled={disabled}\n          className={styles.buttonGroup}\n          value={contentType}\n        />\n      </div>\n      {contentType === 'file' && (\n        <Controller\n          control={control}\n          name={name}\n          render={({ field: { onChange, ref, ...field } }) => (\n            <div className={cx(styles.dropzone, disabled && styles.disabled)}>\n              <FileDropzone\n                {...field}\n                readAs={'readAsBinaryString'}\n                onFileRemove={!disabled ? () => setValue<string>(name, '') : undefined}\n                options={{\n                  disabled,\n                  multiple: false,\n                  accept: { 'image/*': ['.jpeg', '.jpg', '.png'] },\n                  onDrop: (file: File[]) => {\n                    onChange(file[0]);\n                  },\n                }}\n              />\n              {!isFile(currentValue) && currentValue !== '' && (\n                <FileListItem\n                  removeFile={!disabled ? () => setValue<string>(name, '') : undefined}\n                  file={{ file: new File([currentValue], currentValue), error: null, id: '' }}\n                />\n              )}\n            </div>\n          )}\n        />\n      )}\n      {contentType === 'url' && (\n        <Field\n          invalid={!!errors[name]}\n          error={errors[name] && String(errors[name]?.message)}\n          className={styles.customField}\n        >\n          <Input\n            {...register(name, {\n              validate: (val) => isValidUrl(val) || 'Invalid URL',\n            })}\n            id={name}\n            placeholder={'https://your.site/image.png'}\n            disabled={disabled}\n          />\n        </Field>\n      )}\n      {contentType === 'color' && (\n        <Controller\n          control={control}\n          name={name}\n          render={({ field }) => (\n            <div className={styles.pickerContainer}>\n              <ColorPickerInput {...field} id={name} placeholder={'Select color'} disabled={disabled} />\n            </div>\n          )}\n        />\n      )}\n    </Stack>\n  );\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    pickerContainer: css`\n      display: flex;\n      position: relative;\n    `,\n    // Hide accepted files text and fle size for previews\n    // TODO Fix in the FileDropzone component instead\n    dropzone: css`\n      & > div {\n        & > small:first-of-type {\n          display: none;\n        }\n      }\n      // FileListItem\n      & > div:nth-of-type(2) {\n        & > span {\n          & > span:nth-of-type(2) {\n            display: none;\n          }\n        }\n      }\n    `,\n    colorValue: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n    buttonGroup: css`\n      margin-bottom: ${theme.spacing(2)};\n    `,\n    disabled: css`\n      div {\n        cursor: not-allowed;\n      }\n    `,\n    customField: css`\n      margin-top: -${theme.spacing(2)};\n    `,\n  };\n};\n","import { css, cx } from '@emotion/css';\n\nimport { GrafanaTheme } from '@grafana/data';\nimport { useStyles } from '@grafana/ui';\n\nimport { isValidImageExt } from '../utils/validators';\n\nexport interface Props {\n  url: string;\n  width?: string;\n  altText: string;\n}\n\nconst isValidImg = (val: string) => {\n  if (val.startsWith('http')) {\n    return isValidImageExt(val);\n  }\n  return true;\n};\n\nexport const ImagePreview = ({ url, altText, width = '200px' }: Props) => {\n  const styles = useStyles(getStyles);\n  return url ? (\n    <div\n      className={cx(\n        styles.wrapper,\n        css`\n          width: ${width};\n        `\n      )}\n    >\n      {isValidImg(url) ? <img src={url} className={styles.img} alt={altText} /> : 'Invalid image'}\n    </div>\n  ) : null;\n};\n\nconst getStyles = (theme: GrafanaTheme) => {\n  return {\n    wrapper: css`\n      padding: ${theme.spacing.sm};\n      border: 1px solid ${theme.colors.border3};\n      border-radius: ${theme.border.radius.sm};\n      margin-bottom: ${theme.spacing.md};\n    `,\n    img: css`\n      width: 100%;\n    `,\n  };\n};\n","import { useFormContext, Controller } from 'react-hook-form';\n\nimport { SelectableValue } from '@grafana/data';\nimport { Input, Field, RadioButtonGroup, FieldSet } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { ResourcePicker } from '../shared/ResourcePicker';\nimport { getResourceUrl } from '../shared/utils/data';\nimport { AccessControlAction, FooterMode } from '../types';\n\nimport { ImagePreview } from './ImagePreview';\nimport { defaultEmailLogo, defaultReportLogo } from './constants';\n\nconst footerModeOptions: SelectableValue[] = [\n  { label: 'Sent By', value: FooterMode.SentBy },\n  { label: 'None', value: FooterMode.None },\n];\n\nconst ReportBranding = () => {\n  const { register, control, watch } = useFormContext();\n\n  const watchReportLogo = watch('reportLogoUrl') || defaultReportLogo;\n  const watchEmailLogo = watch('emailLogoUrl') || defaultEmailLogo;\n  const watchFooterMode = watch('emailFooterMode');\n  const canEditSettings = contextSrv.hasPermission(AccessControlAction.ReportingSettingsWrite);\n\n  return (\n    <>\n      <FieldSet label=\"Report branding\" disabled={!canEditSettings}>\n        <Field\n          htmlFor={'reportLogoUrl'}\n          label=\"Company logo URL\"\n          description=\"The logo will be displayed in the document footer. Supported formats: png, jpg, gif.\"\n        >\n          <ResourcePicker name={'reportLogoUrl'} />\n        </Field>\n        <ImagePreview\n          url={watchReportLogo === defaultReportLogo ? defaultReportLogo : getResourceUrl(watchReportLogo)}\n          width=\"60px\"\n          altText=\"Company logo preview\"\n        />\n      </FieldSet>\n\n      <FieldSet label=\"Email branding\" disabled={!canEditSettings}>\n        <Field\n          htmlFor={'emailLogoUrl'}\n          label=\"Company logo URL\"\n          description=\"The logo will be displayed in the email header. Supported formats: png, jpg, gif.\"\n        >\n          <ResourcePicker name={'emailLogoUrl'} />\n        </Field>\n        <ImagePreview\n          url={watchEmailLogo === defaultEmailLogo ? defaultEmailLogo : getResourceUrl(watchEmailLogo)}\n          altText=\"Company logo preview\"\n        />\n        <Field label=\"Email footer\">\n          <Controller\n            name=\"emailFooterMode\"\n            render={({ field: { ref, ...field } }) => <RadioButtonGroup {...field} options={footerModeOptions} />}\n            control={control}\n          />\n        </Field>\n        {watchFooterMode === FooterMode.SentBy && (\n          <>\n            <Field label=\"Footer link text\">\n              <Input {...register('emailFooterText')} id=\"emailFooterText\" placeholder=\"Grafana\" type=\"text\" />\n            </Field>\n            <Field label=\"Footer link URL\">\n              <Input {...register('emailFooterLink')} id=\"emailFooterLink\" placeholder=\"https://your.site\" type=\"url\" />\n            </Field>\n          </>\n        )}\n      </FieldSet>\n    </>\n  );\n};\n\nexport default ReportBranding;\n","import { useForm, FormProvider } from 'react-hook-form';\nimport { useAsync } from 'react-use';\n\nimport { AppEvents } from '@grafana/data';\nimport { config, getBackendSrv, locationService } from '@grafana/runtime';\nimport { Button, Alert } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { appEvents, contextSrv } from 'app/core/core';\n\nimport { AccessControlAction, BrandingOptions, ReportsSettings } from '../types';\n\nimport { NoRendererInfoBox } from './RenderingWarnings';\nimport ReportBranding from './ReportBranding';\n\nexport const ReportsSettingsPage = () => {\n  const {\n    value: settings,\n    loading,\n    error,\n  } = useAsync(async () => {\n    const settings: ReportsSettings = await getBackendSrv().get('/api/reports/settings');\n    // Update default settings after loading\n    reset(settings.branding);\n    return settings;\n  });\n\n  const { handleSubmit, reset, ...formMethods } = useForm({ mode: 'onBlur', defaultValues: settings?.branding });\n\n  const submitForm = (branding: BrandingOptions) => {\n    const formData = new FormData();\n\n    for (const [field, value] of Object.entries(branding)) {\n      if (value instanceof File) {\n        branding = { ...branding, [field]: value.name };\n        formData.append('files', value);\n      }\n    }\n    formData.append('config', JSON.stringify({ branding }));\n\n    return fetch(`${config.appUrl}api/reports/settings`, { method: 'POST', body: formData }).then((response) => {\n      if (response.ok) {\n        appEvents.emit(AppEvents.alertSuccess, ['Successfully saved configuration']);\n        locationService.push('/reports');\n      } else {\n        appEvents.emit(AppEvents.alertError, ['Error saving configuration', response.statusText]);\n      }\n    });\n  };\n\n  if (error) {\n    return (\n      <Page navId=\"reports-settings\" subTitle=\"Manage report template settings.\">\n        <Alert title=\"Error loading settings\" severity=\"error\" />\n      </Page>\n    );\n  }\n\n  const canEditSettings = contextSrv.hasPermission(AccessControlAction.ReportingSettingsWrite);\n\n  return (\n    <Page navId=\"reports-settings\" subTitle=\"Manage report template settings.\">\n      <Page.Contents isLoading={loading}>\n        {!config.rendererAvailable ? (\n          <NoRendererInfoBox variant=\"error\" />\n        ) : (\n          <FormProvider {...formMethods} reset={reset} handleSubmit={handleSubmit}>\n            <form onSubmit={handleSubmit(submitForm)} style={{ maxWidth: '500px' }}>\n              <ReportBranding />\n              <Button type=\"submit\" size=\"md\" variant=\"primary\" disabled={!canEditSettings}>\n                Save\n              </Button>\n            </form>\n          </FormProvider>\n        )}\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default ReportsSettingsPage;\n","export const getContentType = (value: string | File) => {\n  if (!value) {\n    return 'url';\n  }\n\n  if (isFile(value)) {\n    return 'file';\n  }\n  if (value.startsWith('http') || value.startsWith('data:')) {\n    return 'url';\n  }\n  if (value.startsWith('#') || value.startsWith('rgb(') || value.startsWith('rgba(')) {\n    return 'color';\n  }\n\n  return 'file';\n};\n\nexport const isFile = (value: string | File): value is File => value instanceof File;\n","import { API_ROOT } from '../../reports/constants';\n\nimport { getContentType, isFile } from './content';\n\nexport const getResourceUrl = (resource: File | string) => {\n  if (isFile(resource)) {\n    return URL.createObjectURL(resource);\n  }\n\n  // Separate handling for the file names\n  if (getContentType(resource) === 'file') {\n    return `${API_ROOT}${resource}`;\n  }\n\n  return resource;\n};\n\nexport const isValidUrl = (value: unknown) => {\n  if (!value || value instanceof File) {\n    return true;\n  }\n  return typeof value === 'string' && value.startsWith('http');\n};\n"],"names":["resourceTypeOptions","ResourcePicker","name","disabled","allowedTypes","control","register","getValues","setValue","watch","errors","initialValue","currentValue","contentType","setContentType","styles","getStyles","Stack","RadioButtonGroup","opt","value","onChange","ref","field","FileDropzone","file","FileListItem","Field","Input","val","ColorPickerInput","theme","isValidImg","ImagePreview","url","altText","width","footerModeOptions","watchReportLogo","watchEmailLogo","watchFooterMode","canEditSettings","FieldSet","ReportsSettingsPage","settings","loading","error","useAsync","reset","handleSubmit","formMethods","submitForm","branding","formData","config","response","Page","Alert","Button","getContentType","isFile","getResourceUrl","resource","isValidUrl"],"sourceRoot":""}