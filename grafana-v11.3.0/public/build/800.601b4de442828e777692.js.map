{"version":3,"file":"800.601b4de442828e777692.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/publicdashboards/api/emailSharingApi.ts","webpack://grafana/./public/app/extensions/publicdashboards/utils.ts"],"sourcesContent":["import { config, FetchError, isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { t } from 'app/core/internationalization';\nimport { publicDashboardApi } from 'app/features/dashboard/api/publicDashboardApi';\nimport {\n  SessionDashboard,\n  SessionUser,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { EMAIL_SHARING_MAGIC_LINK_ERRORS } from '../utils';\n\nfunction isFetchBaseQueryError(error: unknown): error is { error: FetchError } {\n  return typeof error === 'object' && error != null && 'error' in error;\n}\n\nfunction isKnownFetchError(error: unknown): error is { error: FetchError } {\n  return isFetchBaseQueryError(error) && isFetchError(error.error);\n}\n\nconst emailSharingApi = publicDashboardApi.injectEndpoints({\n  endpoints: (builder) => ({\n    requestAccess: builder.mutation<void, { email: string; accessToken: string }>({\n      query: (params) => ({\n        url: '/public/dashboards/share/request-access',\n        method: 'POST',\n        data: params,\n      }),\n    }),\n    confirmAccess: builder.mutation<{ error?: string }, { magicLinkToken: string; accessToken: string }>({\n      query: ({ magicLinkToken, accessToken }) => ({\n        url: `/public/dashboards/share/${magicLinkToken}`,\n        method: 'POST',\n      }),\n      async onQueryStarted({ accessToken }, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n          dispatch(\n            notifyApp(\n              createSuccessNotification(t('public-dashboard.email-sharing.success-confirm-access', 'Access confirmed!'))\n            )\n          );\n          window.location.assign(config.appSubUrl + `public-dashboards/${accessToken}`);\n        } catch (e) {\n          if (isKnownFetchError(e)) {\n            const {\n              data: { messageId },\n            } = e.error;\n            if (messageId && Object.values(EMAIL_SHARING_MAGIC_LINK_ERRORS).includes(messageId)) {\n              window.location.assign(\n                config.appSubUrl + `public-dashboards/${accessToken}/request-access?error=${messageId}`\n              );\n            }\n          }\n        }\n      },\n    }),\n    addRecipient: builder.mutation<void, { recipient: string; dashboardUid: string; uid: string }>({\n      query: ({ recipient, uid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients`,\n        method: 'POST',\n        data: { recipient },\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t(\n                'public-dashboard.email-sharing.success-send-recipient-invitation',\n                'The email invitation has been sent.'\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: (result, error, { dashboardUid }) => [{ type: 'PublicDashboard', id: dashboardUid }],\n    }),\n    deleteRecipient: builder.mutation<\n      void,\n      { recipientUid: string; recipientEmail: string; dashboardUid: string; uid: string }\n    >({\n      query: ({ uid, recipientUid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients/${recipientUid}`,\n        method: 'DELETE',\n      }),\n      async onQueryStarted({ recipientEmail }, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t('public-dashboard.email-sharing.success-revoke-access-title', 'Access Revoked'),\n              t(\n                'public-dashboard.email-sharing.success-revoke-access-description',\n                'You have successfully revoked access for {{recipientEmail}}.',\n                { recipientEmail }\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: (result, error, { dashboardUid }) => [\n        { type: 'PublicDashboard', id: dashboardUid },\n        'UsersWithActiveSessions',\n        'ActiveUserDashboards',\n      ],\n    }),\n    reshareAccessToRecipient: builder.mutation<void, { recipientUid: string; uid: string }>({\n      query: ({ uid, recipientUid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients/${recipientUid}`,\n        method: 'PATCH',\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t(\n                'public-dashboard.email-sharing.success-resend-recipient-invitation',\n                'The email invitation has been resent.'\n              )\n            )\n          )\n        );\n      },\n    }),\n    getActiveUsers: builder.query<SessionUser[], void>({\n      query: () => ({\n        url: '/public-dashboards/share/users?status=active',\n      }),\n      providesTags: ['UsersWithActiveSessions'],\n    }),\n    getActiveUserDashboards: builder.query<SessionDashboard[], string>({\n      query: (email) => ({\n        url: `/public-dashboards/share/users/${email}/dashboards?status=active`,\n      }),\n      providesTags: (result, _, email) => [{ type: 'ActiveUserDashboards', id: email }],\n    }),\n    revokeAllAccess: builder.mutation<void, { email: string }>({\n      query: ({ email }) => ({\n        url: `/public-dashboards/share/users/${email}`,\n        method: 'DELETE',\n      }),\n      async onQueryStarted({ email }, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t('public-dashboard.email-sharing.success-revoke-all-accesses-title', 'Access Revoked'),\n              t(\n                'public-dashboard.email-sharing.success-revoke-all-accesses-description',\n                \"{{email}}'s access to all public dashboards has been successfully removed.\",\n                { email }\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: ['UsersWithActiveSessions'],\n    }),\n  }),\n  overrideExisting: true,\n});\n\nexport const {\n  useRequestAccessMutation,\n  useGetActiveUserDashboardsQuery,\n  useGetActiveUsersQuery,\n  useConfirmAccessMutation,\n} = emailSharingApi;\n\nexport default emailSharingApi;\n","interface BodyText {\n  title: string;\n  description: string;\n}\n\nexport enum EMAIL_SHARING_MAGIC_LINK_ERRORS {\n  NOT_FOUND_MAGIC_LINK = 'publicdashboards.magicLinkNotFound',\n  EXPIRED_MAGIC_LINK = 'publicdashboards.magicLinkExpired',\n}\n\nexport enum EMAIL_SHARING_ACCESS_ERRORS {\n  INTERNAL_SERVER_ERROR = 'publicdashboards.internalServerError',\n  INVALID_SESSION = 'publicdashboards.invalidSession',\n  EXPIRED_SESSION = 'publicdashboards.sessionExpired',\n}\nexport const DEFAULT_BODY_TEXT: BodyText = {\n  title: 'Request access',\n  description: \"You'll receive an email with a one-time link.\",\n};\n\nexport const DEFAULT_ERROR_TITLE = 'Something went wrong';\nexport const ERROR_DESCRIPTION =\n  \"To request access to the dashboard again, enter your email. You'll receive an email with a one-time link.\";\n\nconst EMAIL_SHARING_ERROR_TITLE_MAP: Record<string, string | undefined> = {\n  [EMAIL_SHARING_ACCESS_ERRORS.INTERNAL_SERVER_ERROR]: DEFAULT_ERROR_TITLE,\n  [EMAIL_SHARING_MAGIC_LINK_ERRORS.NOT_FOUND_MAGIC_LINK]: 'This link has expired or already been used',\n  [EMAIL_SHARING_MAGIC_LINK_ERRORS.EXPIRED_MAGIC_LINK]: 'This magic link has expired',\n  [EMAIL_SHARING_ACCESS_ERRORS.INVALID_SESSION]: 'You no longer have access',\n  [EMAIL_SHARING_ACCESS_ERRORS.EXPIRED_SESSION]: 'Your access has expired',\n};\n\nexport const getRequestAccessText = (errorQueryParam?: string): BodyText => {\n  if (!errorQueryParam) {\n    return DEFAULT_BODY_TEXT;\n  }\n\n  const errorTitle = EMAIL_SHARING_ERROR_TITLE_MAP[String(errorQueryParam)];\n  return { title: errorTitle || DEFAULT_ERROR_TITLE, description: ERROR_DESCRIPTION };\n};\n"],"names":["isFetchBaseQueryError","error","isKnownFetchError","emailSharingApi","builder","params","magicLinkToken","accessToken","dispatch","queryFulfilled","e","messageId","recipient","uid","_","result","dashboardUid","recipientUid","recipientEmail","email","useRequestAccessMutation","useGetActiveUserDashboardsQuery","useGetActiveUsersQuery","useConfirmAccessMutation","EMAIL_SHARING_MAGIC_LINK_ERRORS","EMAIL_SHARING_ACCESS_ERRORS","DEFAULT_BODY_TEXT","DEFAULT_ERROR_TITLE","ERROR_DESCRIPTION","EMAIL_SHARING_ERROR_TITLE_MAP","getRequestAccessText","errorQueryParam"],"sourceRoot":""}