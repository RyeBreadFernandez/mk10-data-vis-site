{"version":3,"file":"CSVExportPage.a3a8080cfe4b9508ee75.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/reports/CSVExportPage.tsx","webpack://grafana/./public/app/features/dashboard/containers/SoloPanelPage.tsx"],"sourcesContent":["import { saveAs } from 'file-saver';\nimport { useState, useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { applyFieldOverrides, PanelData, dateTimeFormat, toCSV, LoadingState, FieldConfigSource } from '@grafana/data';\nimport { config } from '@grafana/runtime';\nimport { useGrafana } from 'app/core/context/GrafanaContext';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { SoloPanel } from 'app/features/dashboard/containers/SoloPanelPage';\nimport { PanelModel, DashboardModel } from 'app/features/dashboard/state';\nimport { initDashboard } from 'app/features/dashboard/state/initDashboard';\nimport { StoreState } from 'app/types';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nexport interface OwnProps\n  extends GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId?: string; timezone?: string }> {\n  dashboard: DashboardModel | null;\n}\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = { initDashboard };\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector> & OwnProps;\n\nconst CSVExportPage = ({ initDashboard, route, queryParams, dashboard }: Props) => {\n  const { keybindings } = useGrafana();\n  const [panel, setPanel] = useState<PanelModel | null>(null);\n  const [notFound, setNotFound] = useState(false);\n  const { slug, uid, type } = useParams();\n\n  useEffect(() => {\n    initDashboard({\n      urlSlug: slug,\n      urlUid: uid,\n      urlType: type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: keybindings,\n    });\n  }, [slug, uid, type, route.routeName, keybindings, initDashboard]);\n\n  const getPanelId = () => {\n    return parseInt(queryParams.panelId ?? '0', 10);\n  };\n\n  useEffect(() => {\n    if (dashboard) {\n      const onDataUpdate = (panelData: PanelData) => {\n        if (!panelData || (panelData.state !== LoadingState.Done && panelData.state !== LoadingState.Streaming)) {\n          return;\n        }\n\n        const data = panelData.series;\n        const timeZone = queryParams.timezone || dashboard?.timezone;\n        let emptyFieldConfigSource: FieldConfigSource = { defaults: {}, overrides: [] };\n\n        const dataFrames = applyFieldOverrides({\n          data,\n          theme: config.theme2,\n          fieldConfig: panel?.fieldConfig || emptyFieldConfigSource,\n          replaceVariables: (value: string) => value,\n          timeZone: timeZone,\n        });\n\n        const dataFrameCsv = toCSV([dataFrames[0]], {});\n        const blob = new Blob([String.fromCharCode(0xfeff), dataFrameCsv], { type: 'text/csv;charset=utf-8' });\n        const fileName = `${panel?.getDisplayTitle()}-data-${dateTimeFormat(new Date())}.csv`;\n        saveAs(blob, fileName);\n      };\n      const panel = dashboard.getPanelByUrlId(queryParams.panelId!);\n\n      if (!panel) {\n        setNotFound(true);\n        return;\n      }\n\n      setPanel(panel);\n\n      panel\n        .getQueryRunner()\n        .getData({ withTransforms: true, withFieldConfig: true })\n        .subscribe({\n          next: (data) => onDataUpdate(data),\n        });\n    }\n  }, [dashboard, queryParams.panelId, queryParams.timezone]);\n\n  return (\n    <SoloPanel\n      dashboard={dashboard}\n      notFound={notFound}\n      panel={panel}\n      panelId={getPanelId()}\n      timezone={queryParams.timezone}\n    />\n  );\n};\n\nexport default connector(CSVExportPage);\n","import { css } from '@emotion/css';\nimport { useCallback, useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport { useParams } from 'react-router-dom-v5-compat';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Alert, useStyles2 } from '@grafana/ui';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { DashboardModel, PanelModel } from 'app/features/dashboard/state';\nimport { StoreState } from 'app/types';\n\nimport { useGrafana } from '../../../core/context/GrafanaContext';\nimport { DashboardPanel } from '../dashgrid/DashboardPanel';\nimport { initDashboard } from '../state/initDashboard';\n\nexport interface DashboardPageRouteParams {\n  uid?: string;\n  type?: string;\n  slug?: string;\n}\n\nconst mapStateToProps = (state: StoreState) => ({\n  dashboard: state.dashboard.getModel(),\n});\n\nconst mapDispatchToProps = {\n  initDashboard,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = GrafanaRouteComponentProps<DashboardPageRouteParams, { panelId: string; timezone?: string }> &\n  ConnectedProps<typeof connector>;\n\nexport interface State {\n  panel: PanelModel | null;\n  notFound: boolean;\n}\n\nexport const SoloPanelPage = ({ route, queryParams, dashboard, initDashboard }: Props) => {\n  const [panel, setPanel] = useState<State['panel']>(null);\n  const [notFound, setNotFound] = useState(false);\n  const { keybindings } = useGrafana();\n\n  const { slug, uid, type } = useParams();\n\n  useEffect(() => {\n    initDashboard({\n      urlSlug: slug,\n      urlUid: uid,\n      urlType: type,\n      routeName: route.routeName,\n      fixUrl: false,\n      keybindingSrv: keybindings,\n    });\n  }, [slug, uid, type, route.routeName, initDashboard, keybindings]);\n\n  const getPanelId = useCallback(() => {\n    return parseInt(queryParams.panelId ?? '0', 10);\n  }, [queryParams.panelId]);\n\n  useEffect(() => {\n    if (dashboard) {\n      const panel = dashboard.getPanelByUrlId(queryParams.panelId);\n\n      if (!panel) {\n        setNotFound(true);\n        return;\n      }\n\n      if (panel) {\n        dashboard.exitViewPanel(panel);\n      }\n      setPanel(panel);\n      dashboard.initViewPanel(panel);\n    }\n  }, [dashboard, queryParams.panelId]);\n\n  return (\n    <SoloPanel\n      dashboard={dashboard}\n      notFound={notFound}\n      panel={panel}\n      panelId={getPanelId()}\n      timezone={queryParams.timezone}\n    />\n  );\n};\n\nexport interface SoloPanelProps extends State {\n  dashboard: DashboardModel | null;\n  panelId: number;\n  timezone?: string;\n}\n\nexport const SoloPanel = ({ dashboard, notFound, panel, panelId, timezone }: SoloPanelProps) => {\n  const styles = useStyles2(getStyles);\n  if (notFound) {\n    return <Alert severity=\"error\" title={`Panel with id ${panelId} not found`} />;\n  }\n\n  if (!panel || !dashboard) {\n    return <div>Loading & initializing dashboard</div>;\n  }\n\n  return (\n    <div className={styles.container}>\n      <AutoSizer>\n        {({ width, height }) => {\n          if (width === 0) {\n            return null;\n          }\n          return (\n            <DashboardPanel\n              stateKey={panel.key}\n              width={width}\n              height={height}\n              dashboard={dashboard}\n              panel={panel}\n              isEditing={false}\n              isViewing={true}\n              lazy={false}\n              timezone={timezone}\n              hideMenu={true}\n            />\n          );\n        }}\n      </AutoSizer>\n    </div>\n  );\n};\n\nexport default connector(SoloPanelPage);\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  container: css({\n    position: 'fixed',\n    bottom: 0,\n    right: 0,\n    margin: 0,\n    left: 0,\n    top: 0,\n    width: '100%',\n    height: '100%',\n  }),\n});\n"],"names":["mapStateToProps","state","mapDispatchToProps","initDashboard","route","queryParams","dashboard","keybindings","panel","setPanel","notFound","setNotFound","slug","uid","type","getPanelId","onDataUpdate","panelData","data","timeZone","emptyFieldConfigSource","dataFrames","value","dataFrameCsv","blob","fileName","connector","SoloPanelPage","SoloPanel","panelId","timezone","styles","getStyles","width","height","theme"],"sourceRoot":""}