{"version":3,"file":"ReportsListPage.a8a1e246154b707e8127.js","mappings":"yMAqBA,MAAMA,KAAW,OAAI,CACnB,UAAW,QACb,CAAC,EAEKC,KAAgB,OAAI,CACxB,SAAU,QACV,OAAQ,QACV,CAAC,EAmED,EAjEqB,CAAC,CACpB,MAAAC,EACA,WAAAC,EACA,WAAAC,EACA,YAAAC,EACA,eAAAC,EACA,QAAAC,EACA,OAAAC,EACA,WAAAC,EACA,gBAAAC,EACA,aAAAC,EACA,QAAAC,EACA,aAAAC,CACF,IAAa,CACX,MAAMC,EAAS,OAEX,oBACG,UAAAN,KACC,QAAC,QACC,oBAAC,IAAI,CAAC,KAAK,QAAS,MACpB,oBAAE,sBAAUA,EAAO,KAAC,EACnBC,MACC,OAAC,KAAE,KAAMA,EAAY,OAAQE,EAAc,UAAU,YAClD,SAAAD,CAAA,CACH,IANM,cAQV,EAEA,GAEDE,KACC,OAAC,IAAK,CAAC,SAAS,OAAO,MAAOC,GAAgB,GAAI,UAAWZ,EAC3D,mBAAC,OAAI,wBAAyBW,CAAA,CAAS,EACzC,EAEA,IAEJ,EAIEG,EAAuBD,EAAO,EAIhC,MAHA,OAAI,CACF,aAAc,MAChB,CAAC,EAGCE,EAAWZ,EAAa,KAAa,KACrCa,KACJ,OAACD,EAAA,CACC,KAAK,KACL,QAAAT,EACA,KAAMH,EACN,KAAMD,EACN,UAAWY,EACX,cAAa,KAAU,WAAW,iBAAiB,SAASV,CAAW,EACvE,SAAUC,EAET,SAAAD,CAAA,CACH,EAGF,SAAO,OAAC,IAAgB,CAAC,UAAWL,EAAU,QAASE,EAAO,OAAQY,EAAO,EAAG,oBAAqBG,CAAA,CAAY,CACnH,C,kVCxEA,MAAMC,EAAgB,CAACC,EAAmBC,IAAmB,CAC3D,MAAMC,EAAmF,CAAC,OAAQ,YAAY,EAExGC,EAAYC,GAChBA,EAAO,WAAW,KAAK,CAAC,CAAE,UAAAC,CAAU,IAAMA,GAAW,KAAK,YAAY,EAAE,SAASJ,EAAO,YAAY,CAAC,CAAC,EAExG,OAAOD,EAAQ,OAAQI,GAEnBF,EAAa,KAAMI,GAAUF,EAAOE,CAAK,GAAG,YAAY,EAAE,SAASL,EAAO,YAAY,CAAC,CAAC,GAAKE,EAASC,CAAM,CAE/G,CACH,EAEMG,EAAwBC,GACrB,IAAI,IAAI,CACb,CAAC,cAAY,UAAWA,EAAM,OAAO,QAAQ,IAAI,EACjD,CAAC,cAAY,QAASA,EAAM,OAAO,QAAQ,IAAI,EAC/C,CAAC,cAAY,MAAOA,EAAM,OAAO,KAAK,OAAO,EAC7C,CAAC,cAAY,MAAOA,EAAM,OAAO,KAAK,OAAO,EAC7C,CAAC,cAAY,OAAQA,EAAM,OAAO,KAAK,QAAQ,CACjD,CAAC,EAGUC,EAAwB,CAAC,CAAE,aAAAC,EAAc,aAAAC,EAAc,QAAAX,EAAS,OAAAC,CAAO,IAAM,CACxF,MAAMO,KAAQ,MAAU,EAClBI,KAAS,MAAWC,CAAS,EAE7BC,EAAqBV,GAAmB,CAC5C,MAAMW,KAAW,KAAsBX,EAAO,KAAK,EAEnDO,EACE,CACE,GAAGP,EACH,MAAOW,CACT,EACA,EACF,CACF,EAEMC,EAAgB,KAAW,cAAc,sBAAoB,cAAc,EAC3EC,EAAkB,KAAW,cAAc,sBAAoB,eAAe,EAEpF,SACE,OAAC,OACE,SAAAlB,EAAcC,EAASC,CAAM,EAAE,IAAKG,GAAW,CAC9C,MAAMc,EAAkBd,EAAO,WAAW,MAAM,GAAG,EAC7Ce,EAAgBD,EAAgB,OAChCE,KAAe,MAAkBhB,EAAO,QAAQ,EAChD,CAAE,QAAAiB,EAAS,SAAAC,EAAU,YAAAC,GAAa,YAAAC,CAAY,KAAI,KAAmBpB,CAAM,EAC3EqB,GAAQlB,EAAqBC,CAAK,EAAE,IAAIJ,EAAO,KAAK,EAC1D,SACE,QAACsB,EAAA,EAAa,CAAiB,KAAM,mBAAmBtB,EAAO,EAAE,GAAI,UAAWQ,EAAO,UACrF,qBAAC,OAAI,UAAWA,EAAO,KACrB,oBAAC,QAAK,UAAWA,EAAO,MAAQ,SAAAR,EAAO,KAAK,KAC5C,OAAC,QAAK,UAAWQ,EAAO,WACrB,UAAC,GAAG,IAAI,IAAIR,EAAO,WAAW,IAAI,CAAC,CAAE,UAAAC,CAAU,IAAMA,GAAW,IAAI,CAAC,CAAC,EAAE,KAAK,IAAI,EACpF,GACF,KACA,OAAC,OAAI,UAAWO,EAAO,WACrB,mBAACe,EAAA,EAAO,CAAC,QAAST,EAAgB,KAAK,IAAI,EAAG,UAAW,MACvD,mBAAC,OAAK,YAAGC,CAAa,aAAaA,EAAgB,EAAI,IAAM,EAAE,GAAG,EACpE,EACF,KACA,QAAC,OAAI,UAAWP,EAAO,SACrB,oBAAC,QACC,aAAW,MACTA,EAAO,kBACP;AAAA,6BACWa,EAAK;AAAA,mBAElB,EAEC,SAAAD,EAAY,YAAY,EAC3B,EACC,CAACH,MAAW,OAAC,QAAK,UAAWT,EAAO,KAAO,SAAAQ,CAAA,CAAa,GAC3D,KACA,QAAC,OAAI,UAAWR,EAAO,cACrB,oBAACe,EAAA,GACC,QAAS,GACPL,EAAYE,IAAgB,cAAY,SAAQ,KAAcpB,EAAO,QAAQ,EAAI,SAAY,OAC/F,UACA,UAAW,MAEX,mBAACwB,EAAA,IACC,KAAM,SACN,QAAS,YACT,KAAM,OACN,KAAMN,EAAW,OAAS,QAC1B,KAAM,KACN,QAAUO,GAAM,CACdA,EAAE,eAAe,EACjBf,EAAkBV,CAAM,CAC1B,EACA,SAAUmB,IAAe,CAACP,MAAiB,KAAiBZ,CAAM,EACpE,EACF,KACA,OAAC0B,EAAA,GACC,YAAY,SACZ,eAAe,cACf,KAAM,KACN,SAAU,CAACb,EACX,UAAW,IAAMP,EAAaN,CAAM,EAEpC,mBAACwB,EAAA,IACC,KAAK,SACL,UAAWhB,EAAO,aAClB,aAAY,iBAAiBR,EAAO,IAAI,GACxC,QAAQ,YACR,KAAK,YACL,KAAM,KACN,KAAM,OACR,EACF,GACF,IA9DkBA,EAAO,EA+D3B,CAEJ,CAAC,EACH,CAEJ,EAEMS,EAAaL,IACV,CACL,aAAW;AAAA;AAAA;AAAA;AAAA,MAKX,QAAM;AAAA;AAAA;AAAA;AAAA,MAKN,SAAO;AAAA,mBACQA,EAAM,WAAW,GAAG,QAAQ;AAAA,qBAC1BA,EAAM,WAAW,cAAc;AAAA,MAEhD,cAAY;AAAA,mBACGA,EAAM,WAAW,UAAU,QAAQ;AAAA,eACvCA,EAAM,OAAO,KAAK,SAAS;AAAA,MAEtC,cAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MASZ,YAAU;AAAA;AAAA;AAAA;AAAA,MAKV,kBAAgB;AAAA;AAAA,MAGhB,iBAAe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAUf,gBAAc;AAAA;AAAA,iBAEDA,EAAM,OAAO,MAAM,IAAI;AAAA,MAEpC,QAAM;AAAA,eACKA,EAAM,OAAO,KAAK,SAAS;AAAA,KAExC,G,gDC/KF,SAASuB,EAAgBC,EAA6B,CACpD,MAAO,CACL,QAASA,EAAM,QAAQ,QACvB,WAAYA,EAAM,QAAQ,eAC1B,YAAaA,EAAM,QAAQ,YAC3B,YAAaA,EAAM,QAAQ,WAC7B,CACF,CAEA,MAAMC,GAAqB,CACzB,WAAU,KACV,aAAY,KACZ,aAAY,IACd,EAEMC,MAAY,WAAQH,EAAiBE,EAAkB,EAGhDE,EAAkB,CAAC,CAC9B,WAAAC,EACA,aAAA1B,EACA,aAAAC,EACA,QAAAX,EACA,YAAAqC,EACA,WAAAC,CACF,IAAa,CACX,KAAM,CAACrC,EAAQsC,CAAS,KAAI,YAAS,EAAE,KAEvC,aAAU,IAAM,CACdH,EAAW,CACb,EAAG,CAACA,CAAU,CAAC,EAEf,MAAMI,EAAkBpC,GAAmB,CACzCM,EAAaN,EAAO,EAAE,CACxB,EAEMqC,EAAa,IAAM,CACvB,KAAM,CAAE,kBAAAC,CAAkB,EAAIC,EAAA,EACxBC,KAAuB,KAAwB,EAC/CC,EAAkB,KAAW,cAAc,sBAAoB,eAAe,EAC9EC,EAAkBJ,GAAqBG,EAE7C,SAAK,KAAe,kBAAkB,KAepC,oBACG,WAACH,MAAqB,OAAC,IAAiB,CAAC,QAAQ,OAAQ,GACzDA,GAAqBE,IAAyB,MAAQA,EAAuB,MAAK,OAAC,IAAkB,EAAC,KACtG,MAAe,MACd,OAACG,EAAA,IACC,UAAW,YACX,aAAc,QACd,YAAa,YACb,KAAM,6DACR,EAEDV,EAAc,KACb,oBACE,oBAAC,OAAI,UAAU,kBACb,oBAAC,OAAI,UAAU,wBACb,oBAACW,EAAA,GACC,YAAa,8DACb,UAAQ,OAACC,EAAA,EAAI,CAAC,KAAM,SAAU,EAC9B,MAAO,GACP,SAAWpB,GAAMU,EAAWV,EAAE,OAA4B,KAAK,EACjE,KACA,OAAC,OAAI,UAAU,yBAA0B,MACzC,OAAC,KAAU,CAAC,QAAQ,UAAU,KAAK,cAAc,SAAU,CAACiB,EAAiB,KAAM,OAAQ,+BAE3F,GACF,EACF,KACA,OAACrC,EAAU,CAAC,QAAAT,EAAkB,aAAcwC,EAAgB,aAAc7B,EAAc,OAAAV,CAAA,CAAgB,GAC1G,EAEAyC,OACC,MAAe,KACd,OAAC,uBAAoB,CAAC,OAAQ,CAAE,KAAM,gBAAiB,KAAM,aAAc,EAAG,KAE9E,OAACQ,EAAA,GACC,MAAM,uCACN,WAAW,WACX,WAAW,cACX,YAAY,sBACZ,eAAgB,CAACJ,EACjB,OAAO,GACP,WAAW,GACX,gBAAgB,GAChB,aAAa,SACf,IAGN,KA5DE,oBACE,oBAACK,EAAA,GACC,QAAQ;AAAA,kHAEV,EACCd,EAAc,MACb,OAAC5B,EAAU,CAAC,QAAAT,EAAkB,aAAcwC,EAAgB,aAAc7B,EAAc,OAAAV,CAAA,CAAgB,GAE5G,CAsDN,EAEA,SACE,OAACmD,EAAA,IACC,MAAM,eACN,SAAS,oHAET,mBAACA,EAAA,GAAK,SAAL,CAAc,UAAW,CAACd,EAAa,SAAAG,EAAW,EAAE,EACvD,CAEJ,EAEA,GAAeP,GAAUC,CAAe,C,sICpIxC,MAAMkB,EAAqB,IAAM,CAC/B,MAAMzC,KAAS,MAAWC,CAAS,EAEnC,SACE,QAAC,MACC,MAAM,UACN,SAAS,oHAET,oBAAC,OAAI,UAAWD,EAAO,IACrB,mBAAC,KAAU,CAAC,YAAa,YAAa,UAAW,YAAa,EAChE,KACA,OAAC,KAAK,SAAL,CAAc,UAAWA,EAAO,SAC/B,mBAAC0C,EAAA,EAAqB,EACxB,KAEA,OAAC,OAAI,UAAW1C,EAAO,OAAQ,GACjC,CAEJ,EAEa0C,EAAuB,CAAC,CAAE,OAAAC,CAAO,OAE1C,OAAC,MACC,YAAa,YACb,YACE,mJAEF,UAAW,CACT,8CACA,wCACA,oDACA,6CACF,EACA,WAAY,gEACZ,MAAO,sBACP,QACE,wJAEF,OAAAA,CAAA,CACF,EAGE1C,EAAaL,IACV,CACL,YAAU;AAAA;AAAA;AAAA;AAAA,MAKV,UAAQ;AAAA;AAAA,MAGR,OAAK;AAAA,QACDA,EAAM,YAAY,GAAG,IAAI,CAAC;AAAA,mBACfA,EAAM,QAAQ,EAAG,CAAC,CAAC;AAAA;AAAA;AAAA,QAG9BA,EAAM,YAAY,GAAG,IAAI,CAAC;AAAA,mBACfA,EAAM,QAAQ,EAAG,CAAC,CAAC;AAAA;AAAA,KAGpC,GAGF,EAAe6C,C","sources":["webpack://grafana/./public/app/core/components/EmptyListCTA/EmptyListCTA.tsx","webpack://grafana/./public/app/extensions/reports/ReportsList.tsx","webpack://grafana/./public/app/extensions/reports/ReportsListPage.tsx","webpack://grafana/./public/app/extensions/reports/ReportsUpgradePage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { MouseEvent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button, CallToActionCard, Icon, IconName, LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  buttonIcon: IconName;\n  buttonLink?: string;\n  buttonTitle: string;\n  buttonDisabled?: boolean;\n  onClick?: (event: MouseEvent) => void;\n  proTip?: string;\n  proTipLink?: string;\n  proTipLinkTitle?: string;\n  proTipTarget?: string;\n  infoBox?: { __html: string };\n  infoBoxTitle?: string;\n}\n\nconst ctaStyle = css({\n  textAlign: 'center',\n});\n\nconst infoBoxStyles = css({\n  maxWidth: '700px',\n  margin: '0 auto',\n});\n\nconst EmptyListCTA = ({\n  title,\n  buttonIcon,\n  buttonLink,\n  buttonTitle,\n  buttonDisabled,\n  onClick,\n  proTip,\n  proTipLink,\n  proTipLinkTitle,\n  proTipTarget,\n  infoBox,\n  infoBoxTitle,\n}: Props) => {\n  const footer = () => {\n    return (\n      <>\n        {proTip ? (\n          <span key=\"proTipFooter\">\n            <Icon name=\"rocket\" />\n            <> ProTip: {proTip} </>\n            {proTipLink && (\n              <a href={proTipLink} target={proTipTarget} className=\"text-link\">\n                {proTipLinkTitle}\n              </a>\n            )}\n          </span>\n        ) : (\n          ''\n        )}\n        {infoBox ? (\n          <Alert severity=\"info\" title={infoBoxTitle ?? ''} className={infoBoxStyles}>\n            <div dangerouslySetInnerHTML={infoBox} />\n          </Alert>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  };\n\n  const ctaElementClassName = !footer()\n    ? css({\n        marginBottom: '20px',\n      })\n    : '';\n\n  const ButtonEl = buttonLink ? LinkButton : Button;\n  const ctaElement = (\n    <ButtonEl\n      size=\"lg\"\n      onClick={onClick}\n      href={buttonLink}\n      icon={buttonIcon}\n      className={ctaElementClassName}\n      data-testid={selectors.components.CallToActionCard.buttonV2(buttonTitle)}\n      disabled={buttonDisabled}\n    >\n      {buttonTitle}\n    </ButtonEl>\n  );\n\n  return <CallToActionCard className={ctaStyle} message={title} footer={footer()} callToActionElement={ctaElement} />;\n};\n\nexport default EmptyListCTA;\n","import { css, cx } from '@emotion/css';\nimport { FC } from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { Button, CardContainer, ConfirmButton, Tooltip, useStyles2, useTheme2 } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { AccessControlAction, Report, ReportState } from '../types';\n\nimport { getButtonText } from './utils/pageActions';\nimport { getReportStateInfo, getToggledReportState } from './utils/reportState';\nimport { parseScheduleTime } from './utils/scheduler';\nimport { getMissingFields } from './utils/validation';\n\ninterface Props {\n  reports: Report[];\n  deleteReport: (report: Report) => void;\n  updateReport: (report: Report, refetch?: boolean) => void;\n  filter: string;\n}\n\nconst filterReports = (reports: Report[], filter: string) => {\n  const filterFields: Array<keyof Pick<Report, 'name' | 'dashboardName' | 'recipients'>> = ['name', 'recipients'];\n\n  const dbFilter = (report: Report) =>\n    report.dashboards.some(({ dashboard }) => dashboard?.name.toLowerCase().includes(filter.toLowerCase()));\n\n  return reports.filter((report) => {\n    return (\n      filterFields.some((field) => report[field]?.toLowerCase().includes(filter.toLowerCase())) || dbFilter(report)\n    );\n  });\n};\n\nconst getReportStateColors = (theme: GrafanaTheme2) => {\n  return new Map([\n    [ReportState.Scheduled, theme.colors.success.text],\n    [ReportState.Expired, theme.colors.warning.text],\n    [ReportState.Draft, theme.colors.text.primary],\n    [ReportState.Never, theme.colors.text.primary],\n    [ReportState.Paused, theme.colors.text.disabled],\n  ]);\n};\n\nexport const ReportList: FC<Props> = ({ deleteReport, updateReport, reports, filter }) => {\n  const theme = useTheme2();\n  const styles = useStyles2(getStyles);\n\n  const toggleReportState = (report: Report) => {\n    const newState = getToggledReportState(report.state);\n\n    updateReport(\n      {\n        ...report,\n        state: newState,\n      },\n      true\n    );\n  };\n\n  const canEditReport = contextSrv.hasPermission(AccessControlAction.ReportingWrite);\n  const canDeleteReport = contextSrv.hasPermission(AccessControlAction.ReportingDelete);\n\n  return (\n    <div>\n      {filterReports(reports, filter).map((report) => {\n        const splitRecipients = report.recipients.split(';');\n        const numRecipients = splitRecipients.length;\n        const scheduleTime = parseScheduleTime(report.schedule);\n        const { isNever, showPlay, disableEdit, reportState } = getReportStateInfo(report);\n        const color = getReportStateColors(theme).get(report.state);\n        return (\n          <CardContainer key={report.id} href={`reports/confirm/${report.id}`} className={styles.container}>\n            <div className={styles.info}>\n              <span className={styles.title}>{report.name}</span>\n              <span className={styles.dashboards}>\n                {[...new Set(report.dashboards.map(({ dashboard }) => dashboard?.name))].join(', ')}\n              </span>\n            </div>\n            <div className={styles.recipients}>\n              <Tooltip content={splitRecipients.join(', ')} placement={'top'}>\n                <div>{`${numRecipients} recipient${numRecipients > 1 ? 's' : ''}`}</div>\n              </Tooltip>\n            </div>\n            <div className={styles.schedule}>\n              <span\n                className={cx(\n                  styles.scheduleStatus,\n                  css`\n                    color: ${color};\n                  `\n                )}\n              >\n                {reportState.toUpperCase()}\n              </span>\n              {!isNever && <span className={styles.text}>{scheduleTime}</span>}\n            </div>\n            <div className={styles.buttonWrapper}>\n              <Tooltip\n                content={`${\n                  showPlay ? (reportState === ReportState.Draft ? getButtonText(report.schedule) : 'Resume') : 'Pause'\n                } report`}\n                placement={'top'}\n              >\n                <Button\n                  type={'button'}\n                  variant={'secondary'}\n                  fill={'text'}\n                  icon={showPlay ? 'play' : 'pause'}\n                  size={'md'}\n                  onClick={(e) => {\n                    e.preventDefault();\n                    toggleReportState(report);\n                  }}\n                  disabled={disableEdit || !canEditReport || getMissingFields(report)}\n                />\n              </Tooltip>\n              <ConfirmButton\n                confirmText=\"Delete\"\n                confirmVariant=\"destructive\"\n                size={'md'}\n                disabled={!canDeleteReport}\n                onConfirm={() => deleteReport(report)}\n              >\n                <Button\n                  type=\"button\"\n                  className={styles.deleteButton}\n                  aria-label={`Delete report ${report.name}`}\n                  variant=\"secondary\"\n                  icon=\"trash-alt\"\n                  size={'md'}\n                  fill={'text'}\n                />\n              </ConfirmButton>\n            </div>\n          </CardContainer>\n        );\n      })}\n    </div>\n  );\n};\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    container: css`\n    & > a {\n        align-items: center;\n      },\n    `,\n    info: css`\n      display: flex;\n      flex-direction: column;\n      width: 30%;\n    `,\n    title: css`\n      font-size: ${theme.typography.h5.fontSize};\n      font-weight: ${theme.typography.fontWeightBold};\n    `,\n    dashboards: css`\n      font-size: ${theme.typography.bodySmall.fontSize};\n      color: ${theme.colors.text.secondary};\n    `,\n    recipients: css`\n      display: flex;\n      width: 25%;\n      cursor: pointer;\n\n      &:hover {\n        text-decoration: underline;\n      },\n    `,\n    schedule: css`\n      display: flex;\n      flex-direction: column;\n      width: 40%;\n    `,\n    scheduleStatus: css`\n      text-transform: uppercase;\n    `,\n    buttonWrapper: css`\n      display: flex;\n      align-items: center;\n      width: 5%;\n      & > button {\n        &[disabled] {\n          pointer-events: all;\n        },\n      },\n    `,\n    deleteButton: css`\n      &:hover {\n        color: ${theme.colors.error.text};\n    `,\n    text: css`\n      color: ${theme.colors.text.secondary};\n    `,\n  };\n};\n","import { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { config, featureEnabled } from '@grafana/runtime';\nimport { Icon, Input, LinkButton } from '@grafana/ui';\nimport EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport { contextSrv } from 'app/core/core';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { highlightTrial } from 'app/features/admin/utils';\n\nimport { EnterpriseStoreState, Report, AccessControlAction } from '../types';\n\nimport { NoRendererInfoBox, OldRendererInfoBox } from './RenderingWarnings';\nimport { ReportList } from './ReportsList';\nimport { ReportUpgradeContent } from './ReportsUpgradePage';\nimport { UnavailableFeatureInfoBox } from './UnavailableFeatureInfoBox';\nimport { getReports, deleteReport, updateReport } from './state/actions';\nimport { getRendererMajorVersion } from './utils/renderer';\n\nfunction mapStateToProps(state: EnterpriseStoreState) {\n  return {\n    reports: state.reports.reports,\n    hasFetched: state.reports.hasFetchedList,\n    searchQuery: state.reports.searchQuery,\n    reportCount: state.reports.reportCount,\n  };\n}\n\nconst mapDispatchToProps = {\n  getReports,\n  deleteReport,\n  updateReport,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\nexport type Props = GrafanaRouteComponentProps & ConnectedProps<typeof connector>;\n\nexport const ReportsListPage = ({\n  getReports,\n  deleteReport,\n  updateReport,\n  reports,\n  reportCount,\n  hasFetched,\n}: Props) => {\n  const [filter, setFilter] = useState('');\n\n  useEffect(() => {\n    getReports();\n  }, [getReports]);\n\n  const onDeleteReport = (report: Report) => {\n    deleteReport(report.id);\n  };\n\n  const renderList = () => {\n    const { rendererAvailable } = config;\n    const rendererMajorVersion = getRendererMajorVersion();\n    const canCreateReport = contextSrv.hasPermission(AccessControlAction.ReportingCreate);\n    const enableNewReport = rendererAvailable && canCreateReport;\n\n    if (!featureEnabled('reports.creation')) {\n      return (\n        <>\n          <UnavailableFeatureInfoBox\n            message=\"Creating new reports is not available with an expired license.\n              Existing reports continue to be processed but you need to update your license to create a new one.\"\n          />\n          {reportCount > 0 && (\n            <ReportList reports={reports} deleteReport={onDeleteReport} updateReport={updateReport} filter={filter} />\n          )}\n        </>\n      );\n    }\n\n    return (\n      <>\n        {!rendererAvailable && <NoRendererInfoBox variant=\"error\" />}\n        {rendererAvailable && rendererMajorVersion !== null && rendererMajorVersion < 3 && <OldRendererInfoBox />}\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'reporting'}\n            eventVariant={'trial'}\n            featureName={'reporting'}\n            text={'Create unlimited reports during your trial of Grafana Pro.'}\n          />\n        )}\n        {reportCount > 0 ? (\n          <>\n            <div className=\"page-action-bar\">\n              <div className=\"gf-form gf-form--grow\">\n                <Input\n                  placeholder={'Search reports by report name, dashboard name or recipients'}\n                  prefix={<Icon name={'search'} />}\n                  width={56}\n                  onChange={(e) => setFilter((e.target as HTMLInputElement).value)}\n                />\n                <div className=\"page-action-bar__spacer\" />\n                <LinkButton variant=\"primary\" href=\"reports/new\" disabled={!enableNewReport} icon={'plus'}>\n                  Create a new report\n                </LinkButton>\n              </div>\n            </div>\n            <ReportList reports={reports} deleteReport={onDeleteReport} updateReport={updateReport} filter={filter} />\n          </>\n        ) : (\n          rendererAvailable &&\n          (highlightTrial() ? (\n            <ReportUpgradeContent action={{ text: 'Create report', link: 'reports/new' }} />\n          ) : (\n            <EmptyListCTA\n              title=\"You haven't created any reports yet.\"\n              buttonIcon=\"envelope\"\n              buttonLink=\"reports/new\"\n              buttonTitle=\"Create a new report\"\n              buttonDisabled={!enableNewReport}\n              proTip=\"\"\n              proTipLink=\"\"\n              proTipLinkTitle=\"\"\n              proTipTarget=\"_blank\"\n            />\n          ))\n        )}\n      </>\n    );\n  };\n\n  return (\n    <Page\n      navId=\"reports-list\"\n      subTitle=\"Manage automatically generated PDF reports from any dashboards and have Grafana email them to interested parties.\"\n    >\n      <Page.Contents isLoading={!hasFetched}>{renderList()}</Page.Contents>\n    </Page>\n  );\n};\n\nexport default connector(ReportsListPage);\n","import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\n\nconst ReportsUpgradePage = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Page\n      navId=\"reports\"\n      subTitle=\"Manage automatically generated PDF reports from any dashboards and have Grafana email them to interested parties.\"\n    >\n      <div className={styles.box}>\n        <UpgradeBox featureName={'reporting'} featureId={'reporting'} />\n      </div>\n      <Page.Contents className={styles.contents}>\n        <ReportUpgradeContent />\n      </Page.Contents>\n      {/*Push down the page footer*/}\n      <div className={styles.spacer} />\n    </Page>\n  );\n};\n\nexport const ReportUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  return (\n    <UpgradeContent\n      featureName={'reporting'}\n      description={\n        'Reporting allows you to automatically generate PDFs from any of your dashboards and have Grafana email them to interested parties on a schedule.'\n      }\n      listItems={[\n        'Customize your exact layout and orientation',\n        'Personalize with your unique branding',\n        'Specify permissions for users across your company',\n        'Choose to send a report at custom intervals',\n      ]}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/reporting/'}\n      image={'reporting-email.png'}\n      caption={\n        'Create reports to share your SLO performance, business metrics, cost and utilization metrics or anything else you can express in a Grafana dashboard.'\n      }\n      action={action}\n    />\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    contents: css`\n      &.page-body {\n        flex: 0;\n      }\n    `,\n    spacer: css`\n      flex: 1;\n    `,\n    box: css`\n      ${theme.breakpoints.up('sm')} {\n        padding: ${theme.spacing(0, 1)};\n      }\n\n      ${theme.breakpoints.up('md')} {\n        padding: ${theme.spacing(0, 2)};\n      }\n    `,\n  };\n};\n\nexport default ReportsUpgradePage;\n"],"names":["ctaStyle","infoBoxStyles","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","onClick","proTip","proTipLink","proTipLinkTitle","proTipTarget","infoBox","infoBoxTitle","footer","ctaElementClassName","ButtonEl","ctaElement","filterReports","reports","filter","filterFields","dbFilter","report","dashboard","field","getReportStateColors","theme","ReportList","deleteReport","updateReport","styles","getStyles","toggleReportState","newState","canEditReport","canDeleteReport","splitRecipients","numRecipients","scheduleTime","isNever","showPlay","disableEdit","reportState","color","CardContainer","Tooltip","Button","e","ConfirmButton","mapStateToProps","state","mapDispatchToProps","connector","ReportsListPage","getReports","reportCount","hasFetched","setFilter","onDeleteReport","renderList","rendererAvailable","config","rendererMajorVersion","canCreateReport","enableNewReport","UpgradeBox","Input","Icon","EmptyListCTA","UnavailableFeatureInfoBox","Page","ReportsUpgradePage","ReportUpgradeContent","action"],"sourceRoot":""}