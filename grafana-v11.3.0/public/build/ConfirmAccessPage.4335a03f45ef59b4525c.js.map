{"version":3,"file":"ConfirmAccessPage.4335a03f45ef59b4525c.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/Login/LoginLayout.tsx","webpack://grafana/./public/app/extensions/publicdashboards/ConfirmAccessPage.tsx","webpack://grafana/./public/app/extensions/publicdashboards/api/emailSharingApi.ts","webpack://grafana/./public/app/extensions/publicdashboards/utils.ts"],"sourcesContent":["import { cx, css, keyframes } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport * as React from 'react';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\n\nimport { Branding } from '../Branding/Branding';\nimport { BrandingSettings } from '../Branding/types';\nimport { Footer } from '../Footer/Footer';\n\ninterface InnerBoxProps {\n  enterAnimation?: boolean;\n}\nexport const InnerBox = ({ children, enterAnimation = true }: React.PropsWithChildren<InnerBoxProps>) => {\n  const loginStyles = useStyles2(getLoginStyles);\n  return <div className={cx(loginStyles.loginInnerBox, enterAnimation && loginStyles.enterAnimation)}>{children}</div>;\n};\n\nexport interface LoginLayoutProps {\n  /** Custom branding settings that can be used e.g. for previewing the Login page changes */\n  branding?: BrandingSettings;\n  isChangingPassword?: boolean;\n}\n\nexport const LoginLayout = ({ children, branding, isChangingPassword }: React.PropsWithChildren<LoginLayoutProps>) => {\n  const loginStyles = useStyles2(getLoginStyles);\n  const [startAnim, setStartAnim] = useState(false);\n  const subTitle = branding?.loginSubtitle ?? Branding.GetLoginSubTitle();\n  const loginTitle = branding?.loginTitle ?? Branding.LoginTitle;\n  const loginBoxBackground = branding?.loginBoxBackground || Branding.LoginBoxBackground();\n  const loginLogo = branding?.loginLogo;\n  const hideEdition = branding?.hideEdition ?? Branding.HideEdition;\n\n  useEffect(() => setStartAnim(true), []);\n\n  return (\n    <Branding.LoginBackground\n      className={cx(loginStyles.container, startAnim && loginStyles.loginAnim, branding?.loginBackground)}\n    >\n      <div className={loginStyles.loginMain}>\n        <div className={cx(loginStyles.loginContent, loginBoxBackground, 'login-content-box')}>\n          <div className={loginStyles.loginLogoWrapper}>\n            <Branding.LoginLogo className={loginStyles.loginLogo} logo={loginLogo} />\n            <div className={loginStyles.titleWrapper}>\n              {isChangingPassword ? (\n                <h1 className={loginStyles.mainTitle}>Update your password</h1>\n              ) : (\n                <>\n                  <h1 className={loginStyles.mainTitle}>{loginTitle}</h1>\n                  {subTitle && <h3 className={loginStyles.subTitle}>{subTitle}</h3>}\n                </>\n              )}\n            </div>\n          </div>\n          <div className={loginStyles.loginOuterBox}>{children}</div>\n        </div>\n      </div>\n      {branding?.hideFooter ? <></> : <Footer hideEdition={hideEdition} customLinks={branding?.footerLinks} />}\n    </Branding.LoginBackground>\n  );\n};\n\nconst flyInAnimation = keyframes`\nfrom{\n  opacity: 0;\n  transform: translate(-60px, 0px);\n}\n\nto{\n  opacity: 1;\n  transform: translate(0px, 0px);\n}`;\n\nexport const getLoginStyles = (theme: GrafanaTheme2) => {\n  return {\n    loginMain: css({\n      flexGrow: 1,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      minWidth: '100%',\n    }),\n    container: css({\n      minHeight: '100%',\n      backgroundPosition: 'center',\n      backgroundRepeat: 'no-repeat',\n      flex: 1,\n      minWidth: '100%',\n      marginLeft: 0,\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    loginAnim: css({\n      ['&:before']: {\n        opacity: 1,\n      },\n\n      ['.login-content-box']: {\n        opacity: 1,\n      },\n    }),\n    submitButton: css({\n      justifyContent: 'center',\n      width: '100%',\n    }),\n    loginLogo: css({\n      width: '100%',\n      maxWidth: 60,\n      marginBottom: theme.spacing(2),\n\n      [theme.breakpoints.up('sm')]: {\n        maxWidth: 100,\n      },\n    }),\n    loginLogoWrapper: css({\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexDirection: 'column',\n      padding: theme.spacing(3),\n    }),\n    titleWrapper: css({\n      textAlign: 'center',\n    }),\n    mainTitle: css({\n      fontSize: 22,\n\n      [theme.breakpoints.up('sm')]: {\n        fontSize: 32,\n      },\n    }),\n    subTitle: css({\n      fontSize: theme.typography.size.md,\n      color: theme.colors.text.secondary,\n    }),\n    loginContent: css({\n      maxWidth: 478,\n      width: `calc(100% - 2rem)`,\n      display: 'flex',\n      alignItems: 'stretch',\n      flexDirection: 'column',\n      position: 'relative',\n      justifyContent: 'flex-start',\n      zIndex: 1,\n      minHeight: 320,\n      borderRadius: theme.shape.radius.default,\n      padding: theme.spacing(2, 0),\n      opacity: 0,\n      [theme.transitions.handleMotion('no-preference', 'reduce')]: {\n        transition: 'opacity 0.5s ease-in-out',\n      },\n\n      [theme.breakpoints.up('sm')]: {\n        minHeight: theme.spacing(40),\n        justifyContent: 'center',\n      },\n    }),\n    loginOuterBox: css({\n      display: 'flex',\n      overflowY: 'hidden',\n      alignItems: 'center',\n      justifyContent: 'center',\n    }),\n    loginInnerBox: css({\n      padding: theme.spacing(0, 2, 2, 2),\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n      justifyContent: 'center',\n      flexGrow: 1,\n      maxWidth: 415,\n      width: '100%',\n      transform: 'translate(0px, 0px)',\n      [theme.transitions.handleMotion('no-preference')]: {\n        transition: '0.25s ease',\n      },\n    }),\n    enterAnimation: css({\n      [theme.transitions.handleMotion('no-preference')]: {\n        animation: `${flyInAnimation} ease-out 0.2s`,\n      },\n    }),\n  };\n};\n","import { css } from '@emotion/css';\nimport { useParams } from 'react-router-dom-v5-compat';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { selectors as e2eSelectors } from '@grafana/e2e-selectors/src';\nimport { Button, Spinner, useStyles2 } from '@grafana/ui';\nimport { InnerBox, LoginLayout } from 'app/core/components/Login/LoginLayout';\nimport { useQueryParams } from 'app/core/hooks/useQueryParams';\n\nimport { useConfirmAccessMutation } from './api/emailSharingApi';\n\nconst selectors = e2eSelectors.pages.PublicDashboardConfirmAccess;\nexport function ConfirmAccessPage() {\n  const styles = useStyles2(getStyles);\n\n  const { accessToken = '' } = useParams<{ accessToken: string }>();\n  const [{ magicLinkToken }] = useQueryParams();\n  const [confirmAccess, { isLoading, isSuccess }] = useConfirmAccessMutation();\n  const onConfirmAccessClick = async () => {\n    await confirmAccess({ accessToken, magicLinkToken: String(magicLinkToken) });\n  };\n\n  return (\n    <LoginLayout\n      branding={{\n        loginTitle: 'Dashboard access',\n        loginSubtitle:\n          'Get access to the dashboard for 30 days. After 30 days, you can request access again to continue viewing the dashboard.',\n        hideFooter: true,\n      }}\n    >\n      <InnerBox>\n        <Button\n          data-testid={selectors.submitButton}\n          disabled={isLoading || isSuccess}\n          type=\"submit\"\n          className={styles.form}\n          onClick={onConfirmAccessClick}\n        >\n          <span>Confirm access</span>\n          {isLoading && <Spinner className={styles.loadingSpinner} />}\n        </Button>\n      </InnerBox>\n    </LoginLayout>\n  );\n}\n\nexport default ConfirmAccessPage;\n\nconst getStyles = (theme: GrafanaTheme2) => ({\n  loadingSpinner: css({\n    marginLeft: theme.spacing(1),\n  }),\n  form: css({\n    justifyContent: 'center',\n    width: '100%',\n  }),\n});\n","import { config, FetchError, isFetchError } from '@grafana/runtime';\nimport { notifyApp } from 'app/core/actions';\nimport { createSuccessNotification } from 'app/core/copy/appNotification';\nimport { t } from 'app/core/internationalization';\nimport { publicDashboardApi } from 'app/features/dashboard/api/publicDashboardApi';\nimport {\n  SessionDashboard,\n  SessionUser,\n} from 'app/features/dashboard/components/ShareModal/SharePublicDashboard/SharePublicDashboardUtils';\n\nimport { EMAIL_SHARING_MAGIC_LINK_ERRORS } from '../utils';\n\nfunction isFetchBaseQueryError(error: unknown): error is { error: FetchError } {\n  return typeof error === 'object' && error != null && 'error' in error;\n}\n\nfunction isKnownFetchError(error: unknown): error is { error: FetchError } {\n  return isFetchBaseQueryError(error) && isFetchError(error.error);\n}\n\nconst emailSharingApi = publicDashboardApi.injectEndpoints({\n  endpoints: (builder) => ({\n    requestAccess: builder.mutation<void, { email: string; accessToken: string }>({\n      query: (params) => ({\n        url: '/public/dashboards/share/request-access',\n        method: 'POST',\n        data: params,\n      }),\n    }),\n    confirmAccess: builder.mutation<{ error?: string }, { magicLinkToken: string; accessToken: string }>({\n      query: ({ magicLinkToken, accessToken }) => ({\n        url: `/public/dashboards/share/${magicLinkToken}`,\n        method: 'POST',\n      }),\n      async onQueryStarted({ accessToken }, { dispatch, queryFulfilled }) {\n        try {\n          await queryFulfilled;\n          dispatch(\n            notifyApp(\n              createSuccessNotification(t('public-dashboard.email-sharing.success-confirm-access', 'Access confirmed!'))\n            )\n          );\n          window.location.assign(config.appSubUrl + `public-dashboards/${accessToken}`);\n        } catch (e) {\n          if (isKnownFetchError(e)) {\n            const {\n              data: { messageId },\n            } = e.error;\n            if (messageId && Object.values(EMAIL_SHARING_MAGIC_LINK_ERRORS).includes(messageId)) {\n              window.location.assign(\n                config.appSubUrl + `public-dashboards/${accessToken}/request-access?error=${messageId}`\n              );\n            }\n          }\n        }\n      },\n    }),\n    addRecipient: builder.mutation<void, { recipient: string; dashboardUid: string; uid: string }>({\n      query: ({ recipient, uid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients`,\n        method: 'POST',\n        data: { recipient },\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t(\n                'public-dashboard.email-sharing.success-send-recipient-invitation',\n                'The email invitation has been sent.'\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: (result, error, { dashboardUid }) => [{ type: 'PublicDashboard', id: dashboardUid }],\n    }),\n    deleteRecipient: builder.mutation<\n      void,\n      { recipientUid: string; recipientEmail: string; dashboardUid: string; uid: string }\n    >({\n      query: ({ uid, recipientUid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients/${recipientUid}`,\n        method: 'DELETE',\n      }),\n      async onQueryStarted({ recipientEmail }, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t('public-dashboard.email-sharing.success-revoke-access-title', 'Access Revoked'),\n              t(\n                'public-dashboard.email-sharing.success-revoke-access-description',\n                'You have successfully revoked access for {{recipientEmail}}.',\n                { recipientEmail }\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: (result, error, { dashboardUid }) => [\n        { type: 'PublicDashboard', id: dashboardUid },\n        'UsersWithActiveSessions',\n        'ActiveUserDashboards',\n      ],\n    }),\n    reshareAccessToRecipient: builder.mutation<void, { recipientUid: string; uid: string }>({\n      query: ({ uid, recipientUid }) => ({\n        url: `/public-dashboards/${uid}/share/recipients/${recipientUid}`,\n        method: 'PATCH',\n      }),\n      async onQueryStarted(_, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t(\n                'public-dashboard.email-sharing.success-resend-recipient-invitation',\n                'The email invitation has been resent.'\n              )\n            )\n          )\n        );\n      },\n    }),\n    getActiveUsers: builder.query<SessionUser[], void>({\n      query: () => ({\n        url: '/public-dashboards/share/users?status=active',\n      }),\n      providesTags: ['UsersWithActiveSessions'],\n    }),\n    getActiveUserDashboards: builder.query<SessionDashboard[], string>({\n      query: (email) => ({\n        url: `/public-dashboards/share/users/${email}/dashboards?status=active`,\n      }),\n      providesTags: (result, _, email) => [{ type: 'ActiveUserDashboards', id: email }],\n    }),\n    revokeAllAccess: builder.mutation<void, { email: string }>({\n      query: ({ email }) => ({\n        url: `/public-dashboards/share/users/${email}`,\n        method: 'DELETE',\n      }),\n      async onQueryStarted({ email }, { dispatch, queryFulfilled }) {\n        await queryFulfilled;\n        dispatch(\n          notifyApp(\n            createSuccessNotification(\n              t('public-dashboard.email-sharing.success-revoke-all-accesses-title', 'Access Revoked'),\n              t(\n                'public-dashboard.email-sharing.success-revoke-all-accesses-description',\n                \"{{email}}'s access to all public dashboards has been successfully removed.\",\n                { email }\n              )\n            )\n          )\n        );\n      },\n      invalidatesTags: ['UsersWithActiveSessions'],\n    }),\n  }),\n  overrideExisting: true,\n});\n\nexport const {\n  useRequestAccessMutation,\n  useGetActiveUserDashboardsQuery,\n  useGetActiveUsersQuery,\n  useConfirmAccessMutation,\n} = emailSharingApi;\n\nexport default emailSharingApi;\n","interface BodyText {\n  title: string;\n  description: string;\n}\n\nexport enum EMAIL_SHARING_MAGIC_LINK_ERRORS {\n  NOT_FOUND_MAGIC_LINK = 'publicdashboards.magicLinkNotFound',\n  EXPIRED_MAGIC_LINK = 'publicdashboards.magicLinkExpired',\n}\n\nexport enum EMAIL_SHARING_ACCESS_ERRORS {\n  INTERNAL_SERVER_ERROR = 'publicdashboards.internalServerError',\n  INVALID_SESSION = 'publicdashboards.invalidSession',\n  EXPIRED_SESSION = 'publicdashboards.sessionExpired',\n}\nexport const DEFAULT_BODY_TEXT: BodyText = {\n  title: 'Request access',\n  description: \"You'll receive an email with a one-time link.\",\n};\n\nexport const DEFAULT_ERROR_TITLE = 'Something went wrong';\nexport const ERROR_DESCRIPTION =\n  \"To request access to the dashboard again, enter your email. You'll receive an email with a one-time link.\";\n\nconst EMAIL_SHARING_ERROR_TITLE_MAP: Record<string, string | undefined> = {\n  [EMAIL_SHARING_ACCESS_ERRORS.INTERNAL_SERVER_ERROR]: DEFAULT_ERROR_TITLE,\n  [EMAIL_SHARING_MAGIC_LINK_ERRORS.NOT_FOUND_MAGIC_LINK]: 'This link has expired or already been used',\n  [EMAIL_SHARING_MAGIC_LINK_ERRORS.EXPIRED_MAGIC_LINK]: 'This magic link has expired',\n  [EMAIL_SHARING_ACCESS_ERRORS.INVALID_SESSION]: 'You no longer have access',\n  [EMAIL_SHARING_ACCESS_ERRORS.EXPIRED_SESSION]: 'Your access has expired',\n};\n\nexport const getRequestAccessText = (errorQueryParam?: string): BodyText => {\n  if (!errorQueryParam) {\n    return DEFAULT_BODY_TEXT;\n  }\n\n  const errorTitle = EMAIL_SHARING_ERROR_TITLE_MAP[String(errorQueryParam)];\n  return { title: errorTitle || DEFAULT_ERROR_TITLE, description: ERROR_DESCRIPTION };\n};\n"],"names":["InnerBox","children","enterAnimation","loginStyles","getLoginStyles","LoginLayout","branding","isChangingPassword","startAnim","setStartAnim","subTitle","loginTitle","loginBoxBackground","loginLogo","hideEdition","flyInAnimation","theme","selectors","ConfirmAccessPage","styles","getStyles","accessToken","magicLinkToken","confirmAccess","isLoading","isSuccess","onConfirmAccessClick","isFetchBaseQueryError","error","isKnownFetchError","emailSharingApi","builder","params","dispatch","queryFulfilled","e","messageId","recipient","uid","_","result","dashboardUid","recipientUid","recipientEmail","email","useRequestAccessMutation","useGetActiveUserDashboardsQuery","useGetActiveUsersQuery","useConfirmAccessMutation","EMAIL_SHARING_MAGIC_LINK_ERRORS","EMAIL_SHARING_ACCESS_ERRORS","DEFAULT_BODY_TEXT","DEFAULT_ERROR_TITLE","ERROR_DESCRIPTION","EMAIL_SHARING_ERROR_TITLE_MAP","getRequestAccessText","errorQueryParam"],"sourceRoot":""}