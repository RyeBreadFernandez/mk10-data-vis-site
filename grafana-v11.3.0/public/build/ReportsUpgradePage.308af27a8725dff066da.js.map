{"version":3,"file":"ReportsUpgradePage.308af27a8725dff066da.js","mappings":"uNAOA,MAAMA,EAAqB,IAAM,CAC/B,MAAMC,KAAS,MAAWC,CAAS,EAEnC,SACE,QAAC,MACC,MAAM,UACN,SAAS,oHAET,oBAAC,OAAI,UAAWD,EAAO,IACrB,mBAAC,KAAU,CAAC,YAAa,YAAa,UAAW,YAAa,EAChE,KACA,OAAC,KAAK,SAAL,CAAc,UAAWA,EAAO,SAC/B,mBAACE,EAAA,EAAqB,EACxB,KAEA,OAAC,OAAI,UAAWF,EAAO,OAAQ,GACjC,CAEJ,EAEaE,EAAuB,CAAC,CAAE,OAAAC,CAAO,OAE1C,OAAC,MACC,YAAa,YACb,YACE,mJAEF,UAAW,CACT,8CACA,wCACA,oDACA,6CACF,EACA,WAAY,gEACZ,MAAO,sBACP,QACE,wJAEF,OAAAA,CAAA,CACF,EAGEF,EAAaG,IACV,CACL,YAAU;AAAA;AAAA;AAAA;AAAA,MAKV,UAAQ;AAAA;AAAA,MAGR,OAAK;AAAA,QACDA,EAAM,YAAY,GAAG,IAAI,CAAC;AAAA,mBACfA,EAAM,QAAQ,EAAG,CAAC,CAAC;AAAA;AAAA;AAAA,QAG9BA,EAAM,YAAY,GAAG,IAAI,CAAC;AAAA,mBACfA,EAAM,QAAQ,EAAG,CAAC,CAAC;AAAA;AAAA,KAGpC,GAGF,EAAeL,C","sources":["webpack://grafana/./public/app/extensions/reports/ReportsUpgradePage.tsx"],"sourcesContent":["import { css } from '@emotion/css';\n\nimport { GrafanaTheme2 } from '@grafana/data';\nimport { useStyles2 } from '@grafana/ui';\nimport { Page } from 'app/core/components/Page/Page';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\n\nconst ReportsUpgradePage = () => {\n  const styles = useStyles2(getStyles);\n\n  return (\n    <Page\n      navId=\"reports\"\n      subTitle=\"Manage automatically generated PDF reports from any dashboards and have Grafana email them to interested parties.\"\n    >\n      <div className={styles.box}>\n        <UpgradeBox featureName={'reporting'} featureId={'reporting'} />\n      </div>\n      <Page.Contents className={styles.contents}>\n        <ReportUpgradeContent />\n      </Page.Contents>\n      {/*Push down the page footer*/}\n      <div className={styles.spacer} />\n    </Page>\n  );\n};\n\nexport const ReportUpgradeContent = ({ action }: { action?: UpgradeContentProps['action'] }) => {\n  return (\n    <UpgradeContent\n      featureName={'reporting'}\n      description={\n        'Reporting allows you to automatically generate PDFs from any of your dashboards and have Grafana email them to interested parties on a schedule.'\n      }\n      listItems={[\n        'Customize your exact layout and orientation',\n        'Personalize with your unique branding',\n        'Specify permissions for users across your company',\n        'Choose to send a report at custom intervals',\n      ]}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/reporting/'}\n      image={'reporting-email.png'}\n      caption={\n        'Create reports to share your SLO performance, business metrics, cost and utilization metrics or anything else you can express in a Grafana dashboard.'\n      }\n      action={action}\n    />\n  );\n};\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    contents: css`\n      &.page-body {\n        flex: 0;\n      }\n    `,\n    spacer: css`\n      flex: 1;\n    `,\n    box: css`\n      ${theme.breakpoints.up('sm')} {\n        padding: ${theme.spacing(0, 1)};\n      }\n\n      ${theme.breakpoints.up('md')} {\n        padding: ${theme.spacing(0, 2)};\n      }\n    `,\n  };\n};\n\nexport default ReportsUpgradePage;\n"],"names":["ReportsUpgradePage","styles","getStyles","ReportUpgradeContent","action","theme"],"sourceRoot":""}