{"version":3,"file":"WriteTargetConfig.21d0605786b6500b9bf1.js","mappings":"sYAqBA,SAASA,EAAgBC,EAA6B,CACpD,MAAO,CACL,YAAU,MAAYA,EAAM,SAAU,iBAAiB,EACvD,yBAAuB,KAAuBA,EAAM,eAAe,CACrE,CACF,CAEA,MAAMC,EAAqB,CACzB,yBAAwB,IAC1B,EAEMC,KAAY,WAAQH,EAAiBE,CAAkB,EAEhDE,EAA+B,CAAC,CAAE,SAAAC,EAAU,sBAAAC,EAAuB,yBAAAC,CAAyB,IAAa,CACpH,KAAM,CAACC,EAAoBC,CAAqB,KAAI,YAAiD,EAC/F,CAACC,EAAWC,CAAY,KAAI,YAA6BL,GAAuB,iBAAiB,EACjGM,KAAS,MAAWC,CAAS,EAC7B,CAAE,SAAAC,EAAU,aAAAC,CAAa,KAAI,MAAQ,CAAE,cAAeT,CAAsB,CAAC,KACnF,aAAU,IAAM,CACdC,EAAyB,CAC3B,EAAG,CAACA,CAAwB,CAAC,KAC7B,aAAU,IAAM,EACS,SAAY,CACjC,GAAID,EAAuB,CACzB,MAAME,EAAqB,QAAM,KAAiB,EAAE,oBAAoBF,EAAsB,eAAe,EAC7GG,EAAsBD,CAAkB,CAC1C,CACF,GACe,CACjB,EAAG,CAACF,CAAqB,CAAC,EAE1B,MAAMU,EAAYC,GAAgC,CAChDC,EAAkBV,GAAoB,IAAMS,EAAK,iBAAiB,CACpE,EAEME,KACJ,QAAC,QACE,oEACD,OAAC,KACC,KAAK,2FACL,UAAWP,EAAO,SAClB,OAAO,SACP,IAAI,aAEJ,mBAAC,IAAI,CAAC,KAAK,aAAc,GAC3B,GACF,EAGF,SACE,OAAC,KAAI,CAAC,SAAAP,EACJ,mBAAC,KAAK,SAAL,CACC,oBAAC,QAEC,SAAUU,EAAaC,CAAQ,EAC/B,MAAO,CAAE,SAAU,OAAQ,EAE3B,oBAAC,IAAK,CAAC,MAAAG,EACL,mBAAC,KACC,SAAUV,EACV,QAASD,GAAoB,KAC7B,YAAa,uBACb,KAAM,aACN,UAAW,GACX,SAAU,GACV,aAAW,yCACb,EACF,KACA,OAAC,IAAK,CAAC,MAAM,oBACX,mBAAC,KACE,GAAGM,EAAS,mBAAmB,EAChC,SAAWM,GAAMT,EAAaS,EAAE,cAAc,KAAK,EACnD,YAAY,gBACZ,aAAW,wCACb,EACF,KACA,OAAC,MACC,SAAkB,CAACV,GAAa,CAACF,EACjC,KAAK,SACL,aAAW,2BACZ,gBAED,IA7BKF,GAAuB,eA8B9B,EACF,EACF,CAEJ,EAEA,SAASY,EAAkBG,EAAyBC,EAA4B,IAC9E,MAA0B,CACxB,gBAAAD,EACA,kBAAAC,CACF,CAA0B,EACvB,KAAK,IAAM,CACV,IAAU,KAAK,KAAU,aAAc,CAAC,wCAAwC,CAAC,CACnF,CAAC,EACA,MAAOC,GAAU,CAChB,IAAU,KAAK,KAAU,WAAY,CAACA,EAAM,KAAK,OAAO,CAAC,CAC3D,CAAC,CACL,CAEA,MAAMV,EAAaW,IACV,CACL,YAAU;AAAA,qBACOA,EAAM,QAAQ,CAAC,CAAC;AAAA,KAEnC,GAGWC,EAAoBtB,EAAUC,CAA4B,EACvE,EAAeqB,C","sources":["webpack://grafana/./public/app/extensions/recorded-queries/WriteTargetConfig.tsx"],"sourcesContent":["import { css } from '@emotion/css';\nimport { useEffect, useState } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { AppEvents, DataSourceInstanceSettings, GrafanaTheme2 } from '@grafana/data';\nimport { getDataSourceSrv } from '@grafana/runtime';\nimport { Button, Field, Icon, Input, useStyles2 } from '@grafana/ui';\nimport appEvents from 'app/core/app_events';\nimport { Page } from 'app/core/components/Page/Page';\nimport { GrafanaRouteComponentProps } from 'app/core/navigation/types';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { DataSourcePicker } from 'app/features/datasources/components/picker/DataSourcePicker';\n\nimport { EnterpriseStoreState, PrometheusWriteTarget } from '../types';\n\nimport { getPrometheusWriteTarget, savePrometheusWriteTarget } from './state/actions';\nimport { getRecordedQueryWriter } from './state/selectors';\n\nexport type Props = GrafanaRouteComponentProps & ConnectedProps<typeof connector>;\n\nfunction mapStateToProps(state: EnterpriseStoreState) {\n  return {\n    navModel: getNavModel(state.navIndex, 'recordedQueries'),\n    prometheusWriteTarget: getRecordedQueryWriter(state.recordedQueries),\n  };\n}\n\nconst mapDispatchToProps = {\n  getPrometheusWriteTarget,\n};\n\nconst connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport const WriteTargetConfigUnconnected = ({ navModel, prometheusWriteTarget, getPrometheusWriteTarget }: Props) => {\n  const [selectedDataSource, setSelectedDataSource] = useState<DataSourceInstanceSettings | undefined>();\n  const [writePath, setWritePath] = useState<string | undefined>(prometheusWriteTarget?.remote_write_path);\n  const styles = useStyles2(getStyles);\n  const { register, handleSubmit } = useForm({ defaultValues: prometheusWriteTarget });\n  useEffect(() => {\n    getPrometheusWriteTarget();\n  }, [getPrometheusWriteTarget]);\n  useEffect(() => {\n    const getWriteTarget = async () => {\n      if (prometheusWriteTarget) {\n        const selectedDataSource = await getDataSourceSrv().getInstanceSettings(prometheusWriteTarget.data_source_uid);\n        setSelectedDataSource(selectedDataSource);\n      }\n    };\n    getWriteTarget();\n  }, [prometheusWriteTarget]);\n\n  const onSubmit = (data: PrometheusWriteTarget) => {\n    updateWriteTarget(selectedDataSource?.uid!, data.remote_write_path);\n  };\n\n  const label = (\n    <span>\n      {'Select the data source where metrics will be written'}\n      <a\n        href=\"https://grafana.com/docs/grafana/latest/enterprise/recorded-queries/#remote-write-target\"\n        className={styles.docsLink}\n        target=\"_blank\"\n        rel=\"noreferrer\"\n      >\n        <Icon name=\"info-circle\" />\n      </a>\n    </span>\n  );\n\n  return (\n    <Page navModel={navModel}>\n      <Page.Contents>\n        <form\n          key={prometheusWriteTarget?.data_source_uid}\n          onSubmit={handleSubmit(onSubmit)}\n          style={{ maxWidth: '600px' }}\n        >\n          <Field label={label}>\n            <DataSourcePicker\n              onChange={setSelectedDataSource}\n              current={selectedDataSource?.name}\n              placeholder={'Select a data source'}\n              type={'prometheus'}\n              noDefault={true}\n              alerting={true}\n              aria-label=\"Write target config select data source\"\n            />\n          </Field>\n          <Field label=\"Remote write path\">\n            <Input\n              {...register('remote_write_path')}\n              onChange={(e) => setWritePath(e.currentTarget.value)}\n              placeholder=\"/api/v1/write\"\n              aria-label=\"Write target config remote write path\"\n            />\n          </Field>\n          <Button\n            disabled={Boolean(!writePath || !selectedDataSource)}\n            type=\"submit\"\n            aria-label=\"Write target config save\"\n          >\n            Save\n          </Button>\n        </form>\n      </Page.Contents>\n    </Page>\n  );\n};\n\nfunction updateWriteTarget(data_source_uid: string, remote_write_path?: string) {\n  savePrometheusWriteTarget({\n    data_source_uid,\n    remote_write_path,\n  } as PrometheusWriteTarget)\n    .then(() => {\n      appEvents.emit(AppEvents.alertSuccess, [`Prometheus remote write target created`]);\n    })\n    .catch((error) => {\n      appEvents.emit(AppEvents.alertError, [error.data.message]);\n    });\n}\n\nconst getStyles = (theme: GrafanaTheme2) => {\n  return {\n    docsLink: css`\n      margin-left: ${theme.spacing(1)};\n    `,\n  };\n};\n\nexport const WriteTargetConfig = connector(WriteTargetConfigUnconnected);\nexport default WriteTargetConfig;\n"],"names":["mapStateToProps","state","mapDispatchToProps","connector","WriteTargetConfigUnconnected","navModel","prometheusWriteTarget","getPrometheusWriteTarget","selectedDataSource","setSelectedDataSource","writePath","setWritePath","styles","getStyles","register","handleSubmit","onSubmit","data","updateWriteTarget","label","e","data_source_uid","remote_write_path","error","theme","WriteTargetConfig"],"sourceRoot":""}