{"version":3,"file":"4258.0aa2561d68b3cbbea152.js","mappings":"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","sources":["webpack://grafana/./public/app/features/datasources/api.ts","webpack://grafana/./public/app/features/datasources/state/buildCategories.ts","webpack://grafana/./public/app/features/datasources/state/actions.ts","webpack://grafana/./public/app/features/datasources/state/navModel.ts","webpack://grafana/./public/app/features/datasources/state/selectors.ts","webpack://grafana/./public/app/features/datasources/tracking.ts"],"sourcesContent":["import { lastValueFrom } from 'rxjs';\n\nimport { DataSourceSettings } from '@grafana/data';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { accessControlQueryParam } from 'app/core/utils/accessControl';\n\nexport const getDataSources = async (): Promise<DataSourceSettings[]> => {\n  return await getBackendSrv().get('/api/datasources');\n};\n\n/**\n * @deprecated Use `getDataSourceByUid` instead.\n */\nexport const getDataSourceById = async (id: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/${id}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by ID: \"${id}\"`);\n};\n\nexport const getDataSourceByUid = async (uid: string) => {\n  const response = await lastValueFrom(\n    getBackendSrv().fetch<DataSourceSettings>({\n      method: 'GET',\n      url: `/api/datasources/uid/${uid}`,\n      params: accessControlQueryParam(),\n      showErrorAlert: false,\n    })\n  );\n\n  if (response.ok) {\n    return response.data;\n  }\n\n  throw Error(`Could not find data source by UID: \"${uid}\"`);\n};\n\nexport const getDataSourceByIdOrUid = async (idOrUid: string) => {\n  // Try with UID first, as we are trying to migrate to that\n  try {\n    return await getDataSourceByUid(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using UID \"${idOrUid}\"`);\n  }\n\n  // Try using ID\n  try {\n    return await getDataSourceById(idOrUid);\n  } catch (err) {\n    console.log(`Failed to lookup data source using ID \"${idOrUid}\"`);\n  }\n\n  throw Error('Could not find data source');\n};\n\nexport const createDataSource = (dataSource: Partial<DataSourceSettings>) =>\n  getBackendSrv().post('/api/datasources', dataSource);\n\nexport const getDataSourcePlugins = () => getBackendSrv().get('/api/plugins', { enabled: 1, type: 'datasource' });\n\nexport const updateDataSource = (dataSource: DataSourceSettings) => {\n  // we're setting showErrorAlert and showSuccessAlert to false to suppress the popover notifications. Request result will now be\n  // handled by the data source config page\n  return getBackendSrv().put(`/api/datasources/uid/${dataSource.uid}`, dataSource, {\n    showErrorAlert: false,\n    showSuccessAlert: false,\n  });\n};\n\nexport const deleteDataSource = (uid: string) => getBackendSrv().delete(`/api/datasources/uid/${uid}`);\n","import { DataSourcePluginMeta, PluginType } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { DataSourcePluginCategory } from 'app/types';\n\nexport function buildCategories(plugins: DataSourcePluginMeta[]): DataSourcePluginCategory[] {\n  const categories: DataSourcePluginCategory[] = [\n    { id: 'tsdb', title: 'Time series databases', plugins: [] },\n    { id: 'logging', title: 'Logging & document databases', plugins: [] },\n    { id: 'tracing', title: 'Distributed tracing', plugins: [] },\n    { id: 'profiling', title: 'Profiling', plugins: [] },\n    { id: 'sql', title: 'SQL', plugins: [] },\n    { id: 'cloud', title: 'Cloud', plugins: [] },\n    { id: 'enterprise', title: 'Enterprise plugins', plugins: [] },\n    { id: 'iot', title: 'Industrial & IoT', plugins: [] },\n    { id: 'other', title: 'Others', plugins: [] },\n  ].filter((item) => item);\n\n  const categoryIndex: Record<string, DataSourcePluginCategory> = {};\n  const pluginIndex: Record<string, DataSourcePluginMeta> = {};\n  const enterprisePlugins = getEnterprisePhantomPlugins();\n\n  // build indices\n  for (const category of categories) {\n    categoryIndex[category.id] = category;\n  }\n\n  for (const plugin of plugins) {\n    const enterprisePlugin = enterprisePlugins.find((item) => item.id === plugin.id);\n    // Force category for enterprise plugins\n    if (plugin.enterprise || enterprisePlugin) {\n      plugin.category = 'enterprise';\n      plugin.unlicensed = !featureEnabled('enterprise.plugins');\n      plugin.info.links = enterprisePlugin?.info?.links || plugin.info.links;\n    }\n\n    // Fix link name\n    if (plugin.info.links) {\n      for (const link of plugin.info.links) {\n        link.name = 'Learn more';\n      }\n    }\n\n    const category = categories.find((item) => item.id === plugin.category) || categoryIndex['other'];\n    category.plugins.push(plugin);\n    // add to plugin index\n    pluginIndex[plugin.id] = plugin;\n  }\n\n  for (const category of categories) {\n    // add phantom plugin\n    if (category.id === 'cloud') {\n      category.plugins.push(getGrafanaCloudPhantomPlugin());\n    }\n\n    // add phantom plugins\n    if (category.id === 'enterprise') {\n      for (const plugin of enterprisePlugins) {\n        if (!pluginIndex[plugin.id]) {\n          category.plugins.push(plugin);\n        }\n      }\n    }\n\n    sortPlugins(category.plugins);\n  }\n\n  // Only show categories with plugins\n  return categories.filter((c) => c.plugins.length > 0);\n}\n\nfunction sortPlugins(plugins: DataSourcePluginMeta[]) {\n  const sortingRules: { [id: string]: number } = {\n    prometheus: 100,\n    graphite: 95,\n    loki: 90,\n    mysql: 80,\n    jaeger: 100,\n    postgres: 79,\n    gcloud: -1,\n  };\n\n  plugins.sort((a, b) => {\n    const aSort = sortingRules[a.id] || 0;\n    const bSort = sortingRules[b.id] || 0;\n    if (aSort > bSort) {\n      return -1;\n    }\n    if (aSort < bSort) {\n      return 1;\n    }\n\n    return a.name > b.name ? 1 : -1;\n  });\n}\n\nfunction getEnterprisePhantomPlugins(): DataSourcePluginMeta[] {\n  return [\n    getPhantomPlugin({\n      id: 'grafana-splunk-datasource',\n      name: 'Splunk',\n      description: 'Visualize and explore Splunk logs',\n      imgUrl: 'public/img/plugins/splunk_logo_128.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-oracle-datasource',\n      name: 'Oracle',\n      description: 'Visualize and explore Oracle SQL',\n      imgUrl: 'public/img/plugins/oracle.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-dynatrace-datasource',\n      name: 'Dynatrace',\n      description: 'Visualize and explore Dynatrace data',\n      imgUrl: 'public/img/plugins/dynatrace.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-servicenow-datasource',\n      description: 'ServiceNow integration and data source',\n      name: 'ServiceNow',\n      imgUrl: 'public/img/plugins/servicenow.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-datadog-datasource',\n      description: 'DataDog integration and data source',\n      name: 'DataDog',\n      imgUrl: 'public/img/plugins/datadog.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-newrelic-datasource',\n      description: 'New Relic integration and data source',\n      name: 'New Relic',\n      imgUrl: 'public/img/plugins/newrelic.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-mongodb-datasource',\n      description: 'MongoDB integration and data source',\n      name: 'MongoDB',\n      imgUrl: 'public/img/plugins/mongodb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-snowflake-datasource',\n      description: 'Snowflake integration and data source',\n      name: 'Snowflake',\n      imgUrl: 'public/img/plugins/snowflake.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-wavefront-datasource',\n      description: 'Wavefront integration and data source',\n      name: 'Wavefront',\n      imgUrl: 'public/img/plugins/wavefront.svg',\n    }),\n    getPhantomPlugin({\n      id: 'dlopes7-appdynamics-datasource',\n      description: 'AppDynamics integration and data source',\n      name: 'AppDynamics',\n      imgUrl: 'public/img/plugins/appdynamics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-saphana-datasource',\n      description: 'SAP HANA® integration and data source',\n      name: 'SAP HANA®',\n      imgUrl: 'public/img/plugins/sap_hana.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-honeycomb-datasource',\n      description: 'Honeycomb integration and datasource',\n      name: 'Honeycomb',\n      imgUrl: 'public/img/plugins/honeycomb.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-salesforce-datasource',\n      description: 'Salesforce integration and datasource',\n      name: 'Salesforce',\n      imgUrl: 'public/img/plugins/salesforce.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-jira-datasource',\n      description: 'Jira integration and datasource',\n      name: 'Jira',\n      imgUrl: 'public/img/plugins/jira_logo.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-gitlab-datasource',\n      description: 'GitLab integration and datasource',\n      name: 'GitLab',\n      imgUrl: 'public/img/plugins/gitlab.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-splunk-monitoring-datasource',\n      description: 'SignalFx integration and datasource',\n      name: 'Splunk Infrastructure Monitoring',\n      imgUrl: 'public/img/plugins/signalfx-logo.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-azuredevops-datasource',\n      description: 'Azure Devops datasource',\n      name: 'Azure Devops',\n      imgUrl: 'public/img/plugins/azure-devops.png',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-sumologic-datasource',\n      description: 'SumoLogic integration and datasource',\n      name: 'SumoLogic',\n      imgUrl: 'public/img/plugins/sumo.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-pagerduty-datasource',\n      description: 'PagerDuty datasource',\n      name: 'PagerDuty',\n      imgUrl: 'public/img/plugins/pagerduty.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-catchpoint-datasource',\n      description: 'Catchpoint datasource',\n      name: 'Catchpoint',\n      imgUrl: 'public/img/plugins/catchpoint.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-azurecosmosdb-datasource',\n      description: 'Azure CosmosDB datasource',\n      name: 'Azure CosmosDB',\n      imgUrl: 'public/img/plugins/azure-cosmosdb.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-adobeanalytics-datasource',\n      description: 'Adobe Analytics datasource',\n      name: 'Adobe Analytics',\n      imgUrl: 'public/img/plugins/adobe-analytics.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-cloudflare-datasource',\n      description: 'Cloudflare datasource',\n      name: 'Cloudflare',\n      imgUrl: 'public/img/plugins/cloudflare.jpg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-cockroachdb-datasource',\n      description: 'CockroachDB datasource',\n      name: 'CockroachDB',\n      imgUrl: 'public/img/plugins/cockroachdb.jpg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-netlify-datasource',\n      description: 'Netlify datasource',\n      name: 'Netlify',\n      imgUrl: 'public/img/plugins/netlify.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-drone-datasource',\n      description: 'Drone datasource',\n      name: 'Drone',\n      imgUrl: 'public/img/plugins/drone.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-zendesk-datasource',\n      description: 'Zendesk datasource',\n      name: 'Zendesk',\n      imgUrl: 'public/img/plugins/zendesk.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-atlassianstatuspage-datasource',\n      description: 'Atlassian Statuspage datasource',\n      name: 'Atlassian Statuspage',\n      imgUrl: 'public/img/plugins/atlassian-statuspage.svg',\n    }),\n    getPhantomPlugin({\n      id: 'grafana-aurora-datasource',\n      description: 'Aurora data source',\n      name: 'Aurora',\n      imgUrl: 'public/img/plugins/aurora.svg',\n    }),\n  ];\n}\n\nfunction getGrafanaCloudPhantomPlugin(): DataSourcePluginMeta {\n  return {\n    id: 'gcloud',\n    name: 'Grafana Cloud',\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: 'Hosted Graphite, Prometheus, and Loki',\n      logos: { small: 'public/img/grafana_icon.svg', large: 'asd' },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: 'https://grafana.com/products/cloud/',\n          name: 'Learn more',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n\ninterface GetPhantomPluginOptions {\n  id: string;\n  name: string;\n  description: string;\n  imgUrl: string;\n}\n\nfunction getPhantomPlugin(options: GetPhantomPluginOptions): DataSourcePluginMeta {\n  return {\n    id: options.id,\n    name: options.name,\n    type: PluginType.datasource,\n    module: 'phantom',\n    baseUrl: '',\n    info: {\n      description: options.description,\n      logos: { small: options.imgUrl, large: options.imgUrl },\n      author: { name: 'Grafana Labs' },\n      links: [\n        {\n          url: '/plugins/' + options.id,\n          name: 'Install now',\n          target: '_self',\n        },\n      ],\n      screenshots: [],\n      updated: '2019-05-10',\n      version: '1.0.0',\n    },\n  };\n}\n","import {\n  DataSourcePluginMeta,\n  DataSourceSettings,\n  locationUtil,\n  TestDataSourceResponse,\n  DataSourceTestSucceeded,\n  DataSourceTestFailed,\n} from '@grafana/data';\nimport {\n  config,\n  DataSourceSrv,\n  DataSourceWithBackend,\n  HealthCheckError,\n  HealthCheckResultDetails,\n  isFetchError,\n  locationService,\n} from '@grafana/runtime';\nimport { updateNavIndex } from 'app/core/actions';\nimport { appEvents, contextSrv } from 'app/core/core';\nimport { getBackendSrv } from 'app/core/services/backend_srv';\nimport { DatasourceAPIVersions } from 'app/features/apiserver/client';\nimport { ROUTES as CONNECTIONS_ROUTES } from 'app/features/connections/constants';\nimport { getDatasourceSrv } from 'app/features/plugins/datasource_srv';\nimport { getPluginSettings } from 'app/features/plugins/pluginSettings';\nimport { importDataSourcePlugin } from 'app/features/plugins/plugin_loader';\nimport { AccessControlAction, DataSourcePluginCategory, ThunkDispatch, ThunkResult } from 'app/types';\n\nimport * as api from '../api';\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { trackDataSourceCreated, trackDataSourceTested } from '../tracking';\n\nimport { buildCategories } from './buildCategories';\nimport { buildNavModel } from './navModel';\nimport {\n  dataSourceLoaded,\n  dataSourceMetaLoaded,\n  dataSourcePluginsLoad,\n  dataSourcePluginsLoaded,\n  dataSourcesLoad,\n  dataSourcesLoaded,\n  initDataSourceSettingsFailed,\n  initDataSourceSettingsSucceeded,\n  testDataSourceFailed,\n  testDataSourceStarting,\n  testDataSourceSucceeded,\n} from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport interface DataSourceTypesLoadedPayload {\n  plugins: DataSourcePluginMeta[];\n  categories: DataSourcePluginCategory[];\n}\n\nexport interface InitDataSourceSettingDependencies {\n  loadDataSource: typeof loadDataSource;\n  loadDataSourceMeta: typeof loadDataSourceMeta;\n  getDataSource: typeof getDataSource;\n  getDataSourceMeta: typeof getDataSourceMeta;\n  importDataSourcePlugin: typeof importDataSourcePlugin;\n}\n\nexport interface TestDataSourceDependencies {\n  getDatasourceSrv: () => Pick<DataSourceSrv, 'get'>;\n  getBackendSrv: typeof getBackendSrv;\n}\n\ntype parseDataSourceSaveResponse = {\n  message?: string | undefined;\n  status?: string;\n  details?: HealthCheckResultDetails | { message?: string; verboseMessage?: string };\n};\n\nconst parseHealthCheckError = (errorResponse: any): parseDataSourceSaveResponse => {\n  let message: string | undefined;\n  let details: HealthCheckResultDetails;\n\n  if (errorResponse.error && errorResponse.error instanceof HealthCheckError) {\n    message = errorResponse.error.message;\n    details = errorResponse.error.details;\n  } else if (isFetchError(errorResponse)) {\n    message = errorResponse.data.message ?? `HTTP error ${errorResponse.statusText}`;\n  } else if (errorResponse instanceof Error) {\n    message = errorResponse.message;\n  }\n\n  return { message, details };\n};\n\nconst parseHealthCheckSuccess = (response: TestDataSourceResponse): parseDataSourceSaveResponse => {\n  const { details, message, status } = response;\n\n  return { status, message, details };\n};\n\nexport const initDataSourceSettings = (\n  uid: string,\n  dependencies: InitDataSourceSettingDependencies = {\n    loadDataSource,\n    loadDataSourceMeta,\n    getDataSource,\n    getDataSourceMeta,\n    importDataSourcePlugin,\n  }\n): ThunkResult<void> => {\n  return async (dispatch, getState) => {\n    if (!uid) {\n      dispatch(initDataSourceSettingsFailed(new Error('Invalid UID')));\n      return;\n    }\n\n    try {\n      const loadedDataSource = await dispatch(dependencies.loadDataSource(uid));\n      await dispatch(dependencies.loadDataSourceMeta(loadedDataSource));\n\n      const dataSource = dependencies.getDataSource(getState().dataSources, uid);\n      const dataSourceMeta = dependencies.getDataSourceMeta(getState().dataSources, dataSource!.type);\n      const importedPlugin = await dependencies.importDataSourcePlugin(dataSourceMeta);\n\n      dispatch(initDataSourceSettingsSucceeded(importedPlugin));\n    } catch (err) {\n      if (err instanceof Error) {\n        dispatch(initDataSourceSettingsFailed(err));\n      }\n    }\n  };\n};\n\nexport const testDataSource = (\n  dataSourceName: string,\n  editRoute = DATASOURCES_ROUTES.Edit,\n  dependencies: TestDataSourceDependencies = {\n    getDatasourceSrv,\n    getBackendSrv,\n  }\n): ThunkResult<void> => {\n  return async (dispatch: ThunkDispatch, getState) => {\n    const dsApi = await dependencies.getDatasourceSrv().get(dataSourceName);\n    const editLink = editRoute.replace(/:uid/gi, dataSourceName);\n\n    if (!dsApi.testDatasource) {\n      return;\n    }\n\n    dispatch(testDataSourceStarting());\n\n    dependencies.getBackendSrv().withNoBackendCache(async () => {\n      try {\n        const result = await dsApi.testDatasource();\n\n        const parsedResult = parseHealthCheckSuccess({ ...result, details: { ...result.details } });\n        dispatch(testDataSourceSucceeded(parsedResult));\n\n        trackDataSourceTested({\n          grafana_version: config.buildInfo.version,\n          plugin_id: dsApi.type,\n          datasource_uid: dsApi.uid,\n          success: true,\n          path: editLink,\n        });\n        appEvents.publish(new DataSourceTestSucceeded());\n      } catch (err) {\n        const formattedError = parseHealthCheckError(err);\n\n        dispatch(testDataSourceFailed({ ...formattedError }));\n        trackDataSourceTested({\n          grafana_version: config.buildInfo.version,\n          plugin_id: dsApi.type,\n          datasource_uid: dsApi.uid,\n          success: false,\n          path: editLink,\n        });\n        appEvents.publish(new DataSourceTestFailed());\n      }\n    });\n  };\n};\n\nexport function loadDataSources(): ThunkResult<Promise<void>> {\n  return async (dispatch) => {\n    if (!contextSrv.hasPermission(AccessControlAction.DataSourcesRead)) {\n      return;\n    }\n    dispatch(dataSourcesLoad());\n    const response = await api.getDataSources();\n    dispatch(dataSourcesLoaded(response));\n  };\n}\n\nexport function loadDataSource(uid: string): ThunkResult<Promise<DataSourceSettings>> {\n  return async (dispatch) => {\n    let dataSource = await api.getDataSourceByIdOrUid(uid);\n\n    // Reload route to use UID instead\n    // -------------------------------\n    // In case we were trying to fetch and reference a data-source with an old numeric ID\n    // (which can happen by referencing it with a \"old\" URL), we would like to automatically redirect\n    // to the new URL format using the UID.\n    // [Please revalidate the following]: Unfortunately we can update the location using react router, but need to fully reload the\n    // route as the nav model page index is not matching with the url in that case.\n    // And react router has no way to unmount remount a route.\n    if (uid !== dataSource.uid) {\n      window.location.href = locationUtil.assureBaseUrl(`/datasources/edit/${dataSource.uid}`);\n\n      // Avoid a flashing error while the reload happens\n      dataSource = {} as DataSourceSettings;\n    }\n\n    dispatch(dataSourceLoaded(dataSource));\n\n    return dataSource;\n  };\n}\n\nexport function loadDataSourceMeta(dataSource: DataSourceSettings): ThunkResult<void> {\n  return async (dispatch) => {\n    const pluginInfo: DataSourcePluginMeta = await getPluginSettings(dataSource.type);\n    const plugin = await importDataSourcePlugin(pluginInfo);\n    const isBackend = plugin.DataSourceClass.prototype instanceof DataSourceWithBackend;\n    const meta = {\n      ...pluginInfo,\n      isBackend: pluginInfo.backend || isBackend,\n    };\n\n    dispatch(dataSourceMetaLoaded(meta));\n\n    plugin.meta = meta;\n    dispatch(updateNavIndex(buildNavModel(dataSource, plugin)));\n  };\n}\n\nexport function addDataSource(\n  plugin: DataSourcePluginMeta,\n  editRoute = DATASOURCES_ROUTES.Edit\n): ThunkResult<Promise<void>> {\n  return async () => {\n    const newInstance = {\n      type: plugin.id,\n      access: 'proxy',\n    };\n\n    const result = await api.createDataSource(newInstance);\n    const editLink = editRoute.replace(/:uid/gi, result.datasource.uid);\n\n    await getDatasourceSrv().reload();\n    await contextSrv.fetchUserPermissions();\n\n    trackDataSourceCreated({\n      grafana_version: config.buildInfo.version,\n      plugin_id: plugin.id,\n      datasource_uid: result.datasource.uid,\n      plugin_version: result.meta?.info?.version,\n      path: editLink,\n    });\n\n    locationService.push(editLink);\n  };\n}\n\nexport function loadDataSourcePlugins(): ThunkResult<void> {\n  return async (dispatch) => {\n    dispatch(dataSourcePluginsLoad());\n    const plugins = await api.getDataSourcePlugins();\n    const categories = buildCategories(plugins);\n    dispatch(dataSourcePluginsLoaded({ plugins, categories }));\n  };\n}\n\nconst dsApiVersions = new DatasourceAPIVersions();\n\nexport function updateDataSource(dataSource: DataSourceSettings) {\n  return async (\n    dispatch: (\n      dataSourceSettings: ThunkResult<Promise<DataSourceSettings>> | { payload: unknown; type: string }\n    ) => DataSourceSettings\n  ) => {\n    try {\n      if (config.featureToggles.grafanaAPIServerWithExperimentalAPIs) {\n        dataSource.apiVersion = await dsApiVersions.get(dataSource.type);\n      }\n      await api.updateDataSource(dataSource);\n    } catch (err) {\n      const formattedError = parseHealthCheckError(err);\n\n      dispatch(testDataSourceFailed(formattedError));\n      const errorInfo = isFetchError(err) ? err.data : { message: 'An unexpected error occurred.', traceID: '' };\n      return Promise.reject(errorInfo);\n    }\n\n    await getDatasourceSrv().reload();\n\n    return dispatch(loadDataSource(dataSource.uid));\n  };\n}\n\nexport function deleteLoadedDataSource(): ThunkResult<void> {\n  return async (dispatch, getStore) => {\n    const { uid } = getStore().dataSources.dataSource;\n\n    try {\n      await api.deleteDataSource(uid);\n      await getDatasourceSrv().reload();\n\n      const datasourcesUrl = CONNECTIONS_ROUTES.DataSources;\n\n      locationService.push(datasourcesUrl);\n    } catch (err) {\n      const formattedError = parseHealthCheckError(err);\n      dispatch(testDataSourceFailed(formattedError));\n    }\n  };\n}\n","import { DataSourceSettings, PluginType, PluginInclude, NavModel, NavModelItem } from '@grafana/data';\nimport { featureEnabled } from '@grafana/runtime';\nimport { ProBadge } from 'app/core/components/Upgrade/ProBadge';\nimport config from 'app/core/config';\nimport { contextSrv } from 'app/core/core';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { AccessControlAction } from 'app/types';\n\nimport { GenericDataSourcePlugin } from '../types';\n\nconst loadingDSType = 'Loading';\n\nexport function buildNavModel(dataSource: DataSourceSettings, plugin: GenericDataSourcePlugin): NavModelItem {\n  const pluginMeta = plugin.meta;\n  const highlightsEnabled = config.featureToggles.featureHighlights;\n  const navModel: NavModelItem = {\n    img: pluginMeta.info.logos.large,\n    id: 'datasource-' + dataSource.uid,\n    url: '',\n    text: dataSource.name,\n    children: [\n      {\n        active: false,\n        icon: 'sliders-v-alt',\n        id: `datasource-settings-${dataSource.uid}`,\n        text: 'Settings',\n        url: `datasources/edit/${dataSource.uid}/`,\n      },\n    ],\n  };\n\n  if (plugin.configPages) {\n    for (const page of plugin.configPages) {\n      navModel.children!.push({\n        active: false,\n        text: page.title,\n        icon: page.icon,\n        url: `datasources/edit/${dataSource.uid}/?page=${page.id}`,\n        id: `datasource-page-${page.id}`,\n      });\n    }\n  }\n\n  if (pluginMeta.includes && hasDashboards(pluginMeta.includes) && contextSrv.hasRole('Admin')) {\n    navModel.children!.push({\n      active: false,\n      icon: 'apps',\n      id: `datasource-dashboards-${dataSource.uid}`,\n      text: 'Dashboards',\n      url: `datasources/edit/${dataSource.uid}/dashboards`,\n    });\n  }\n\n  const isLoadingNav = dataSource.type === loadingDSType;\n\n  const permissionsExperimentId = 'feature-highlights-data-source-permissions-badge';\n  const dsPermissions: NavModelItem = {\n    active: false,\n    icon: 'lock',\n    id: `datasource-permissions-${dataSource.uid}`,\n    text: 'Permissions',\n    url: `datasources/edit/${dataSource.uid}/permissions`,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    dsPermissions.tabSuffix = () => ProBadge({ experimentId: permissionsExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('dspermissions.enforcement')) {\n    if (contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesPermissionsRead, dataSource)) {\n      navModel.children!.push(dsPermissions);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...dsPermissions,\n      url: dsPermissions.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: permissionsExperimentId }),\n    });\n  }\n\n  if (config.analytics?.enabled) {\n    const analyticsExperimentId = 'feature-highlights-data-source-insights-badge';\n    const analytics: NavModelItem = {\n      active: false,\n      icon: 'info-circle',\n      id: `datasource-insights-${dataSource.uid}`,\n      text: 'Insights',\n      url: `datasources/edit/${dataSource.uid}/insights`,\n    };\n\n    if (highlightTrial() && !isLoadingNav) {\n      analytics.tabSuffix = () => ProBadge({ experimentId: analyticsExperimentId, eventVariant: 'trial' });\n    }\n\n    if (featureEnabled('analytics')) {\n      if (contextSrv.hasPermission(AccessControlAction.DataSourcesInsightsRead)) {\n        navModel.children!.push(analytics);\n      }\n    } else if (highlightsEnabled && !isLoadingNav) {\n      navModel.children!.push({\n        ...analytics,\n        url: analytics.url + '/upgrade',\n        tabSuffix: () => ProBadge({ experimentId: analyticsExperimentId }),\n      });\n    }\n  }\n\n  const cachingExperimentId = 'feature-highlights-query-caching-badge';\n\n  const caching: NavModelItem = {\n    active: false,\n    icon: 'database',\n    id: `datasource-cache-${dataSource.uid}`,\n    text: 'Cache',\n    url: `datasources/edit/${dataSource.uid}/cache`,\n    hideFromTabs: !pluginMeta.isBackend || !config.caching.enabled,\n  };\n\n  if (highlightTrial() && !isLoadingNav) {\n    caching.tabSuffix = () => ProBadge({ experimentId: cachingExperimentId, eventVariant: 'trial' });\n  }\n\n  if (featureEnabled('caching')) {\n    if (contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingRead, dataSource)) {\n      navModel.children!.push(caching);\n    }\n  } else if (highlightsEnabled && !isLoadingNav) {\n    navModel.children!.push({\n      ...caching,\n      url: caching.url + '/upgrade',\n      tabSuffix: () => ProBadge({ experimentId: cachingExperimentId }),\n    });\n  }\n\n  return navModel;\n}\n\nexport function getDataSourceNav(main: NavModelItem, pageName: string): NavModel {\n  let node: NavModelItem = { text: '' };\n\n  // find active page\n  for (const child of main.children!) {\n    if (child.id!.indexOf(pageName) > 0) {\n      child.active = true;\n      node = child;\n      break;\n    }\n  }\n\n  return {\n    main: main,\n    node: node!,\n  };\n}\nexport function getDataSourceLoadingNav(pageName: string): NavModel {\n  const main = buildNavModel(\n    {\n      access: '',\n      basicAuth: false,\n      basicAuthUser: '',\n      withCredentials: false,\n      database: '',\n      id: 1,\n      uid: 'x',\n      isDefault: false,\n      jsonData: { authType: 'credentials', defaultRegion: 'eu-west-2' },\n      name: 'Loading',\n      orgId: 1,\n      readOnly: false,\n      type: loadingDSType,\n      typeName: loadingDSType,\n      typeLogoUrl: 'public/img/icn-datasource.svg',\n      url: '',\n      user: '',\n      secureJsonFields: {},\n    },\n    {\n      meta: {\n        id: '1',\n        type: PluginType.datasource,\n        name: '',\n        info: {\n          author: {\n            name: '',\n            url: '',\n          },\n          description: '',\n          links: [{ name: '', url: '' }],\n          logos: {\n            large: '',\n            small: '',\n          },\n          screenshots: [],\n          updated: '',\n          version: '',\n        },\n        includes: [],\n        module: '',\n        baseUrl: '',\n      },\n    } as any\n  );\n\n  return getDataSourceNav(main, pageName);\n}\n\nfunction hasDashboards(includes: PluginInclude[]): boolean {\n  return (\n    includes.find((include) => {\n      return include.type === 'dashboard';\n    }) !== undefined\n  );\n}\n","import memoizeOne from 'memoize-one';\n\nimport { DataSourcePluginMeta, DataSourceSettings, UrlQueryValue } from '@grafana/data';\nimport { DataSourcesState } from 'app/types/datasources';\n\nexport const getDataSources = memoizeOne((state: DataSourcesState) => {\n  const regex = new RegExp(state.searchQuery, 'i');\n\n  const filteredDataSources = state.dataSources.filter((dataSource: DataSourceSettings) => {\n    return regex.test(dataSource.name) || regex.test(dataSource.database) || regex.test(dataSource.type);\n  });\n\n  return filteredDataSources.sort((a, b) =>\n    state.isSortAscending ? a.name.localeCompare(b.name) : b.name.localeCompare(a.name)\n  );\n});\n\nexport const getFilteredDataSourcePlugins = memoizeOne((state: DataSourcesState) => {\n  const regex = new RegExp(state.dataSourceTypeSearchQuery, 'i');\n\n  return state.plugins.filter((type: DataSourcePluginMeta) => {\n    return regex.test(type.name);\n  });\n});\n\nexport const getDataSource = (state: DataSourcesState, dataSourceId: UrlQueryValue): DataSourceSettings => {\n  if (state.dataSource.uid === dataSourceId) {\n    return state.dataSource;\n  }\n  return {} as DataSourceSettings;\n};\n\nexport const getDataSourceMeta = (state: DataSourcesState, type: string): DataSourcePluginMeta => {\n  if (state.dataSourceMeta.id === type) {\n    return state.dataSourceMeta;\n  }\n\n  return {} as DataSourcePluginMeta;\n};\n\nexport const getDataSourcesSearchQuery = (state: DataSourcesState) => state.searchQuery;\nexport const getDataSourcesLayoutMode = (state: DataSourcesState) => state.layoutMode;\nexport const getDataSourcesCount = (state: DataSourcesState) => state.dataSourcesCount;\nexport const getDataSourcesSort = (state: DataSourcesState) => state.isSortAscending;\n","import { reportInteraction } from '@grafana/runtime';\n\n/**\n * Used to track data source creation via either the specific plugin page `/plugins/<the-data-source>`\n * or the general datasources page `/datasources/new`\n *\n * This event corresponds to the start event of our data source creation funnel.\n * Combined with the end event, it allows answering questions about:\n * - Conversion (percentage of user that successfully set up a data source)\n * - Time spent on the config page\n *\n * Changelog:\n * - v9.1.7 : logging datasource, datasource_uid, grafana version\n */\nexport const trackDataSourceCreated = (props: DataSourceCreatedProps) => {\n  reportInteraction('grafana_ds_add_datasource_clicked', props);\n};\n\ntype DataSourceCreatedProps = {\n  grafana_version?: string;\n  /** The unique id of the newly created data source */\n  datasource_uid: string;\n  /** The datasource id (e.g. Cloudwatch, Loki, Prometheus) */\n  plugin_id: string;\n  /** The plugin version (especially interesting in external plugins - core plugins are aligned with grafana version) */\n  plugin_version?: string;\n  /** The URL path that points to the page where the event was triggered. We are using this to be able to distinguish between the performance of different datasource edit locations. */\n  path?: string;\n};\n\n/**\n * Used to track data source testing\n *\n * This event corresponds to the end event of our data source creation funnel.\n * Combined with the start event, it allows answering questions about:\n * - Conversion (percentage of user that successfully set up a data source)\n * - Time spent on the config page\n *\n * Changelog:\n * - v9.1.7 : logging datasource, datasource_uid, grafana version and success\n */\nexport const trackDataSourceTested = (props: DataSourceTestedProps) => {\n  reportInteraction('grafana_ds_test_datasource_clicked', props);\n};\n\ntype DataSourceTestedProps = {\n  grafana_version?: string;\n  /** The unique id of the newly created data source */\n  datasource_uid: string;\n  /** The datasource id (e.g. Cloudwatch, Loki, Prometheus) */\n  plugin_id: string;\n  /** The plugin version (especially interesting in external plugins - core plugins are aligned with grafana version) */\n  plugin_version?: string;\n  /** Whether or not the datasource test succeeded = the datasource was successfully configured */\n  success: boolean;\n  /** The URL path that points to the page where the event was triggered. We are using this to be able to distinguish between the performance of different datasource edit locations. */\n  path?: string;\n};\n\ntype DataSourceGeneralTrackingProps = {\n  grafana_version?: string;\n  /** The unique id of the newly created data source */\n  datasource_uid: string;\n  /** The name of the datasource (e.g. Cloudwatch, Loki, Prometheus) */\n  plugin_name: string;\n  /** The URL of the page where event was triggereed from. */\n  path?: string;\n};\n\nexport const trackExploreClicked = (props: DataSourceGeneralTrackingProps) => {\n  reportInteraction('grafana_ds_explore_datasource_clicked', props);\n};\n\nexport const trackCreateDashboardClicked = (props: DataSourceGeneralTrackingProps) => {\n  reportInteraction('grafana_ds_create_dashboard_clicked', props);\n};\n\nexport const trackDataSourcesListViewed = (props: { grafana_version?: string; path?: string }) => {\n  reportInteraction('grafana_ds_datasources_list_viewed', props);\n};\n\nexport const trackDsConfigClicked = (item: string) => {\n  reportInteraction('connections_datasources_settings_clicked', { item });\n};\n\nexport const trackDsConfigUpdated = (props: { item: string; error?: unknown }) => {\n  reportInteraction('connections_datasources_ds_configured', props);\n};\n"],"names":["getDataSources","getDataSourceById","id","response","lastValueFrom","accessControl","getDataSourceByUid","uid","getDataSourceByIdOrUid","idOrUid","createDataSource","dataSource","getDataSourcePlugins","updateDataSource","deleteDataSource","buildCategories","plugins","categories","item","categoryIndex","pluginIndex","enterprisePlugins","getEnterprisePhantomPlugins","category","plugin","enterprisePlugin","link","getGrafanaCloudPhantomPlugin","sortPlugins","c","sortingRules","a","b","aSort","bSort","getPhantomPlugin","options","parseHealthCheckError","errorResponse","message","details","parseHealthCheckSuccess","status","initDataSourceSettings","dependencies","loadDataSource","loadDataSourceMeta","dispatch","getState","loadedDataSource","dataSourceMeta","importedPlugin","err","testDataSource","dataSourceName","editRoute","dsApi","editLink","result","parsedResult","config","formattedError","loadDataSources","pluginInfo","isBackend","DataSourceWithBackend","meta","addDataSource","newInstance","loadDataSourcePlugins","dsApiVersions","errorInfo","deleteLoadedDataSource","getStore","datasourcesUrl","loadingDSType","buildNavModel","pluginMeta","highlightsEnabled","navModel","page","hasDashboards","isLoadingNav","permissionsExperimentId","dsPermissions","analyticsExperimentId","analytics","cachingExperimentId","caching","getDataSourceNav","main","pageName","node","child","getDataSourceLoadingNav","includes","include","state","regex","getFilteredDataSourcePlugins","type","getDataSource","dataSourceId","getDataSourceMeta","getDataSourcesSearchQuery","getDataSourcesLayoutMode","getDataSourcesCount","getDataSourcesSort","trackDataSourceCreated","props","trackDataSourceTested","trackExploreClicked","trackCreateDashboardClicked","trackDataSourcesListViewed","trackDsConfigClicked","trackDsConfigUpdated"],"sourceRoot":""}