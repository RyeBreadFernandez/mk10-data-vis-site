{"version":3,"file":"DataSourceInsightsPage.13ce337ffc8b1b1f5ed6.js","mappings":"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","sources":["webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsights.tsx","webpack://grafana/./public/app/extensions/meta-analytics/DataSourceInsights/DataSourceInsightsPage.tsx"],"sourcesContent":["import { PureComponent } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport AutoSizer from 'react-virtualized-auto-sizer';\n\nimport {\n  DataFrame,\n  dateTime,\n  FieldType,\n  TimeRange,\n  FieldConfigSource,\n  PanelData,\n  LoadingState,\n} from '@grafana/data';\nimport { featureEnabled, PanelRenderer } from '@grafana/runtime';\nimport { TooltipDisplayMode, VisibilityMode, SortOrder, GraphDrawStyle, LegendDisplayMode } from '@grafana/schema';\nimport { InfoBox, Themeable2, withTheme2, PanelChrome } from '@grafana/ui';\nimport { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { loadDataSource, loadDataSourceMeta } from 'app/features/datasources/state/actions';\nimport {\n  FieldConfig as TimeseriesFieldConfig,\n  Options as TimeseriesOptions,\n} from 'app/plugins/panel/timeseries/panelcfg.gen';\n\nimport { EnterpriseStoreState } from '../../types';\nimport { DAILY_SUMMARY_DATE_FORMAT, DataSourceDailySummaryDTO, getDataSourceDailySummaries } from '../api';\nimport { getInsightsStyles, InsightsStyles } from '../styles';\n\nexport type ExternalProps = {\n  uid: string;\n};\n\nconst mapStateToProps = (state: EnterpriseStoreState, props: ExternalProps) => {\n  return {\n    dataSourceUid: props.uid,\n  };\n};\n\nconst mapDispatchToProps = {\n  loadDataSource,\n  loadDataSourceMeta,\n};\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = Themeable2 & ConnectedProps<typeof connector>;\n\ninterface State {\n  dailySummaries: DataSourceDailySummaryDTO[];\n  from: string;\n  to: string;\n}\n\ninterface ChartConfig {\n  title: string;\n  valueField: keyof DataSourceDailySummaryDTO;\n  fieldType: FieldType;\n  width: number;\n  timeRange: TimeRange;\n  color: string;\n  showBars: boolean;\n  showLines: boolean;\n}\n\nclass DataSourceInsights extends PureComponent<Props, State> {\n  constructor(props: Props) {\n    super(props);\n    this.state = {\n      dailySummaries: [],\n      from: '',\n      to: '',\n    };\n  }\n\n  async componentDidMount(): Promise<void> {\n    const { dataSourceUid, loadDataSource, loadDataSourceMeta } = this.props;\n\n    loadDataSource(dataSourceUid).then(loadDataSourceMeta);\n\n    if (featureEnabled('analytics')) {\n      let from = dateTime().subtract(30, 'days').format(DAILY_SUMMARY_DATE_FORMAT);\n      let to = dateTime().format(DAILY_SUMMARY_DATE_FORMAT);\n      const dailySummaries = await getDataSourceDailySummaries(dataSourceUid, from, to);\n      this.setState({ dailySummaries, from, to });\n    }\n  }\n\n  buildTimeRange(): TimeRange {\n    const { from, to } = this.state;\n\n    const timeRangeFrom = dateTime(from);\n    const timeRangeTo = dateTime(to).add(24, 'hours');\n\n    return {\n      from: timeRangeFrom,\n      to: timeRangeTo,\n      raw: { from, to },\n    };\n  }\n\n  convertDailySummariesToDataFrame(\n    data: DataSourceDailySummaryDTO[],\n    valueField: keyof DataSourceDailySummaryDTO,\n    valueFieldType: FieldType\n  ): DataFrame {\n    const time: number[] = [];\n    const values: any[] = [];\n\n    data.forEach((dailySummary) => {\n      time.push(dateTime(dailySummary.day, DAILY_SUMMARY_DATE_FORMAT).valueOf());\n      let value = dailySummary[valueField];\n      if (valueField === 'loadDuration') {\n        value = dailySummary.queries ? dailySummary.loadDuration / (dailySummary.queries * 1000000) : 0;\n      }\n      values.push(value);\n    });\n\n    return {\n      name: valueField,\n      fields: [\n        { name: 'Time', type: FieldType.time, config: {}, values: time },\n        { name: valueField, type: valueFieldType, config: {}, values: values },\n      ],\n      length: data.length,\n    };\n  }\n\n  renderChart(config: ChartConfig, styles: InsightsStyles) {\n    const { dailySummaries } = this.state;\n    const { color, fieldType, showBars, timeRange, title, valueField, width } = config;\n\n    let dataFrame = this.convertDailySummariesToDataFrame(dailySummaries, valueField, fieldType);\n\n    // const series = getGraphSeriesModel(\n    //   [dataFrame],\n    //   'browser',\n    //   seriesOptions,\n    //   { showBars: showBars, showLines: showLines, showPoints: false },\n    //   { placement: 'bottom', displayMode: LegendDisplayMode.List, showLegend: false }\n    // );\n\n    const panelData: PanelData = {\n      series: [dataFrame],\n      state: LoadingState.Done,\n      timeRange, // this.buildTimeRange(),\n    };\n\n    const panelOptions: TimeseriesOptions = {\n      legend: {\n        showLegend: false,\n        displayMode: LegendDisplayMode.Hidden,\n        calcs: [],\n        placement: 'bottom',\n      },\n      tooltip: {\n        mode: TooltipDisplayMode.Multi,\n        sort: SortOrder.Descending,\n      },\n    };\n\n    const fieldConfig: FieldConfigSource<TimeseriesFieldConfig> = {\n      defaults: {\n        color: {\n          mode: 'fixed',\n          fixedColor: color,\n        },\n        custom: {\n          showPoints: VisibilityMode.Never,\n          drawStyle: showBars ? GraphDrawStyle.Bars : GraphDrawStyle.Line,\n          fillOpacity: showBars ? 50 : 0,\n        },\n      },\n      overrides: [],\n    };\n\n    return (\n      <div className={styles.graphContainer}>\n        <PanelChrome title={title} width={width} height={220} displayMode=\"transparent\" loadingState={panelData.state}>\n          {(innerWidth, innerHeight) => (\n            <PanelRenderer\n              title={title}\n              width={innerWidth}\n              height={innerHeight}\n              pluginId=\"timeseries\"\n              data={panelData}\n              fieldConfig={fieldConfig}\n              options={panelOptions}\n            />\n          )}\n        </PanelChrome>\n      </div>\n    );\n  }\n\n  renderContent() {\n    const { theme } = this.props;\n    const styles = getInsightsStyles(theme);\n    const { dailySummaries } = this.state;\n    const timeRange = this.buildTimeRange();\n\n    return dailySummaries?.length > 0 ? (\n      <AutoSizer disableHeight>\n        {({ width }) => {\n          const charts: ChartConfig[] = [\n            {\n              title: 'Queries last 30 days',\n              valueField: 'queries',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: 'green',\n              showBars: true,\n              showLines: false,\n            },\n            {\n              title: 'Errors last 30 days',\n              valueField: 'errors',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: theme.colors.error.border,\n              showBars: true,\n              showLines: false,\n            },\n            {\n              title: 'Average load duration last 30 days (ms)',\n              valueField: 'loadDuration',\n              fieldType: FieldType.number,\n              width,\n              timeRange,\n              color: theme.colors.primary.border,\n              showBars: true,\n              showLines: false,\n            },\n          ];\n\n          return <main style={{ width }}>{charts.map((chart) => this.renderChart(chart, styles))}</main>;\n        }}\n      </AutoSizer>\n    ) : (\n      <span>No available data for this data source.</span>\n    );\n  }\n\n  render() {\n    if (featureEnabled('analytics.writers') && !featureEnabled('analytics')) {\n      return (\n        <InfoBox\n          title=\"Feature not available with an expired license\"\n          url=\"https://grafana.com/docs/grafana/latest/enterprise/license-expiration/\"\n          urlTitle=\"Read more on license expiration\"\n        >\n          <span>\n            Data source insights are not available with an expired license. Data will continue to be collected but you\n            need to update your license to see this page.\n          </span>\n        </InfoBox>\n      );\n    }\n\n    return (\n      <>\n        {highlightTrial() && (\n          <UpgradeBox\n            featureId={'data-source-insights'}\n            eventVariant={'trial'}\n            featureName={'data source usage insights'}\n            text={'Enable data source usage insights for free during your trial of Grafana Pro.'}\n          />\n        )}\n        {this.renderContent()}\n      </>\n    );\n  }\n}\n\nexport default connector(withTheme2(DataSourceInsights));\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getDataSourceLoadingNav } from 'app/features/datasources/state/navModel';\nimport { StoreState, useSelector } from 'app/types';\n\nimport DataSourceInsights from './DataSourceInsights';\n\nexport const DataSourceInsightsPage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const dataSourceLoadingNav = getDataSourceLoadingNav('insights');\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, `datasource-insights-${uid}`, dataSourceLoadingNav);\n\n  return (\n    <Page navId=\"datasources\" pageNav={navModel.main}>\n      <Page.Contents>\n        <DataSourceInsights uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourceInsightsPage;\n"],"names":["mapStateToProps","state","props","mapDispatchToProps","connector","DataSourceInsights","dataSourceUid","loadDataSource","loadDataSourceMeta","from","to","dailySummaries","timeRangeFrom","timeRangeTo","data","valueField","valueFieldType","time","values","dailySummary","value","config","styles","color","fieldType","showBars","timeRange","title","width","panelData","panelOptions","fieldConfig","innerWidth","innerHeight","theme","charts","chart","DataSourceInsightsPage","uid","dataSourceLoadingNav","navIndex","navModel"],"sourceRoot":""}