{"version":3,"file":"DataSourceCacheUpgradePage.6c2c65160ac186da5cca.js","mappings":"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","sources":["webpack://grafana/./public/app/core/components/EmptyListCTA/EmptyListCTA.tsx","webpack://grafana/./public/app/extensions/caching/CacheCTA.tsx","webpack://grafana/./public/app/extensions/caching/CacheClean.tsx","webpack://grafana/./public/app/extensions/caching/CacheSettingsDisable.tsx","webpack://grafana/./public/app/extensions/caching/CacheSettingsForm.tsx","webpack://grafana/./public/app/extensions/caching/DataSourceCache.tsx","webpack://grafana/./public/app/extensions/caching/DataSourceCacheUpgrade.tsx","webpack://grafana/./public/app/extensions/caching/DataSourceCacheUpgradePage.tsx","webpack://grafana/./public/app/features/datasources/state/contexts.ts","webpack://grafana/./public/app/features/datasources/state/hooks.ts","webpack://grafana/./public/app/features/datasources/utils.ts"],"sourcesContent":["import { css } from '@emotion/css';\nimport { MouseEvent } from 'react';\n\nimport { selectors } from '@grafana/e2e-selectors';\nimport { Alert, Button, CallToActionCard, Icon, IconName, LinkButton } from '@grafana/ui';\n\nexport interface Props {\n  title: string;\n  buttonIcon: IconName;\n  buttonLink?: string;\n  buttonTitle: string;\n  buttonDisabled?: boolean;\n  onClick?: (event: MouseEvent) => void;\n  proTip?: string;\n  proTipLink?: string;\n  proTipLinkTitle?: string;\n  proTipTarget?: string;\n  infoBox?: { __html: string };\n  infoBoxTitle?: string;\n}\n\nconst ctaStyle = css({\n  textAlign: 'center',\n});\n\nconst infoBoxStyles = css({\n  maxWidth: '700px',\n  margin: '0 auto',\n});\n\nconst EmptyListCTA = ({\n  title,\n  buttonIcon,\n  buttonLink,\n  buttonTitle,\n  buttonDisabled,\n  onClick,\n  proTip,\n  proTipLink,\n  proTipLinkTitle,\n  proTipTarget,\n  infoBox,\n  infoBoxTitle,\n}: Props) => {\n  const footer = () => {\n    return (\n      <>\n        {proTip ? (\n          <span key=\"proTipFooter\">\n            <Icon name=\"rocket\" />\n            <> ProTip: {proTip} </>\n            {proTipLink && (\n              <a href={proTipLink} target={proTipTarget} className=\"text-link\">\n                {proTipLinkTitle}\n              </a>\n            )}\n          </span>\n        ) : (\n          ''\n        )}\n        {infoBox ? (\n          <Alert severity=\"info\" title={infoBoxTitle ?? ''} className={infoBoxStyles}>\n            <div dangerouslySetInnerHTML={infoBox} />\n          </Alert>\n        ) : (\n          ''\n        )}\n      </>\n    );\n  };\n\n  const ctaElementClassName = !footer()\n    ? css({\n        marginBottom: '20px',\n      })\n    : '';\n\n  const ButtonEl = buttonLink ? LinkButton : Button;\n  const ctaElement = (\n    <ButtonEl\n      size=\"lg\"\n      onClick={onClick}\n      href={buttonLink}\n      icon={buttonIcon}\n      className={ctaElementClassName}\n      data-testid={selectors.components.CallToActionCard.buttonV2(buttonTitle)}\n      disabled={buttonDisabled}\n    >\n      {buttonTitle}\n    </ButtonEl>\n  );\n\n  return <CallToActionCard className={ctaStyle} message={title} footer={footer()} callToActionElement={ctaElement} />;\n};\n\nexport default EmptyListCTA;\n","import EmptyListCTA from 'app/core/components/EmptyListCTA/EmptyListCTA';\nimport { contextSrv } from 'app/core/core';\n\nimport { AccessControlAction } from '../types';\n\nimport { Props } from './DataSourceCache';\n\nexport const CacheCTA = (props: Props) => {\n  const { enableDataSourceCache, dataSource, pageId } = props;\n  const canWriteCache = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingWrite, dataSource);\n\n  return dataSource.jsonData?.disableGrafanaCache ? (\n    <EmptyListCTA\n      title=\"Caching cannot be enabled for this data source.\"\n      buttonTitle=\"Enable\"\n      buttonIcon=\"database\"\n      proTip=\"This data source's configuration does not permit caching to be enabled.\"\n      buttonDisabled={true}\n    />\n  ) : (\n    <EmptyListCTA\n      title=\"Caching is not enabled for this data source.\"\n      buttonTitle=\"Enable\"\n      buttonIcon=\"database\"\n      onClick={() => {\n        enableDataSourceCache(pageId);\n      }}\n      proTip=\"Enabling caching can reduce the amount of redundant requests sent to the data source.\"\n      proTipLink=\"https://grafana.com/docs/grafana/latest/enterprise/query-caching/\"\n      proTipLinkTitle=\"Learn more\"\n      buttonDisabled={!canWriteCache}\n    />\n  );\n};\n","import { useState } from 'react';\n\nimport { Button, ConfirmModal } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { AccessControlAction } from '../types';\n\nimport { Props } from './DataSourceCache';\n\nexport const CacheClean = (props: Props) => {\n  const { cleanCache, dataSource, pageId } = props;\n  const [showCleanModal, setShowCleanModal] = useState(false);\n\n  const showConfirmCleanModal = (show: boolean) => () => {\n    setShowCleanModal(show);\n  };\n\n  const handleCleanCache = () => {\n    cleanCache(pageId);\n    setShowCleanModal(false);\n  };\n\n  const canWriteCache = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingWrite, dataSource);\n\n  return (\n    <div>\n      <Button variant=\"destructive\" onClick={showConfirmCleanModal(true)} disabled={!canWriteCache}>\n        Clear cache\n      </Button>\n      <ConfirmModal\n        isOpen={showCleanModal}\n        title=\"Clear cache\"\n        body=\"Warning: This action impacts all cache-enabled data sources. If you are using Memcached, the system clears all data from the Memcached instance. Do you want to continue?\"\n        confirmText=\"Clear cache\"\n        onConfirm={handleCleanCache}\n        onDismiss={showConfirmCleanModal(false)}\n      />\n    </div>\n  );\n};\n","import { Button } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { AccessControlAction } from '../types';\n\nimport { Props } from './DataSourceCache';\n\nexport const CacheSettingsDisable = (props: Props) => {\n  const { disableDataSourceCache, dataSource, pageId } = props;\n  const canWriteCache = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingWrite, dataSource);\n\n  return (\n    <Button variant=\"destructive\" onClick={() => disableDataSourceCache(pageId)} disabled={!canWriteCache}>\n      Disable\n    </Button>\n  );\n};\n","import { Field, Switch, Input, Button, Stack, Tooltip, Icon, Label } from '@grafana/ui';\nimport { contextSrv } from 'app/core/core';\n\nimport { AccessControlAction } from '../types';\n\nimport { CacheSettingsDisable } from './CacheSettingsDisable';\nimport { Props } from './DataSourceCache';\n\ninterface CacheSettingsProps {\n  loading: boolean;\n  setUseDefaultTTL: (useDefaultTTL: boolean) => void;\n  setTtlQueriesMs: (ttl: number) => void;\n  setTtlResourcesMs: (ttl: number) => void;\n}\n\nexport const CacheSettingsForm = (props: Props & CacheSettingsProps) => {\n  const {\n    updateDataSourceCache,\n    pageId,\n    useDefaultTTL,\n    setUseDefaultTTL,\n    defaultTTLMs,\n    ttlQueriesMs,\n    setTtlQueriesMs,\n    ttlResourcesMs,\n    setTtlResourcesMs,\n    loading,\n    enabled,\n    dataSource,\n    dataSourceID,\n    dataSourceUID,\n  } = props;\n  const canWriteCache = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingWrite, dataSource);\n\n  return (\n    <Stack direction={'column'} alignItems={'flex-start'}>\n      <Field\n        description={`Enable this to use the default TTL set in Grafana's configuration (${defaultTTLMs} ms)`}\n        label=\"Use default TTL\"\n        disabled={loading || !canWriteCache}\n      >\n        <Switch\n          value={useDefaultTTL}\n          onChange={() => {\n            setUseDefaultTTL(!useDefaultTTL);\n          }}\n        />\n      </Field>\n      <Field\n        description=\"The time-to-live for a query cache item in milliseconds. Example: 5000\"\n        label=\"Query TTL\"\n        disabled={loading || useDefaultTTL || !canWriteCache}\n      >\n        <Input\n          type=\"number\"\n          className=\"max-width-10\"\n          placeholder=\"1000\"\n          min={0}\n          value={(useDefaultTTL ? defaultTTLMs : ttlQueriesMs) || 0}\n          onChange={(el) => {\n            setTtlQueriesMs(el.currentTarget.valueAsNumber);\n          }}\n        />\n      </Field>\n      <Field\n        description=\"The time-to-live for resources cache items in milliseconds. Example: 5000\"\n        label={\n          <Label>\n            <span>Resource TTL</span>\n            <Tooltip\n              content={\n                <div>\n                  Resources are dynamic values that Grafana data source plugins retrieve from data sources for use in\n                  the query editor. Examples are Splunk namespaces, Prometheus labels, and CloudWatch metric names.\n                  Since these values update less frequently, you might prefer a longer cache TTL for Resources than\n                  queries. See the <a href=\"https://grafana.com/docs/grafana/latest/enterprise/query-caching/\">docs</a>{' '}\n                  for more info.\n                </div>\n              }\n            >\n              <Icon name=\"question-circle\" />\n            </Tooltip>\n          </Label>\n        }\n        disabled={loading || useDefaultTTL || !canWriteCache}\n      >\n        <Input\n          type=\"number\"\n          className=\"max-width-10\"\n          placeholder=\"1000\"\n          min={0}\n          value={(useDefaultTTL ? defaultTTLMs : ttlResourcesMs) || 0}\n          onChange={(el) => {\n            setTtlResourcesMs(el.currentTarget.valueAsNumber);\n          }}\n        />\n      </Field>\n      <Stack gap={2} alignItems=\"flex-start\" justifyContent=\"flex-start\">\n        <CacheSettingsDisable {...props} />\n        <Button\n          disabled={loading || !canWriteCache}\n          onClick={() =>\n            updateDataSourceCache(pageId, {\n              dataSourceID,\n              dataSourceUID,\n              enabled,\n              defaultTTLMs,\n              ttlQueriesMs,\n              ttlResourcesMs,\n              useDefaultTTL,\n            })\n          }\n        >\n          Save\n        </Button>\n      </Stack>\n    </Stack>\n  );\n};\n","import { useEffect, useState } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\n\nimport { Stack, useTheme2 } from '@grafana/ui';\nimport { UpgradeBox, UpgradeContent, UpgradeContentProps } from 'app/core/components/Upgrade/UpgradeBox';\nimport { contextSrv } from 'app/core/core';\nimport { highlightTrial } from 'app/features/admin/utils';\nimport { loadDataSource, loadDataSourceMeta } from 'app/features/datasources/state/actions';\n\nimport { AccessControlAction, EnterpriseStoreState } from '../types';\n\nimport { CacheCTA } from './CacheCTA';\nimport { CacheClean } from './CacheClean';\nimport { CacheSettingsForm } from './CacheSettingsForm';\nimport {\n  loadDataSourceCache,\n  enableDataSourceCache,\n  disableDataSourceCache,\n  updateDataSourceCache,\n  cleanCache,\n} from './state/actions';\n\nexport type ExternalProps = {\n  uid: string;\n};\n\nfunction mapStateToProps(state: EnterpriseStoreState, props: ExternalProps) {\n  return {\n    ...state.dataSourceCache,\n    pageId: props.uid,\n    dataSource: state.dataSources.dataSource,\n  };\n}\n\nconst mapDispatchToProps = {\n  disableDataSourceCache,\n  updateDataSourceCache,\n  enableDataSourceCache,\n  loadDataSourceCache,\n  loadDataSource,\n  cleanCache,\n  loadDataSourceMeta,\n};\n\nexport const connector = connect(mapStateToProps, mapDispatchToProps);\n\nexport type Props = ConnectedProps<typeof connector>;\n\nexport const Caching = (props: Props) => {\n  const [enabled, setEnabled] = useState(props.enabled);\n  const [loading, setLoading] = useState(true);\n  const [useDefaultTTL, setUseDefaultTTL] = useState(props.useDefaultTTL);\n  const [ttlQueriesMs, setTtlQueriesMs] = useState(props.ttlQueriesMs);\n  const [ttlResourcesMs, setTtlResourcesMs] = useState(props.ttlResourcesMs);\n\n  const { pageId, dataSource, loadDataSource, loadDataSourceCache, loadDataSourceMeta, enableDataSourceCache } = props;\n\n  useEffect(() => {\n    setEnabled(dataSource.jsonData?.disableGrafanaCache ? false : props.enabled);\n    setUseDefaultTTL(props.useDefaultTTL);\n    setTtlQueriesMs(props.ttlQueriesMs);\n    setTtlResourcesMs(props.ttlResourcesMs);\n    setLoading(false);\n  }, [\n    props.useDefaultTTL,\n    props.ttlQueriesMs,\n    props.ttlResourcesMs,\n    props.enabled,\n    dataSource.jsonData?.disableGrafanaCache,\n  ]);\n\n  useEffect(() => {\n    loadDataSource(pageId).then(loadDataSourceMeta);\n    loadDataSourceCache(pageId);\n  }, [loadDataSourceCache, loadDataSource, loadDataSourceMeta, pageId]);\n\n  const canWriteCache = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesCachingWrite, dataSource);\n\n  const content = enabled ? (\n    CacheSettingsForm({\n      ...props,\n      loading,\n      useDefaultTTL,\n      setUseDefaultTTL,\n      ttlQueriesMs,\n      setTtlQueriesMs,\n      ttlResourcesMs,\n      setTtlResourcesMs,\n    })\n  ) : highlightTrial() ? (\n    <DataSourceCacheUpgradeContent\n      action={\n        canWriteCache\n          ? {\n              text: 'Enable caching',\n              onClick: () => {\n                enableDataSourceCache(pageId);\n              },\n            }\n          : undefined\n      }\n    />\n  ) : (\n    CacheCTA(props)\n  );\n\n  return (\n    <>\n      {highlightTrial() && (\n        <UpgradeBox\n          featureId={'query-caching'}\n          eventVariant={'trial'}\n          featureName={'query caching'}\n          text=\"Enable query caching for free during your trial of Grafana Pro.\"\n        />\n      )}\n      <div className=\"page-action-bar\">\n        {enabled && !highlightTrial() && <h3 className=\"page-sub-heading\">Caching</h3>}\n        <div className=\"page-action-bar__spacer\" />\n        <Stack gap={2} alignItems=\"flex-end\" justifyContent=\"flex-end\">\n          {enabled && <CacheClean {...props} />}\n        </Stack>\n      </div>\n      {content}\n    </>\n  );\n};\n\nexport interface DataSourceCacheUpgradeContentProps {\n  action?: UpgradeContentProps['action'];\n}\nexport const DataSourceCacheUpgradeContent = ({ action }: DataSourceCacheUpgradeContentProps) => {\n  const theme = useTheme2();\n\n  return (\n    <UpgradeContent\n      action={action}\n      listItems={[\n        'Load dashboards in less than a second from the cache, even when they include big queries and lots of users are looking at once',\n        'Save money and avoid rate limiting by reducing the number of API calls you make to data sources like Splunk, CloudWatch and Github',\n        'Author dashboards more smoothly by caching the data used to construct queries, like fields in ServiceNow or metrics available from Datadog',\n      ]}\n      image={`query-caching-${theme.isLight ? 'light' : 'dark'}.png`}\n      featureUrl={'https://grafana.com/docs/grafana/latest/enterprise/query-caching'}\n      featureName={'query caching'}\n      description={\n        'With query caching, you can load dashboards faster and reduce costly queries to data sources by temporarily storing query results in memory, Redis, or Memcached.'\n      }\n    />\n  );\n};\n\nexport default connector(Caching);\n","import { UpgradeBox } from 'app/core/components/Upgrade/UpgradeBox';\nimport { useInitDataSourceSettings } from 'app/features/datasources/state';\n\nimport { DataSourceCacheUpgradeContent } from './DataSourceCache';\n\nexport type Props = {\n  uid: string;\n};\n\nexport const DataSourceCacheUpgrade = ({ uid }: Props) => {\n  useInitDataSourceSettings(uid);\n\n  return (\n    <>\n      <UpgradeBox featureName={'query caching'} featureId={'query-caching'} />\n      <DataSourceCacheUpgradeContent />\n    </>\n  );\n};\n","import { useParams } from 'react-router-dom-v5-compat';\n\nimport { Page } from 'app/core/components/Page/Page';\nimport { getNavModel } from 'app/core/selectors/navModel';\nimport { getDataSourceLoadingNav } from 'app/features/datasources/state';\nimport { StoreState, useSelector } from 'app/types';\n\nimport { DataSourceCacheUpgrade } from './DataSourceCacheUpgrade';\n\nexport const DataSourceCacheUpgradePage = () => {\n  const { uid = '' } = useParams<{ uid: string }>();\n  const dataSourceLoadingNav = getDataSourceLoadingNav('cache');\n  const navIndex = useSelector((state: StoreState) => state.navIndex);\n  const navModel = getNavModel(navIndex, `datasource-cache-${uid}`, dataSourceLoadingNav);\n\n  return (\n    <Page navId=\"datasources\" pageNav={navModel.main}>\n      <Page.Contents>\n        <DataSourceCacheUpgrade uid={uid} />\n      </Page.Contents>\n    </Page>\n  );\n};\n\nexport default DataSourceCacheUpgradePage;\n","import { createContext } from 'react';\n\nimport { DATASOURCES_ROUTES } from '../constants';\nimport { DataSourcesRoutes } from '../types';\n\n// The purpose of this context is to be able to override the data-sources routes (used for links for example) used under\n// the app/features/datasources modules, so we can reuse them more easily in different parts of the application (e.g. under Connections)\nexport const DataSourcesRoutesContext = createContext<DataSourcesRoutes>(DATASOURCES_ROUTES);\n","import { useContext, useEffect } from 'react';\n\nimport { DataSourcePluginMeta, DataSourceSettings } from '@grafana/data';\nimport { cleanUpAction } from 'app/core/actions/cleanUp';\nimport appEvents from 'app/core/app_events';\nimport { contextSrv } from 'app/core/core';\nimport { AccessControlAction, useDispatch, useSelector } from 'app/types';\nimport { ShowConfirmModalEvent } from 'app/types/events';\n\nimport { DataSourceRights } from '../types';\nimport { constructDataSourceExploreUrl } from '../utils';\n\nimport {\n  initDataSourceSettings,\n  testDataSource,\n  loadDataSource,\n  loadDataSources,\n  loadDataSourcePlugins,\n  addDataSource,\n  updateDataSource,\n  deleteLoadedDataSource,\n} from './actions';\nimport { DataSourcesRoutesContext } from './contexts';\nimport { initialDataSourceSettingsState } from './reducers';\nimport { getDataSource, getDataSourceMeta } from './selectors';\n\nexport const useInitDataSourceSettings = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(initDataSourceSettings(uid));\n\n    return function cleanUp() {\n      dispatch(\n        cleanUpAction({\n          cleanupAction: (state) => (state.dataSourceSettings = initialDataSourceSettingsState),\n        })\n      );\n    };\n  }, [uid, dispatch]);\n};\n\nexport const useTestDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return () => dispatch(testDataSource(uid, dataSourcesRoutes.Edit));\n};\n\nexport const useLoadDataSources = () => {\n  const dispatch = useDispatch();\n  const isLoading = useSelector((state) => state.dataSources.isLoadingDataSources);\n  const dataSources = useSelector((state) => state.dataSources.dataSources);\n\n  useEffect(() => {\n    dispatch(loadDataSources());\n  }, [dispatch]);\n\n  return { isLoading, dataSources };\n};\n\nexport const useLoadDataSource = (uid: string) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSource(uid));\n  }, [dispatch, uid]);\n};\n\nexport const useLoadDataSourcePlugins = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(loadDataSourcePlugins());\n  }, [dispatch]);\n};\n\nexport const useAddDatasource = () => {\n  const dispatch = useDispatch();\n  const dataSourcesRoutes = useDataSourcesRoutes();\n\n  return (plugin: DataSourcePluginMeta) => {\n    dispatch(addDataSource(plugin, dataSourcesRoutes.Edit));\n  };\n};\n\nexport const useUpdateDatasource = () => {\n  const dispatch = useDispatch();\n\n  return async (dataSource: DataSourceSettings) => dispatch(updateDataSource(dataSource));\n};\n\nexport const useDeleteLoadedDataSource = () => {\n  const dispatch = useDispatch();\n  const { name } = useSelector((state) => state.dataSources.dataSource);\n\n  return () => {\n    appEvents.publish(\n      new ShowConfirmModalEvent({\n        title: 'Delete',\n        text: `Are you sure you want to delete the \"${name}\" data source?`,\n        yesText: 'Delete',\n        icon: 'trash-alt',\n        onConfirm: () => dispatch(deleteLoadedDataSource()),\n      })\n    );\n  };\n};\n\nexport const useDataSource = (uid: string) => {\n  return useSelector((state) => getDataSource(state.dataSources, uid));\n};\n\nexport const useDataSourceExploreUrl = (uid: string) => {\n  const dataSource = useDataSource(uid);\n  return constructDataSourceExploreUrl(dataSource);\n};\n\nexport const useDataSourceMeta = (pluginType: string): DataSourcePluginMeta => {\n  return useSelector((state) => getDataSourceMeta(state.dataSources, pluginType));\n};\n\nexport const useDataSourceSettings = () => {\n  return useSelector((state) => state.dataSourceSettings);\n};\n\nexport const useDataSourceRights = (uid: string): DataSourceRights => {\n  const dataSource = useDataSource(uid);\n  const readOnly = dataSource.readOnly === true;\n  const hasWriteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesWrite, dataSource);\n  const hasDeleteRights = contextSrv.hasPermissionInMetadata(AccessControlAction.DataSourcesDelete, dataSource);\n\n  return {\n    readOnly,\n    hasWriteRights,\n    hasDeleteRights,\n  };\n};\n\nexport const useDataSourcesRoutes = () => {\n  return useContext(DataSourcesRoutesContext);\n};\n","import { DataSourceJsonData, DataSourceSettings, urlUtil, locationUtil } from '@grafana/data';\n\nexport const constructDataSourceExploreUrl = (dataSource: DataSourceSettings<DataSourceJsonData, {}>) => {\n  const exploreState = JSON.stringify({ datasource: dataSource.name, context: 'explore' });\n  const exploreUrl = urlUtil.renderUrl(locationUtil.assureBaseUrl('/explore'), { left: exploreState });\n\n  return exploreUrl;\n};\n"],"names":["ctaStyle","infoBoxStyles","title","buttonIcon","buttonLink","buttonTitle","buttonDisabled","onClick","proTip","proTipLink","proTipLinkTitle","proTipTarget","infoBox","infoBoxTitle","footer","ctaElementClassName","ButtonEl","ctaElement","CacheCTA","props","enableDataSourceCache","dataSource","pageId","canWriteCache","EmptyListCTA","CacheClean","cleanCache","showCleanModal","setShowCleanModal","showConfirmCleanModal","show","handleCleanCache","Button","ConfirmModal","CacheSettingsDisable","disableDataSourceCache","CacheSettingsForm","updateDataSourceCache","useDefaultTTL","setUseDefaultTTL","defaultTTLMs","ttlQueriesMs","setTtlQueriesMs","ttlResourcesMs","setTtlResourcesMs","loading","enabled","dataSourceID","dataSourceUID","Stack","Field","Switch","Input","el","Label","Tooltip","Icon","mapStateToProps","state","mapDispatchToProps","connector","Caching","setEnabled","setLoading","loadDataSource","loadDataSourceCache","loadDataSourceMeta","content","DataSourceCacheUpgradeContent","UpgradeBox","action","theme","DataSourceCacheUpgrade","uid","DataSourceCacheUpgradePage","dataSourceLoadingNav","navIndex","navModel","DataSourcesRoutesContext","useInitDataSourceSettings","dispatch","useTestDataSource","dataSourcesRoutes","useDataSourcesRoutes","useLoadDataSources","isLoading","dataSources","useLoadDataSource","useLoadDataSourcePlugins","useAddDatasource","plugin","useUpdateDatasource","useDeleteLoadedDataSource","name","useDataSource","useDataSourceExploreUrl","useDataSourceMeta","pluginType","useDataSourceSettings","useDataSourceRights","readOnly","hasWriteRights","hasDeleteRights","constructDataSourceExploreUrl","exploreState"],"sourceRoot":""}